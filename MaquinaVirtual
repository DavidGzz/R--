import json
from math import *

constantes = {}
variablesGlobales = {}
variablesLocales = {}
temporal = {}

def get_Valor(c):
    try:
        if c in variablesGlobales:
            return variablesGlobales[c]
        if c / 400.0 < 1:
            return variablesLocales[c]
        elif c / 800.0 < 1:
            return variablesGlobales[c]
        elif c / 1200.0 < 1:
            return constantes[c]
        elif c / 1600.0 < 1:
            return temporal[c]
        else:
            return variablesGlobales[c]
    except:
        print("Variable no tiene valor")

def suma(c1, c2, c3):
    try:
        temporal[c3] = float(get_Valor(c1)) + float(get_Valor(c2))
    except:
        exit(-1)

def resta(c1, c2, c3):
    try:
        temporal[c3] = float(get_Valor(c1)) - float(get_Valor(c2))
    except:
        exit(-1)

def multiplicacion(c1, c2, c3):
    try:
        temporal[c3] = float(get_Valor(c1)) * float(get_Valor(c2))
    except:
        exit(-1)

def division(c1, c2, c3):
    try:
        temporal[c3] = float(get_Valor(c1)) / float(get_Valor(c2))
    except:
        exit(-1)

def goto(c1, c2, c3):
	global cont
	cont = c3 - 1

def gotoF(c1, c2, c3):
	global cont
	if not temporal[c1]:
		cont = c3 - 1

def asignacion(c1, c2, c3):
    if c3 / 400 < 1:
        global variablesLocales
        variablesLocales[c3] = get_Valor(c1)
    elif c3 / 800 < 1:
        variablesGlobales[c3] = get_Valor(c1)
    elif c3 / 1200 < 1:
        global constantes
        constantes[c3] = get_Valor(c1)
    else:
        global temporal
        temporal[c3] = get_Valor(c1)

def mayorQ(c1, c2, c3):
	if float(get_Valor(c1)) > float(get_Valor(c2)):
		temporal[c3] = True
	else: 
		temporal[c3] = False

def menorQ(c1, c2, c3):
	global temporal
	if float(get_Valor(c1)) < float(get_Valor(c2)):
		temporal[c3] = True
	else: 
		temporal[c3] = False

operaciones = {
    '+': suma,
    'goto': goto,
    'gotoF': gotoF,
    '=': asignacion,
    '-': resta,
    '/': division,
    '*': multiplicacion,
    '>': mayorQ,
    '<': menorQ,
}

with open('cuadruplos.json') as f:
    todo = json.load(f)

constantes = todo['constantes']
constantes = {v: k for k, v in constantes.items()}
cuadruplos = todo['cuadruplos']
cont = 0

while cont < len(cuadruplos):
	cuad = cuadruplos[cont]
	operaciones[cuad[0]](cuad[1], cuad[2], cuad[3])
	cont = cont + 1

for x in temporal:
    print("Respuestas: ", temporal[x])