Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> programa
Rule 1     programa -> ID primerCuad ; vars programaF main
Rule 2     primerCuad -> <empty>
Rule 3     main -> MAIN llenarCuad ( ) bloque
Rule 4     llenarCuad -> <empty>
Rule 5     programaF -> function programaF
Rule 6     programaF -> empty
Rule 7     function -> FUNCTION tipoRetorno ID ( functionParam ) functionAux bloque functionAux2
Rule 8     function -> empty
Rule 9     functionAux -> <empty>
Rule 10    functionAux2 -> <empty>
Rule 11    tipoRetorno -> INT
Rule 12    tipoRetorno -> FLOAT
Rule 13    tipoRetorno -> VOID
Rule 14    bloque -> { cuerpo }
Rule 15    cuerpo -> vars estatutop
Rule 16    estatutop -> estatuto estatutop
Rule 17    estatutop -> empty
Rule 18    estatuto -> asignacion
Rule 19    estatuto -> condicion
Rule 20    estatuto -> write
Rule 21    estatuto -> while
Rule 22    estatuto -> return
Rule 23    estatuto -> for
Rule 24    estatuto -> fact
Rule 25    estatuto -> fibonacci
Rule 26    estatuto -> cuadratica
Rule 27    estatuto -> raiz
Rule 28    estatuto -> id ;
Rule 29    estatuto -> empty
Rule 30    return -> RETURN superexpresion ;
Rule 31    condicion -> IF ( superexpresion ) condicionAux bloque condicionelse
Rule 32    condicionAux -> <empty>
Rule 33    condicionelse -> ELSE condicionelseAux bloque
Rule 34    condicionelse -> empty
Rule 35    condicionelseAux -> <empty>
Rule 36    write -> WRITE ( writep ) ;
Rule 37    writep -> superexpresion writepAux writepp
Rule 38    writep -> LETRERO writepAux2 writepp
Rule 39    writepAux -> <empty>
Rule 40    writepAux2 -> <empty>
Rule 41    writepp -> , writeppAux writep
Rule 42    writepp -> empty writeppAux
Rule 43    writeppAux -> <empty>
Rule 44    for -> FOR ( id = superexpresion forAux ; superexpresion forAux2 ) bloque forAux3
Rule 45    forAux -> <empty>
Rule 46    forAux2 -> <empty>
Rule 47    forAux3 -> <empty>
Rule 48    while -> WHILE whileAux ( superexpresion ) whileAux2 bloque
Rule 49    whileAux -> <empty>
Rule 50    whileAux2 -> <empty>
Rule 51    asignacion -> vars
Rule 52    asignacion -> id asignacionp
Rule 53    asignacionp -> = superexpresion ;
Rule 54    superexpresion -> megaexpresion superexpresionp
Rule 55    superexpresionp -> AND superexpresion
Rule 56    superexpresionp -> OR superexpresion
Rule 57    superexpresionp -> empty
Rule 58    megaexpresion -> exp megaexpresionp
Rule 59    megaexpresionp -> < exp
Rule 60    megaexpresionp -> > exp
Rule 61    megaexpresionp -> EQUALS exp
Rule 62    megaexpresionp -> DIFF exp
Rule 63    megaexpresionp -> LTHANEQ exp
Rule 64    megaexpresionp -> GTHANEQ exp
Rule 65    megaexpresionp -> empty
Rule 66    exp -> termino expp
Rule 67    expp -> + pAppT exp
Rule 68    expp -> - pAppT exp
Rule 69    expp -> empty
Rule 70    pAppT -> <empty>
Rule 71    termino -> factor terminop
Rule 72    terminop -> * pAppF termino
Rule 73    terminop -> / pAppF termino
Rule 74    terminop -> empty
Rule 75    pAppF -> <empty>
Rule 76    factor -> constante
Rule 77    factor -> lParen superexpresion rParen
Rule 78    lParen -> (
Rule 79    rParen -> )
Rule 80    constante -> id
Rule 81    constante -> CTEF ctef
Rule 82    constante -> CTEI ctei
Rule 83    ctef -> <empty>
Rule 84    ctei -> <empty>
Rule 85    functionParam -> parametro
Rule 86    functionParam -> empty
Rule 87    parametro -> tipo ID parametrop
Rule 88    parametrop -> , parametro
Rule 89    parametrop -> empty
Rule 90    vars -> varsp
Rule 91    varsp -> tipo varspp ; varsp
Rule 92    varsp -> empty
Rule 93    varspp -> ID varsppp
Rule 94    varsppp -> , varspp
Rule 95    varsppp -> [ CTEI ] arreglo
Rule 96    varsppp -> empty
Rule 97    arreglo -> , varspp
Rule 98    arreglo -> empty
Rule 99    tipo -> INT
Rule 100   tipo -> FLOAT
Rule 101   tipo -> CHAR
Rule 102   id -> ID idp
Rule 103   idp -> ( idpp )
Rule 104   idp -> [ superexpresion ]
Rule 105   idp -> empty
Rule 106   idpp -> superexpresion idppp
Rule 107   idpp -> empty
Rule 108   idppp -> , idpp
Rule 109   idppp -> empty
Rule 110   fact -> FACT ( CTEI ) ;
Rule 111   cuadratica -> CUADRATICA ( CTEI , CTEI , CTEI ) ;
Rule 112   fibonacci -> FIBONACCI ( CTEI ) ;
Rule 113   raiz -> RAIZ ( CTEI ) ;
Rule 114   empty -> <empty>

Terminals, with rules where they appear

(                    : 3 7 31 36 44 48 78 103 110 111 112 113
)                    : 3 7 31 36 44 48 79 103 110 111 112 113
*                    : 72
+                    : 67
,                    : 41 88 94 97 108 111 111
-                    : 68
/                    : 73
;                    : 1 28 30 36 44 53 91 110 111 112 113
<                    : 59
=                    : 44 53
>                    : 60
AND                  : 55
CHAR                 : 101
CTEF                 : 81
CTEI                 : 82 95 110 111 111 111 112 113
CUADRATICA           : 111
DIFF                 : 62
ELSE                 : 33
EQUALS               : 61
FACT                 : 110
FIBONACCI            : 112
FLOAT                : 12 100
FOR                  : 44
FUNCTION             : 7
GTHANEQ              : 64
ID                   : 1 7 87 93 102
IF                   : 31
INT                  : 11 99
LETRERO              : 38
LTHANEQ              : 63
MAIN                 : 3
OR                   : 56
RAIZ                 : 113
RETURN               : 30
VOID                 : 13
WHILE                : 48
WRITE                : 36
[                    : 95 104
]                    : 95 104
error                : 
{                    : 14
}                    : 14

Nonterminals, with rules where they appear

arreglo              : 95
asignacion           : 18
asignacionp          : 52
bloque               : 3 7 31 33 44 48
condicion            : 19
condicionAux         : 31
condicionelse        : 31
condicionelseAux     : 33
constante            : 76
ctef                 : 81
ctei                 : 82
cuadratica           : 26
cuerpo               : 14
empty                : 6 8 17 29 34 42 57 65 69 74 86 89 92 96 98 105 107 109
estatuto             : 16
estatutop            : 15 16
exp                  : 58 59 60 61 62 63 64 67 68
expp                 : 66
fact                 : 24
factor               : 71
fibonacci            : 25
for                  : 23
forAux               : 44
forAux2              : 44
forAux3              : 44
function             : 5
functionAux          : 7
functionAux2         : 7
functionParam        : 7
id                   : 28 44 52 80
idp                  : 102
idpp                 : 103 108
idppp                : 106
lParen               : 77
llenarCuad           : 3
main                 : 1
megaexpresion        : 54
megaexpresionp       : 58
pAppF                : 72 73
pAppT                : 67 68
parametro            : 85 88
parametrop           : 87
primerCuad           : 1
programa             : 0
programaF            : 1 5
rParen               : 77
raiz                 : 27
return               : 22
superexpresion       : 30 31 37 44 44 48 53 55 56 77 104 106
superexpresionp      : 54
termino              : 66 72 73
terminop             : 71
tipo                 : 87 91
tipoRetorno          : 7
vars                 : 1 15 51
varsp                : 90 91
varspp               : 91 94 97
varsppp              : 93
while                : 21
whileAux             : 48
whileAux2            : 48
write                : 20
writep               : 36 41
writepAux            : 37
writepAux2           : 38
writepp              : 37 38
writeppAux           : 41 42

Parsing method: LALR

state 0

    (0) S' -> . programa
    (1) programa -> . ID primerCuad ; vars programaF main

    ID              shift and go to state 2

    programa                       shift and go to state 1

state 1

    (0) S' -> programa .



state 2

    (1) programa -> ID . primerCuad ; vars programaF main
    (2) primerCuad -> .

    ;               reduce using rule 2 (primerCuad -> .)

    primerCuad                     shift and go to state 3

state 3

    (1) programa -> ID primerCuad . ; vars programaF main

    ;               shift and go to state 4


state 4

    (1) programa -> ID primerCuad ; . vars programaF main
    (90) vars -> . varsp
    (91) varsp -> . tipo varspp ; varsp
    (92) varsp -> . empty
    (99) tipo -> . INT
    (100) tipo -> . FLOAT
    (101) tipo -> . CHAR
    (114) empty -> .

    INT             shift and go to state 9
    FLOAT           shift and go to state 10
    CHAR            shift and go to state 11
    FUNCTION        reduce using rule 114 (empty -> .)
    MAIN            reduce using rule 114 (empty -> .)

    vars                           shift and go to state 5
    varsp                          shift and go to state 6
    tipo                           shift and go to state 7
    empty                          shift and go to state 8

state 5

    (1) programa -> ID primerCuad ; vars . programaF main
    (5) programaF -> . function programaF
    (6) programaF -> . empty
    (7) function -> . FUNCTION tipoRetorno ID ( functionParam ) functionAux bloque functionAux2
    (8) function -> . empty
    (114) empty -> .

  ! shift/reduce conflict for FUNCTION resolved as shift
    FUNCTION        shift and go to state 15
    MAIN            reduce using rule 114 (empty -> .)

  ! FUNCTION        [ reduce using rule 114 (empty -> .) ]

    programaF                      shift and go to state 12
    function                       shift and go to state 13
    empty                          shift and go to state 14

state 6

    (90) vars -> varsp .

    FUNCTION        reduce using rule 90 (vars -> varsp .)
    MAIN            reduce using rule 90 (vars -> varsp .)
    IF              reduce using rule 90 (vars -> varsp .)
    WRITE           reduce using rule 90 (vars -> varsp .)
    WHILE           reduce using rule 90 (vars -> varsp .)
    RETURN          reduce using rule 90 (vars -> varsp .)
    FOR             reduce using rule 90 (vars -> varsp .)
    FACT            reduce using rule 90 (vars -> varsp .)
    FIBONACCI       reduce using rule 90 (vars -> varsp .)
    CUADRATICA      reduce using rule 90 (vars -> varsp .)
    RAIZ            reduce using rule 90 (vars -> varsp .)
    ID              reduce using rule 90 (vars -> varsp .)
    INT             reduce using rule 90 (vars -> varsp .)
    FLOAT           reduce using rule 90 (vars -> varsp .)
    CHAR            reduce using rule 90 (vars -> varsp .)
    }               reduce using rule 90 (vars -> varsp .)


state 7

    (91) varsp -> tipo . varspp ; varsp
    (93) varspp -> . ID varsppp

    ID              shift and go to state 17

    varspp                         shift and go to state 16

state 8

    (92) varsp -> empty .

    FUNCTION        reduce using rule 92 (varsp -> empty .)
    MAIN            reduce using rule 92 (varsp -> empty .)
    IF              reduce using rule 92 (varsp -> empty .)
    WRITE           reduce using rule 92 (varsp -> empty .)
    WHILE           reduce using rule 92 (varsp -> empty .)
    RETURN          reduce using rule 92 (varsp -> empty .)
    FOR             reduce using rule 92 (varsp -> empty .)
    FACT            reduce using rule 92 (varsp -> empty .)
    FIBONACCI       reduce using rule 92 (varsp -> empty .)
    CUADRATICA      reduce using rule 92 (varsp -> empty .)
    RAIZ            reduce using rule 92 (varsp -> empty .)
    ID              reduce using rule 92 (varsp -> empty .)
    INT             reduce using rule 92 (varsp -> empty .)
    FLOAT           reduce using rule 92 (varsp -> empty .)
    CHAR            reduce using rule 92 (varsp -> empty .)
    }               reduce using rule 92 (varsp -> empty .)


state 9

    (99) tipo -> INT .

    ID              reduce using rule 99 (tipo -> INT .)


state 10

    (100) tipo -> FLOAT .

    ID              reduce using rule 100 (tipo -> FLOAT .)


state 11

    (101) tipo -> CHAR .

    ID              reduce using rule 101 (tipo -> CHAR .)


state 12

    (1) programa -> ID primerCuad ; vars programaF . main
    (3) main -> . MAIN llenarCuad ( ) bloque

    MAIN            shift and go to state 19

    main                           shift and go to state 18

state 13

    (5) programaF -> function . programaF
    (5) programaF -> . function programaF
    (6) programaF -> . empty
    (7) function -> . FUNCTION tipoRetorno ID ( functionParam ) functionAux bloque functionAux2
    (8) function -> . empty
    (114) empty -> .

  ! shift/reduce conflict for FUNCTION resolved as shift
    FUNCTION        shift and go to state 15
    MAIN            reduce using rule 114 (empty -> .)

  ! FUNCTION        [ reduce using rule 114 (empty -> .) ]

    function                       shift and go to state 13
    programaF                      shift and go to state 20
    empty                          shift and go to state 14

state 14

    (6) programaF -> empty .
    (8) function -> empty .

  ! reduce/reduce conflict for MAIN resolved using rule 6 (programaF -> empty .)
    MAIN            reduce using rule 6 (programaF -> empty .)
    FUNCTION        reduce using rule 8 (function -> empty .)

  ! MAIN            [ reduce using rule 8 (function -> empty .) ]


state 15

    (7) function -> FUNCTION . tipoRetorno ID ( functionParam ) functionAux bloque functionAux2
    (11) tipoRetorno -> . INT
    (12) tipoRetorno -> . FLOAT
    (13) tipoRetorno -> . VOID

    INT             shift and go to state 22
    FLOAT           shift and go to state 23
    VOID            shift and go to state 24

    tipoRetorno                    shift and go to state 21

state 16

    (91) varsp -> tipo varspp . ; varsp

    ;               shift and go to state 25


state 17

    (93) varspp -> ID . varsppp
    (94) varsppp -> . , varspp
    (95) varsppp -> . [ CTEI ] arreglo
    (96) varsppp -> . empty
    (114) empty -> .

    ,               shift and go to state 27
    [               shift and go to state 28
    ;               reduce using rule 114 (empty -> .)

    varsppp                        shift and go to state 26
    empty                          shift and go to state 29

state 18

    (1) programa -> ID primerCuad ; vars programaF main .

    $end            reduce using rule 1 (programa -> ID primerCuad ; vars programaF main .)


state 19

    (3) main -> MAIN . llenarCuad ( ) bloque
    (4) llenarCuad -> .

    (               reduce using rule 4 (llenarCuad -> .)

    llenarCuad                     shift and go to state 30

state 20

    (5) programaF -> function programaF .

    MAIN            reduce using rule 5 (programaF -> function programaF .)


state 21

    (7) function -> FUNCTION tipoRetorno . ID ( functionParam ) functionAux bloque functionAux2

    ID              shift and go to state 31


state 22

    (11) tipoRetorno -> INT .

    ID              reduce using rule 11 (tipoRetorno -> INT .)


state 23

    (12) tipoRetorno -> FLOAT .

    ID              reduce using rule 12 (tipoRetorno -> FLOAT .)


state 24

    (13) tipoRetorno -> VOID .

    ID              reduce using rule 13 (tipoRetorno -> VOID .)


state 25

    (91) varsp -> tipo varspp ; . varsp
    (91) varsp -> . tipo varspp ; varsp
    (92) varsp -> . empty
    (99) tipo -> . INT
    (100) tipo -> . FLOAT
    (101) tipo -> . CHAR
    (114) empty -> .

  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
    INT             shift and go to state 9
    FLOAT           shift and go to state 10
    CHAR            shift and go to state 11
    FUNCTION        reduce using rule 114 (empty -> .)
    MAIN            reduce using rule 114 (empty -> .)
    IF              reduce using rule 114 (empty -> .)
    WRITE           reduce using rule 114 (empty -> .)
    WHILE           reduce using rule 114 (empty -> .)
    RETURN          reduce using rule 114 (empty -> .)
    FOR             reduce using rule 114 (empty -> .)
    FACT            reduce using rule 114 (empty -> .)
    FIBONACCI       reduce using rule 114 (empty -> .)
    CUADRATICA      reduce using rule 114 (empty -> .)
    RAIZ            reduce using rule 114 (empty -> .)
    ID              reduce using rule 114 (empty -> .)
    }               reduce using rule 114 (empty -> .)

  ! INT             [ reduce using rule 114 (empty -> .) ]
  ! FLOAT           [ reduce using rule 114 (empty -> .) ]
  ! CHAR            [ reduce using rule 114 (empty -> .) ]

    tipo                           shift and go to state 7
    varsp                          shift and go to state 32
    empty                          shift and go to state 8

state 26

    (93) varspp -> ID varsppp .

    ;               reduce using rule 93 (varspp -> ID varsppp .)


state 27

    (94) varsppp -> , . varspp
    (93) varspp -> . ID varsppp

    ID              shift and go to state 17

    varspp                         shift and go to state 33

state 28

    (95) varsppp -> [ . CTEI ] arreglo

    CTEI            shift and go to state 34


state 29

    (96) varsppp -> empty .

    ;               reduce using rule 96 (varsppp -> empty .)


state 30

    (3) main -> MAIN llenarCuad . ( ) bloque

    (               shift and go to state 35


state 31

    (7) function -> FUNCTION tipoRetorno ID . ( functionParam ) functionAux bloque functionAux2

    (               shift and go to state 36


state 32

    (91) varsp -> tipo varspp ; varsp .

    FUNCTION        reduce using rule 91 (varsp -> tipo varspp ; varsp .)
    MAIN            reduce using rule 91 (varsp -> tipo varspp ; varsp .)
    IF              reduce using rule 91 (varsp -> tipo varspp ; varsp .)
    WRITE           reduce using rule 91 (varsp -> tipo varspp ; varsp .)
    WHILE           reduce using rule 91 (varsp -> tipo varspp ; varsp .)
    RETURN          reduce using rule 91 (varsp -> tipo varspp ; varsp .)
    FOR             reduce using rule 91 (varsp -> tipo varspp ; varsp .)
    FACT            reduce using rule 91 (varsp -> tipo varspp ; varsp .)
    FIBONACCI       reduce using rule 91 (varsp -> tipo varspp ; varsp .)
    CUADRATICA      reduce using rule 91 (varsp -> tipo varspp ; varsp .)
    RAIZ            reduce using rule 91 (varsp -> tipo varspp ; varsp .)
    ID              reduce using rule 91 (varsp -> tipo varspp ; varsp .)
    INT             reduce using rule 91 (varsp -> tipo varspp ; varsp .)
    FLOAT           reduce using rule 91 (varsp -> tipo varspp ; varsp .)
    CHAR            reduce using rule 91 (varsp -> tipo varspp ; varsp .)
    }               reduce using rule 91 (varsp -> tipo varspp ; varsp .)


state 33

    (94) varsppp -> , varspp .

    ;               reduce using rule 94 (varsppp -> , varspp .)


state 34

    (95) varsppp -> [ CTEI . ] arreglo

    ]               shift and go to state 37


state 35

    (3) main -> MAIN llenarCuad ( . ) bloque

    )               shift and go to state 38


state 36

    (7) function -> FUNCTION tipoRetorno ID ( . functionParam ) functionAux bloque functionAux2
    (85) functionParam -> . parametro
    (86) functionParam -> . empty
    (87) parametro -> . tipo ID parametrop
    (114) empty -> .
    (99) tipo -> . INT
    (100) tipo -> . FLOAT
    (101) tipo -> . CHAR

    )               reduce using rule 114 (empty -> .)
    INT             shift and go to state 9
    FLOAT           shift and go to state 10
    CHAR            shift and go to state 11

    functionParam                  shift and go to state 39
    parametro                      shift and go to state 40
    empty                          shift and go to state 41
    tipo                           shift and go to state 42

state 37

    (95) varsppp -> [ CTEI ] . arreglo
    (97) arreglo -> . , varspp
    (98) arreglo -> . empty
    (114) empty -> .

    ,               shift and go to state 44
    ;               reduce using rule 114 (empty -> .)

    arreglo                        shift and go to state 43
    empty                          shift and go to state 45

state 38

    (3) main -> MAIN llenarCuad ( ) . bloque
    (14) bloque -> . { cuerpo }

    {               shift and go to state 47

    bloque                         shift and go to state 46

state 39

    (7) function -> FUNCTION tipoRetorno ID ( functionParam . ) functionAux bloque functionAux2

    )               shift and go to state 48


state 40

    (85) functionParam -> parametro .

    )               reduce using rule 85 (functionParam -> parametro .)


state 41

    (86) functionParam -> empty .

    )               reduce using rule 86 (functionParam -> empty .)


state 42

    (87) parametro -> tipo . ID parametrop

    ID              shift and go to state 49


state 43

    (95) varsppp -> [ CTEI ] arreglo .

    ;               reduce using rule 95 (varsppp -> [ CTEI ] arreglo .)


state 44

    (97) arreglo -> , . varspp
    (93) varspp -> . ID varsppp

    ID              shift and go to state 17

    varspp                         shift and go to state 50

state 45

    (98) arreglo -> empty .

    ;               reduce using rule 98 (arreglo -> empty .)


state 46

    (3) main -> MAIN llenarCuad ( ) bloque .

    $end            reduce using rule 3 (main -> MAIN llenarCuad ( ) bloque .)


state 47

    (14) bloque -> { . cuerpo }
    (15) cuerpo -> . vars estatutop
    (90) vars -> . varsp
    (91) varsp -> . tipo varspp ; varsp
    (92) varsp -> . empty
    (99) tipo -> . INT
    (100) tipo -> . FLOAT
    (101) tipo -> . CHAR
    (114) empty -> .

  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
    INT             shift and go to state 9
    FLOAT           shift and go to state 10
    CHAR            shift and go to state 11
    IF              reduce using rule 114 (empty -> .)
    WRITE           reduce using rule 114 (empty -> .)
    WHILE           reduce using rule 114 (empty -> .)
    RETURN          reduce using rule 114 (empty -> .)
    FOR             reduce using rule 114 (empty -> .)
    FACT            reduce using rule 114 (empty -> .)
    FIBONACCI       reduce using rule 114 (empty -> .)
    CUADRATICA      reduce using rule 114 (empty -> .)
    RAIZ            reduce using rule 114 (empty -> .)
    ID              reduce using rule 114 (empty -> .)
    }               reduce using rule 114 (empty -> .)

  ! INT             [ reduce using rule 114 (empty -> .) ]
  ! FLOAT           [ reduce using rule 114 (empty -> .) ]
  ! CHAR            [ reduce using rule 114 (empty -> .) ]

    cuerpo                         shift and go to state 51
    vars                           shift and go to state 52
    varsp                          shift and go to state 6
    tipo                           shift and go to state 7
    empty                          shift and go to state 8

state 48

    (7) function -> FUNCTION tipoRetorno ID ( functionParam ) . functionAux bloque functionAux2
    (9) functionAux -> .

    {               reduce using rule 9 (functionAux -> .)

    functionAux                    shift and go to state 53

state 49

    (87) parametro -> tipo ID . parametrop
    (88) parametrop -> . , parametro
    (89) parametrop -> . empty
    (114) empty -> .

    ,               shift and go to state 55
    )               reduce using rule 114 (empty -> .)

    parametrop                     shift and go to state 54
    empty                          shift and go to state 56

state 50

    (97) arreglo -> , varspp .

    ;               reduce using rule 97 (arreglo -> , varspp .)


state 51

    (14) bloque -> { cuerpo . }

    }               shift and go to state 57


state 52

    (15) cuerpo -> vars . estatutop
    (16) estatutop -> . estatuto estatutop
    (17) estatutop -> . empty
    (18) estatuto -> . asignacion
    (19) estatuto -> . condicion
    (20) estatuto -> . write
    (21) estatuto -> . while
    (22) estatuto -> . return
    (23) estatuto -> . for
    (24) estatuto -> . fact
    (25) estatuto -> . fibonacci
    (26) estatuto -> . cuadratica
    (27) estatuto -> . raiz
    (28) estatuto -> . id ;
    (29) estatuto -> . empty
    (114) empty -> .
    (51) asignacion -> . vars
    (52) asignacion -> . id asignacionp
    (31) condicion -> . IF ( superexpresion ) condicionAux bloque condicionelse
    (36) write -> . WRITE ( writep ) ;
    (48) while -> . WHILE whileAux ( superexpresion ) whileAux2 bloque
    (30) return -> . RETURN superexpresion ;
    (44) for -> . FOR ( id = superexpresion forAux ; superexpresion forAux2 ) bloque forAux3
    (110) fact -> . FACT ( CTEI ) ;
    (112) fibonacci -> . FIBONACCI ( CTEI ) ;
    (111) cuadratica -> . CUADRATICA ( CTEI , CTEI , CTEI ) ;
    (113) raiz -> . RAIZ ( CTEI ) ;
    (102) id -> . ID idp
    (90) vars -> . varsp
    (91) varsp -> . tipo varspp ; varsp
    (92) varsp -> . empty
    (99) tipo -> . INT
    (100) tipo -> . FLOAT
    (101) tipo -> . CHAR

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for FACT resolved as shift
  ! shift/reduce conflict for FIBONACCI resolved as shift
  ! shift/reduce conflict for CUADRATICA resolved as shift
  ! shift/reduce conflict for RAIZ resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
    }               reduce using rule 114 (empty -> .)
    IF              shift and go to state 73
    WRITE           shift and go to state 74
    WHILE           shift and go to state 75
    RETURN          shift and go to state 76
    FOR             shift and go to state 77
    FACT            shift and go to state 78
    FIBONACCI       shift and go to state 79
    CUADRATICA      shift and go to state 80
    RAIZ            shift and go to state 81
    ID              shift and go to state 82
    INT             shift and go to state 9
    FLOAT           shift and go to state 10
    CHAR            shift and go to state 11

  ! IF              [ reduce using rule 114 (empty -> .) ]
  ! WRITE           [ reduce using rule 114 (empty -> .) ]
  ! WHILE           [ reduce using rule 114 (empty -> .) ]
  ! RETURN          [ reduce using rule 114 (empty -> .) ]
  ! FOR             [ reduce using rule 114 (empty -> .) ]
  ! FACT            [ reduce using rule 114 (empty -> .) ]
  ! FIBONACCI       [ reduce using rule 114 (empty -> .) ]
  ! CUADRATICA      [ reduce using rule 114 (empty -> .) ]
  ! RAIZ            [ reduce using rule 114 (empty -> .) ]
  ! ID              [ reduce using rule 114 (empty -> .) ]
  ! INT             [ reduce using rule 114 (empty -> .) ]
  ! FLOAT           [ reduce using rule 114 (empty -> .) ]
  ! CHAR            [ reduce using rule 114 (empty -> .) ]

    vars                           shift and go to state 58
    estatutop                      shift and go to state 59
    estatuto                       shift and go to state 60
    empty                          shift and go to state 61
    asignacion                     shift and go to state 62
    condicion                      shift and go to state 63
    write                          shift and go to state 64
    while                          shift and go to state 65
    return                         shift and go to state 66
    for                            shift and go to state 67
    fact                           shift and go to state 68
    fibonacci                      shift and go to state 69
    cuadratica                     shift and go to state 70
    raiz                           shift and go to state 71
    id                             shift and go to state 72
    varsp                          shift and go to state 6
    tipo                           shift and go to state 7

state 53

    (7) function -> FUNCTION tipoRetorno ID ( functionParam ) functionAux . bloque functionAux2
    (14) bloque -> . { cuerpo }

    {               shift and go to state 47

    bloque                         shift and go to state 83

state 54

    (87) parametro -> tipo ID parametrop .

    )               reduce using rule 87 (parametro -> tipo ID parametrop .)


state 55

    (88) parametrop -> , . parametro
    (87) parametro -> . tipo ID parametrop
    (99) tipo -> . INT
    (100) tipo -> . FLOAT
    (101) tipo -> . CHAR

    INT             shift and go to state 9
    FLOAT           shift and go to state 10
    CHAR            shift and go to state 11

    parametro                      shift and go to state 84
    tipo                           shift and go to state 42

state 56

    (89) parametrop -> empty .

    )               reduce using rule 89 (parametrop -> empty .)


state 57

    (14) bloque -> { cuerpo } .

    $end            reduce using rule 14 (bloque -> { cuerpo } .)
    FUNCTION        reduce using rule 14 (bloque -> { cuerpo } .)
    MAIN            reduce using rule 14 (bloque -> { cuerpo } .)
    ELSE            reduce using rule 14 (bloque -> { cuerpo } .)
    IF              reduce using rule 14 (bloque -> { cuerpo } .)
    WRITE           reduce using rule 14 (bloque -> { cuerpo } .)
    WHILE           reduce using rule 14 (bloque -> { cuerpo } .)
    RETURN          reduce using rule 14 (bloque -> { cuerpo } .)
    FOR             reduce using rule 14 (bloque -> { cuerpo } .)
    FACT            reduce using rule 14 (bloque -> { cuerpo } .)
    FIBONACCI       reduce using rule 14 (bloque -> { cuerpo } .)
    CUADRATICA      reduce using rule 14 (bloque -> { cuerpo } .)
    RAIZ            reduce using rule 14 (bloque -> { cuerpo } .)
    ID              reduce using rule 14 (bloque -> { cuerpo } .)
    INT             reduce using rule 14 (bloque -> { cuerpo } .)
    FLOAT           reduce using rule 14 (bloque -> { cuerpo } .)
    CHAR            reduce using rule 14 (bloque -> { cuerpo } .)
    }               reduce using rule 14 (bloque -> { cuerpo } .)


state 58

    (51) asignacion -> vars .

    IF              reduce using rule 51 (asignacion -> vars .)
    WRITE           reduce using rule 51 (asignacion -> vars .)
    WHILE           reduce using rule 51 (asignacion -> vars .)
    RETURN          reduce using rule 51 (asignacion -> vars .)
    FOR             reduce using rule 51 (asignacion -> vars .)
    FACT            reduce using rule 51 (asignacion -> vars .)
    FIBONACCI       reduce using rule 51 (asignacion -> vars .)
    CUADRATICA      reduce using rule 51 (asignacion -> vars .)
    RAIZ            reduce using rule 51 (asignacion -> vars .)
    ID              reduce using rule 51 (asignacion -> vars .)
    INT             reduce using rule 51 (asignacion -> vars .)
    FLOAT           reduce using rule 51 (asignacion -> vars .)
    CHAR            reduce using rule 51 (asignacion -> vars .)
    }               reduce using rule 51 (asignacion -> vars .)


state 59

    (15) cuerpo -> vars estatutop .

    }               reduce using rule 15 (cuerpo -> vars estatutop .)


state 60

    (16) estatutop -> estatuto . estatutop
    (16) estatutop -> . estatuto estatutop
    (17) estatutop -> . empty
    (18) estatuto -> . asignacion
    (19) estatuto -> . condicion
    (20) estatuto -> . write
    (21) estatuto -> . while
    (22) estatuto -> . return
    (23) estatuto -> . for
    (24) estatuto -> . fact
    (25) estatuto -> . fibonacci
    (26) estatuto -> . cuadratica
    (27) estatuto -> . raiz
    (28) estatuto -> . id ;
    (29) estatuto -> . empty
    (114) empty -> .
    (51) asignacion -> . vars
    (52) asignacion -> . id asignacionp
    (31) condicion -> . IF ( superexpresion ) condicionAux bloque condicionelse
    (36) write -> . WRITE ( writep ) ;
    (48) while -> . WHILE whileAux ( superexpresion ) whileAux2 bloque
    (30) return -> . RETURN superexpresion ;
    (44) for -> . FOR ( id = superexpresion forAux ; superexpresion forAux2 ) bloque forAux3
    (110) fact -> . FACT ( CTEI ) ;
    (112) fibonacci -> . FIBONACCI ( CTEI ) ;
    (111) cuadratica -> . CUADRATICA ( CTEI , CTEI , CTEI ) ;
    (113) raiz -> . RAIZ ( CTEI ) ;
    (102) id -> . ID idp
    (90) vars -> . varsp
    (91) varsp -> . tipo varspp ; varsp
    (92) varsp -> . empty
    (99) tipo -> . INT
    (100) tipo -> . FLOAT
    (101) tipo -> . CHAR

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for FACT resolved as shift
  ! shift/reduce conflict for FIBONACCI resolved as shift
  ! shift/reduce conflict for CUADRATICA resolved as shift
  ! shift/reduce conflict for RAIZ resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
    }               reduce using rule 114 (empty -> .)
    IF              shift and go to state 73
    WRITE           shift and go to state 74
    WHILE           shift and go to state 75
    RETURN          shift and go to state 76
    FOR             shift and go to state 77
    FACT            shift and go to state 78
    FIBONACCI       shift and go to state 79
    CUADRATICA      shift and go to state 80
    RAIZ            shift and go to state 81
    ID              shift and go to state 82
    INT             shift and go to state 9
    FLOAT           shift and go to state 10
    CHAR            shift and go to state 11

  ! IF              [ reduce using rule 114 (empty -> .) ]
  ! WRITE           [ reduce using rule 114 (empty -> .) ]
  ! WHILE           [ reduce using rule 114 (empty -> .) ]
  ! RETURN          [ reduce using rule 114 (empty -> .) ]
  ! FOR             [ reduce using rule 114 (empty -> .) ]
  ! FACT            [ reduce using rule 114 (empty -> .) ]
  ! FIBONACCI       [ reduce using rule 114 (empty -> .) ]
  ! CUADRATICA      [ reduce using rule 114 (empty -> .) ]
  ! RAIZ            [ reduce using rule 114 (empty -> .) ]
  ! ID              [ reduce using rule 114 (empty -> .) ]
  ! INT             [ reduce using rule 114 (empty -> .) ]
  ! FLOAT           [ reduce using rule 114 (empty -> .) ]
  ! CHAR            [ reduce using rule 114 (empty -> .) ]

    estatuto                       shift and go to state 60
    estatutop                      shift and go to state 85
    empty                          shift and go to state 61
    asignacion                     shift and go to state 62
    condicion                      shift and go to state 63
    write                          shift and go to state 64
    while                          shift and go to state 65
    return                         shift and go to state 66
    for                            shift and go to state 67
    fact                           shift and go to state 68
    fibonacci                      shift and go to state 69
    cuadratica                     shift and go to state 70
    raiz                           shift and go to state 71
    id                             shift and go to state 72
    vars                           shift and go to state 58
    varsp                          shift and go to state 6
    tipo                           shift and go to state 7

state 61

    (17) estatutop -> empty .
    (29) estatuto -> empty .
    (92) varsp -> empty .

  ! reduce/reduce conflict for } resolved using rule 17 (estatutop -> empty .)
  ! reduce/reduce conflict for IF resolved using rule 29 (estatuto -> empty .)
  ! reduce/reduce conflict for WRITE resolved using rule 29 (estatuto -> empty .)
  ! reduce/reduce conflict for WHILE resolved using rule 29 (estatuto -> empty .)
  ! reduce/reduce conflict for RETURN resolved using rule 29 (estatuto -> empty .)
  ! reduce/reduce conflict for FOR resolved using rule 29 (estatuto -> empty .)
  ! reduce/reduce conflict for FACT resolved using rule 29 (estatuto -> empty .)
  ! reduce/reduce conflict for FIBONACCI resolved using rule 29 (estatuto -> empty .)
  ! reduce/reduce conflict for CUADRATICA resolved using rule 29 (estatuto -> empty .)
  ! reduce/reduce conflict for RAIZ resolved using rule 29 (estatuto -> empty .)
  ! reduce/reduce conflict for ID resolved using rule 29 (estatuto -> empty .)
  ! reduce/reduce conflict for INT resolved using rule 29 (estatuto -> empty .)
  ! reduce/reduce conflict for FLOAT resolved using rule 29 (estatuto -> empty .)
  ! reduce/reduce conflict for CHAR resolved using rule 29 (estatuto -> empty .)
  ! reduce/reduce conflict for } resolved using rule 17 (estatutop -> empty .)
    }               reduce using rule 17 (estatutop -> empty .)
    IF              reduce using rule 29 (estatuto -> empty .)
    WRITE           reduce using rule 29 (estatuto -> empty .)
    WHILE           reduce using rule 29 (estatuto -> empty .)
    RETURN          reduce using rule 29 (estatuto -> empty .)
    FOR             reduce using rule 29 (estatuto -> empty .)
    FACT            reduce using rule 29 (estatuto -> empty .)
    FIBONACCI       reduce using rule 29 (estatuto -> empty .)
    CUADRATICA      reduce using rule 29 (estatuto -> empty .)
    RAIZ            reduce using rule 29 (estatuto -> empty .)
    ID              reduce using rule 29 (estatuto -> empty .)
    INT             reduce using rule 29 (estatuto -> empty .)
    FLOAT           reduce using rule 29 (estatuto -> empty .)
    CHAR            reduce using rule 29 (estatuto -> empty .)

  ! }               [ reduce using rule 29 (estatuto -> empty .) ]
  ! IF              [ reduce using rule 92 (varsp -> empty .) ]
  ! WRITE           [ reduce using rule 92 (varsp -> empty .) ]
  ! WHILE           [ reduce using rule 92 (varsp -> empty .) ]
  ! RETURN          [ reduce using rule 92 (varsp -> empty .) ]
  ! FOR             [ reduce using rule 92 (varsp -> empty .) ]
  ! FACT            [ reduce using rule 92 (varsp -> empty .) ]
  ! FIBONACCI       [ reduce using rule 92 (varsp -> empty .) ]
  ! CUADRATICA      [ reduce using rule 92 (varsp -> empty .) ]
  ! RAIZ            [ reduce using rule 92 (varsp -> empty .) ]
  ! ID              [ reduce using rule 92 (varsp -> empty .) ]
  ! INT             [ reduce using rule 92 (varsp -> empty .) ]
  ! FLOAT           [ reduce using rule 92 (varsp -> empty .) ]
  ! CHAR            [ reduce using rule 92 (varsp -> empty .) ]
  ! }               [ reduce using rule 92 (varsp -> empty .) ]


state 62

    (18) estatuto -> asignacion .

    IF              reduce using rule 18 (estatuto -> asignacion .)
    WRITE           reduce using rule 18 (estatuto -> asignacion .)
    WHILE           reduce using rule 18 (estatuto -> asignacion .)
    RETURN          reduce using rule 18 (estatuto -> asignacion .)
    FOR             reduce using rule 18 (estatuto -> asignacion .)
    FACT            reduce using rule 18 (estatuto -> asignacion .)
    FIBONACCI       reduce using rule 18 (estatuto -> asignacion .)
    CUADRATICA      reduce using rule 18 (estatuto -> asignacion .)
    RAIZ            reduce using rule 18 (estatuto -> asignacion .)
    ID              reduce using rule 18 (estatuto -> asignacion .)
    INT             reduce using rule 18 (estatuto -> asignacion .)
    FLOAT           reduce using rule 18 (estatuto -> asignacion .)
    CHAR            reduce using rule 18 (estatuto -> asignacion .)
    }               reduce using rule 18 (estatuto -> asignacion .)


state 63

    (19) estatuto -> condicion .

    IF              reduce using rule 19 (estatuto -> condicion .)
    WRITE           reduce using rule 19 (estatuto -> condicion .)
    WHILE           reduce using rule 19 (estatuto -> condicion .)
    RETURN          reduce using rule 19 (estatuto -> condicion .)
    FOR             reduce using rule 19 (estatuto -> condicion .)
    FACT            reduce using rule 19 (estatuto -> condicion .)
    FIBONACCI       reduce using rule 19 (estatuto -> condicion .)
    CUADRATICA      reduce using rule 19 (estatuto -> condicion .)
    RAIZ            reduce using rule 19 (estatuto -> condicion .)
    ID              reduce using rule 19 (estatuto -> condicion .)
    INT             reduce using rule 19 (estatuto -> condicion .)
    FLOAT           reduce using rule 19 (estatuto -> condicion .)
    CHAR            reduce using rule 19 (estatuto -> condicion .)
    }               reduce using rule 19 (estatuto -> condicion .)


state 64

    (20) estatuto -> write .

    IF              reduce using rule 20 (estatuto -> write .)
    WRITE           reduce using rule 20 (estatuto -> write .)
    WHILE           reduce using rule 20 (estatuto -> write .)
    RETURN          reduce using rule 20 (estatuto -> write .)
    FOR             reduce using rule 20 (estatuto -> write .)
    FACT            reduce using rule 20 (estatuto -> write .)
    FIBONACCI       reduce using rule 20 (estatuto -> write .)
    CUADRATICA      reduce using rule 20 (estatuto -> write .)
    RAIZ            reduce using rule 20 (estatuto -> write .)
    ID              reduce using rule 20 (estatuto -> write .)
    INT             reduce using rule 20 (estatuto -> write .)
    FLOAT           reduce using rule 20 (estatuto -> write .)
    CHAR            reduce using rule 20 (estatuto -> write .)
    }               reduce using rule 20 (estatuto -> write .)


state 65

    (21) estatuto -> while .

    IF              reduce using rule 21 (estatuto -> while .)
    WRITE           reduce using rule 21 (estatuto -> while .)
    WHILE           reduce using rule 21 (estatuto -> while .)
    RETURN          reduce using rule 21 (estatuto -> while .)
    FOR             reduce using rule 21 (estatuto -> while .)
    FACT            reduce using rule 21 (estatuto -> while .)
    FIBONACCI       reduce using rule 21 (estatuto -> while .)
    CUADRATICA      reduce using rule 21 (estatuto -> while .)
    RAIZ            reduce using rule 21 (estatuto -> while .)
    ID              reduce using rule 21 (estatuto -> while .)
    INT             reduce using rule 21 (estatuto -> while .)
    FLOAT           reduce using rule 21 (estatuto -> while .)
    CHAR            reduce using rule 21 (estatuto -> while .)
    }               reduce using rule 21 (estatuto -> while .)


state 66

    (22) estatuto -> return .

    IF              reduce using rule 22 (estatuto -> return .)
    WRITE           reduce using rule 22 (estatuto -> return .)
    WHILE           reduce using rule 22 (estatuto -> return .)
    RETURN          reduce using rule 22 (estatuto -> return .)
    FOR             reduce using rule 22 (estatuto -> return .)
    FACT            reduce using rule 22 (estatuto -> return .)
    FIBONACCI       reduce using rule 22 (estatuto -> return .)
    CUADRATICA      reduce using rule 22 (estatuto -> return .)
    RAIZ            reduce using rule 22 (estatuto -> return .)
    ID              reduce using rule 22 (estatuto -> return .)
    INT             reduce using rule 22 (estatuto -> return .)
    FLOAT           reduce using rule 22 (estatuto -> return .)
    CHAR            reduce using rule 22 (estatuto -> return .)
    }               reduce using rule 22 (estatuto -> return .)


state 67

    (23) estatuto -> for .

    IF              reduce using rule 23 (estatuto -> for .)
    WRITE           reduce using rule 23 (estatuto -> for .)
    WHILE           reduce using rule 23 (estatuto -> for .)
    RETURN          reduce using rule 23 (estatuto -> for .)
    FOR             reduce using rule 23 (estatuto -> for .)
    FACT            reduce using rule 23 (estatuto -> for .)
    FIBONACCI       reduce using rule 23 (estatuto -> for .)
    CUADRATICA      reduce using rule 23 (estatuto -> for .)
    RAIZ            reduce using rule 23 (estatuto -> for .)
    ID              reduce using rule 23 (estatuto -> for .)
    INT             reduce using rule 23 (estatuto -> for .)
    FLOAT           reduce using rule 23 (estatuto -> for .)
    CHAR            reduce using rule 23 (estatuto -> for .)
    }               reduce using rule 23 (estatuto -> for .)


state 68

    (24) estatuto -> fact .

    IF              reduce using rule 24 (estatuto -> fact .)
    WRITE           reduce using rule 24 (estatuto -> fact .)
    WHILE           reduce using rule 24 (estatuto -> fact .)
    RETURN          reduce using rule 24 (estatuto -> fact .)
    FOR             reduce using rule 24 (estatuto -> fact .)
    FACT            reduce using rule 24 (estatuto -> fact .)
    FIBONACCI       reduce using rule 24 (estatuto -> fact .)
    CUADRATICA      reduce using rule 24 (estatuto -> fact .)
    RAIZ            reduce using rule 24 (estatuto -> fact .)
    ID              reduce using rule 24 (estatuto -> fact .)
    INT             reduce using rule 24 (estatuto -> fact .)
    FLOAT           reduce using rule 24 (estatuto -> fact .)
    CHAR            reduce using rule 24 (estatuto -> fact .)
    }               reduce using rule 24 (estatuto -> fact .)


state 69

    (25) estatuto -> fibonacci .

    IF              reduce using rule 25 (estatuto -> fibonacci .)
    WRITE           reduce using rule 25 (estatuto -> fibonacci .)
    WHILE           reduce using rule 25 (estatuto -> fibonacci .)
    RETURN          reduce using rule 25 (estatuto -> fibonacci .)
    FOR             reduce using rule 25 (estatuto -> fibonacci .)
    FACT            reduce using rule 25 (estatuto -> fibonacci .)
    FIBONACCI       reduce using rule 25 (estatuto -> fibonacci .)
    CUADRATICA      reduce using rule 25 (estatuto -> fibonacci .)
    RAIZ            reduce using rule 25 (estatuto -> fibonacci .)
    ID              reduce using rule 25 (estatuto -> fibonacci .)
    INT             reduce using rule 25 (estatuto -> fibonacci .)
    FLOAT           reduce using rule 25 (estatuto -> fibonacci .)
    CHAR            reduce using rule 25 (estatuto -> fibonacci .)
    }               reduce using rule 25 (estatuto -> fibonacci .)


state 70

    (26) estatuto -> cuadratica .

    IF              reduce using rule 26 (estatuto -> cuadratica .)
    WRITE           reduce using rule 26 (estatuto -> cuadratica .)
    WHILE           reduce using rule 26 (estatuto -> cuadratica .)
    RETURN          reduce using rule 26 (estatuto -> cuadratica .)
    FOR             reduce using rule 26 (estatuto -> cuadratica .)
    FACT            reduce using rule 26 (estatuto -> cuadratica .)
    FIBONACCI       reduce using rule 26 (estatuto -> cuadratica .)
    CUADRATICA      reduce using rule 26 (estatuto -> cuadratica .)
    RAIZ            reduce using rule 26 (estatuto -> cuadratica .)
    ID              reduce using rule 26 (estatuto -> cuadratica .)
    INT             reduce using rule 26 (estatuto -> cuadratica .)
    FLOAT           reduce using rule 26 (estatuto -> cuadratica .)
    CHAR            reduce using rule 26 (estatuto -> cuadratica .)
    }               reduce using rule 26 (estatuto -> cuadratica .)


state 71

    (27) estatuto -> raiz .

    IF              reduce using rule 27 (estatuto -> raiz .)
    WRITE           reduce using rule 27 (estatuto -> raiz .)
    WHILE           reduce using rule 27 (estatuto -> raiz .)
    RETURN          reduce using rule 27 (estatuto -> raiz .)
    FOR             reduce using rule 27 (estatuto -> raiz .)
    FACT            reduce using rule 27 (estatuto -> raiz .)
    FIBONACCI       reduce using rule 27 (estatuto -> raiz .)
    CUADRATICA      reduce using rule 27 (estatuto -> raiz .)
    RAIZ            reduce using rule 27 (estatuto -> raiz .)
    ID              reduce using rule 27 (estatuto -> raiz .)
    INT             reduce using rule 27 (estatuto -> raiz .)
    FLOAT           reduce using rule 27 (estatuto -> raiz .)
    CHAR            reduce using rule 27 (estatuto -> raiz .)
    }               reduce using rule 27 (estatuto -> raiz .)


state 72

    (28) estatuto -> id . ;
    (52) asignacion -> id . asignacionp
    (53) asignacionp -> . = superexpresion ;

    ;               shift and go to state 86
    =               shift and go to state 88

    asignacionp                    shift and go to state 87

state 73

    (31) condicion -> IF . ( superexpresion ) condicionAux bloque condicionelse

    (               shift and go to state 89


state 74

    (36) write -> WRITE . ( writep ) ;

    (               shift and go to state 90


state 75

    (48) while -> WHILE . whileAux ( superexpresion ) whileAux2 bloque
    (49) whileAux -> .

    (               reduce using rule 49 (whileAux -> .)

    whileAux                       shift and go to state 91

state 76

    (30) return -> RETURN . superexpresion ;
    (54) superexpresion -> . megaexpresion superexpresionp
    (58) megaexpresion -> . exp megaexpresionp
    (66) exp -> . termino expp
    (71) termino -> . factor terminop
    (76) factor -> . constante
    (77) factor -> . lParen superexpresion rParen
    (80) constante -> . id
    (81) constante -> . CTEF ctef
    (82) constante -> . CTEI ctei
    (78) lParen -> . (
    (102) id -> . ID idp

    CTEF            shift and go to state 100
    CTEI            shift and go to state 101
    (               shift and go to state 102
    ID              shift and go to state 82

    superexpresion                 shift and go to state 92
    megaexpresion                  shift and go to state 93
    exp                            shift and go to state 94
    termino                        shift and go to state 95
    factor                         shift and go to state 96
    constante                      shift and go to state 97
    lParen                         shift and go to state 98
    id                             shift and go to state 99

state 77

    (44) for -> FOR . ( id = superexpresion forAux ; superexpresion forAux2 ) bloque forAux3

    (               shift and go to state 103


state 78

    (110) fact -> FACT . ( CTEI ) ;

    (               shift and go to state 104


state 79

    (112) fibonacci -> FIBONACCI . ( CTEI ) ;

    (               shift and go to state 105


state 80

    (111) cuadratica -> CUADRATICA . ( CTEI , CTEI , CTEI ) ;

    (               shift and go to state 106


state 81

    (113) raiz -> RAIZ . ( CTEI ) ;

    (               shift and go to state 107


state 82

    (102) id -> ID . idp
    (103) idp -> . ( idpp )
    (104) idp -> . [ superexpresion ]
    (105) idp -> . empty
    (114) empty -> .

    (               shift and go to state 109
    [               shift and go to state 110
    ;               reduce using rule 114 (empty -> .)
    =               reduce using rule 114 (empty -> .)
    *               reduce using rule 114 (empty -> .)
    /               reduce using rule 114 (empty -> .)
    +               reduce using rule 114 (empty -> .)
    -               reduce using rule 114 (empty -> .)
    <               reduce using rule 114 (empty -> .)
    >               reduce using rule 114 (empty -> .)
    EQUALS          reduce using rule 114 (empty -> .)
    DIFF            reduce using rule 114 (empty -> .)
    LTHANEQ         reduce using rule 114 (empty -> .)
    GTHANEQ         reduce using rule 114 (empty -> .)
    AND             reduce using rule 114 (empty -> .)
    OR              reduce using rule 114 (empty -> .)
    )               reduce using rule 114 (empty -> .)
    ,               reduce using rule 114 (empty -> .)
    ]               reduce using rule 114 (empty -> .)

    idp                            shift and go to state 108
    empty                          shift and go to state 111

state 83

    (7) function -> FUNCTION tipoRetorno ID ( functionParam ) functionAux bloque . functionAux2
    (10) functionAux2 -> .

    FUNCTION        reduce using rule 10 (functionAux2 -> .)
    MAIN            reduce using rule 10 (functionAux2 -> .)

    functionAux2                   shift and go to state 112

state 84

    (88) parametrop -> , parametro .

    )               reduce using rule 88 (parametrop -> , parametro .)


state 85

    (16) estatutop -> estatuto estatutop .

    }               reduce using rule 16 (estatutop -> estatuto estatutop .)


state 86

    (28) estatuto -> id ; .

    IF              reduce using rule 28 (estatuto -> id ; .)
    WRITE           reduce using rule 28 (estatuto -> id ; .)
    WHILE           reduce using rule 28 (estatuto -> id ; .)
    RETURN          reduce using rule 28 (estatuto -> id ; .)
    FOR             reduce using rule 28 (estatuto -> id ; .)
    FACT            reduce using rule 28 (estatuto -> id ; .)
    FIBONACCI       reduce using rule 28 (estatuto -> id ; .)
    CUADRATICA      reduce using rule 28 (estatuto -> id ; .)
    RAIZ            reduce using rule 28 (estatuto -> id ; .)
    ID              reduce using rule 28 (estatuto -> id ; .)
    INT             reduce using rule 28 (estatuto -> id ; .)
    FLOAT           reduce using rule 28 (estatuto -> id ; .)
    CHAR            reduce using rule 28 (estatuto -> id ; .)
    }               reduce using rule 28 (estatuto -> id ; .)


state 87

    (52) asignacion -> id asignacionp .

    IF              reduce using rule 52 (asignacion -> id asignacionp .)
    WRITE           reduce using rule 52 (asignacion -> id asignacionp .)
    WHILE           reduce using rule 52 (asignacion -> id asignacionp .)
    RETURN          reduce using rule 52 (asignacion -> id asignacionp .)
    FOR             reduce using rule 52 (asignacion -> id asignacionp .)
    FACT            reduce using rule 52 (asignacion -> id asignacionp .)
    FIBONACCI       reduce using rule 52 (asignacion -> id asignacionp .)
    CUADRATICA      reduce using rule 52 (asignacion -> id asignacionp .)
    RAIZ            reduce using rule 52 (asignacion -> id asignacionp .)
    ID              reduce using rule 52 (asignacion -> id asignacionp .)
    INT             reduce using rule 52 (asignacion -> id asignacionp .)
    FLOAT           reduce using rule 52 (asignacion -> id asignacionp .)
    CHAR            reduce using rule 52 (asignacion -> id asignacionp .)
    }               reduce using rule 52 (asignacion -> id asignacionp .)


state 88

    (53) asignacionp -> = . superexpresion ;
    (54) superexpresion -> . megaexpresion superexpresionp
    (58) megaexpresion -> . exp megaexpresionp
    (66) exp -> . termino expp
    (71) termino -> . factor terminop
    (76) factor -> . constante
    (77) factor -> . lParen superexpresion rParen
    (80) constante -> . id
    (81) constante -> . CTEF ctef
    (82) constante -> . CTEI ctei
    (78) lParen -> . (
    (102) id -> . ID idp

    CTEF            shift and go to state 100
    CTEI            shift and go to state 101
    (               shift and go to state 102
    ID              shift and go to state 82

    superexpresion                 shift and go to state 113
    megaexpresion                  shift and go to state 93
    exp                            shift and go to state 94
    termino                        shift and go to state 95
    factor                         shift and go to state 96
    constante                      shift and go to state 97
    lParen                         shift and go to state 98
    id                             shift and go to state 99

state 89

    (31) condicion -> IF ( . superexpresion ) condicionAux bloque condicionelse
    (54) superexpresion -> . megaexpresion superexpresionp
    (58) megaexpresion -> . exp megaexpresionp
    (66) exp -> . termino expp
    (71) termino -> . factor terminop
    (76) factor -> . constante
    (77) factor -> . lParen superexpresion rParen
    (80) constante -> . id
    (81) constante -> . CTEF ctef
    (82) constante -> . CTEI ctei
    (78) lParen -> . (
    (102) id -> . ID idp

    CTEF            shift and go to state 100
    CTEI            shift and go to state 101
    (               shift and go to state 102
    ID              shift and go to state 82

    superexpresion                 shift and go to state 114
    megaexpresion                  shift and go to state 93
    exp                            shift and go to state 94
    termino                        shift and go to state 95
    factor                         shift and go to state 96
    constante                      shift and go to state 97
    lParen                         shift and go to state 98
    id                             shift and go to state 99

state 90

    (36) write -> WRITE ( . writep ) ;
    (37) writep -> . superexpresion writepAux writepp
    (38) writep -> . LETRERO writepAux2 writepp
    (54) superexpresion -> . megaexpresion superexpresionp
    (58) megaexpresion -> . exp megaexpresionp
    (66) exp -> . termino expp
    (71) termino -> . factor terminop
    (76) factor -> . constante
    (77) factor -> . lParen superexpresion rParen
    (80) constante -> . id
    (81) constante -> . CTEF ctef
    (82) constante -> . CTEI ctei
    (78) lParen -> . (
    (102) id -> . ID idp

    LETRERO         shift and go to state 117
    CTEF            shift and go to state 100
    CTEI            shift and go to state 101
    (               shift and go to state 102
    ID              shift and go to state 82

    writep                         shift and go to state 115
    superexpresion                 shift and go to state 116
    megaexpresion                  shift and go to state 93
    exp                            shift and go to state 94
    termino                        shift and go to state 95
    factor                         shift and go to state 96
    constante                      shift and go to state 97
    lParen                         shift and go to state 98
    id                             shift and go to state 99

state 91

    (48) while -> WHILE whileAux . ( superexpresion ) whileAux2 bloque

    (               shift and go to state 118


state 92

    (30) return -> RETURN superexpresion . ;

    ;               shift and go to state 119


state 93

    (54) superexpresion -> megaexpresion . superexpresionp
    (55) superexpresionp -> . AND superexpresion
    (56) superexpresionp -> . OR superexpresion
    (57) superexpresionp -> . empty
    (114) empty -> .

    AND             shift and go to state 121
    OR              shift and go to state 122
    ;               reduce using rule 114 (empty -> .)
    )               reduce using rule 114 (empty -> .)
    ,               reduce using rule 114 (empty -> .)
    ]               reduce using rule 114 (empty -> .)

    superexpresionp                shift and go to state 120
    empty                          shift and go to state 123

state 94

    (58) megaexpresion -> exp . megaexpresionp
    (59) megaexpresionp -> . < exp
    (60) megaexpresionp -> . > exp
    (61) megaexpresionp -> . EQUALS exp
    (62) megaexpresionp -> . DIFF exp
    (63) megaexpresionp -> . LTHANEQ exp
    (64) megaexpresionp -> . GTHANEQ exp
    (65) megaexpresionp -> . empty
    (114) empty -> .

    <               shift and go to state 125
    >               shift and go to state 126
    EQUALS          shift and go to state 127
    DIFF            shift and go to state 128
    LTHANEQ         shift and go to state 129
    GTHANEQ         shift and go to state 130
    AND             reduce using rule 114 (empty -> .)
    OR              reduce using rule 114 (empty -> .)
    ;               reduce using rule 114 (empty -> .)
    )               reduce using rule 114 (empty -> .)
    ,               reduce using rule 114 (empty -> .)
    ]               reduce using rule 114 (empty -> .)

    megaexpresionp                 shift and go to state 124
    empty                          shift and go to state 131

state 95

    (66) exp -> termino . expp
    (67) expp -> . + pAppT exp
    (68) expp -> . - pAppT exp
    (69) expp -> . empty
    (114) empty -> .

    +               shift and go to state 133
    -               shift and go to state 134
    <               reduce using rule 114 (empty -> .)
    >               reduce using rule 114 (empty -> .)
    EQUALS          reduce using rule 114 (empty -> .)
    DIFF            reduce using rule 114 (empty -> .)
    LTHANEQ         reduce using rule 114 (empty -> .)
    GTHANEQ         reduce using rule 114 (empty -> .)
    AND             reduce using rule 114 (empty -> .)
    OR              reduce using rule 114 (empty -> .)
    ;               reduce using rule 114 (empty -> .)
    )               reduce using rule 114 (empty -> .)
    ,               reduce using rule 114 (empty -> .)
    ]               reduce using rule 114 (empty -> .)

    expp                           shift and go to state 132
    empty                          shift and go to state 135

state 96

    (71) termino -> factor . terminop
    (72) terminop -> . * pAppF termino
    (73) terminop -> . / pAppF termino
    (74) terminop -> . empty
    (114) empty -> .

    *               shift and go to state 137
    /               shift and go to state 138
    +               reduce using rule 114 (empty -> .)
    -               reduce using rule 114 (empty -> .)
    <               reduce using rule 114 (empty -> .)
    >               reduce using rule 114 (empty -> .)
    EQUALS          reduce using rule 114 (empty -> .)
    DIFF            reduce using rule 114 (empty -> .)
    LTHANEQ         reduce using rule 114 (empty -> .)
    GTHANEQ         reduce using rule 114 (empty -> .)
    AND             reduce using rule 114 (empty -> .)
    OR              reduce using rule 114 (empty -> .)
    ;               reduce using rule 114 (empty -> .)
    )               reduce using rule 114 (empty -> .)
    ,               reduce using rule 114 (empty -> .)
    ]               reduce using rule 114 (empty -> .)

    terminop                       shift and go to state 136
    empty                          shift and go to state 139

state 97

    (76) factor -> constante .

    *               reduce using rule 76 (factor -> constante .)
    /               reduce using rule 76 (factor -> constante .)
    +               reduce using rule 76 (factor -> constante .)
    -               reduce using rule 76 (factor -> constante .)
    <               reduce using rule 76 (factor -> constante .)
    >               reduce using rule 76 (factor -> constante .)
    EQUALS          reduce using rule 76 (factor -> constante .)
    DIFF            reduce using rule 76 (factor -> constante .)
    LTHANEQ         reduce using rule 76 (factor -> constante .)
    GTHANEQ         reduce using rule 76 (factor -> constante .)
    AND             reduce using rule 76 (factor -> constante .)
    OR              reduce using rule 76 (factor -> constante .)
    ;               reduce using rule 76 (factor -> constante .)
    )               reduce using rule 76 (factor -> constante .)
    ,               reduce using rule 76 (factor -> constante .)
    ]               reduce using rule 76 (factor -> constante .)


state 98

    (77) factor -> lParen . superexpresion rParen
    (54) superexpresion -> . megaexpresion superexpresionp
    (58) megaexpresion -> . exp megaexpresionp
    (66) exp -> . termino expp
    (71) termino -> . factor terminop
    (76) factor -> . constante
    (77) factor -> . lParen superexpresion rParen
    (80) constante -> . id
    (81) constante -> . CTEF ctef
    (82) constante -> . CTEI ctei
    (78) lParen -> . (
    (102) id -> . ID idp

    CTEF            shift and go to state 100
    CTEI            shift and go to state 101
    (               shift and go to state 102
    ID              shift and go to state 82

    lParen                         shift and go to state 98
    superexpresion                 shift and go to state 140
    megaexpresion                  shift and go to state 93
    exp                            shift and go to state 94
    termino                        shift and go to state 95
    factor                         shift and go to state 96
    constante                      shift and go to state 97
    id                             shift and go to state 99

state 99

    (80) constante -> id .

    *               reduce using rule 80 (constante -> id .)
    /               reduce using rule 80 (constante -> id .)
    +               reduce using rule 80 (constante -> id .)
    -               reduce using rule 80 (constante -> id .)
    <               reduce using rule 80 (constante -> id .)
    >               reduce using rule 80 (constante -> id .)
    EQUALS          reduce using rule 80 (constante -> id .)
    DIFF            reduce using rule 80 (constante -> id .)
    LTHANEQ         reduce using rule 80 (constante -> id .)
    GTHANEQ         reduce using rule 80 (constante -> id .)
    AND             reduce using rule 80 (constante -> id .)
    OR              reduce using rule 80 (constante -> id .)
    ;               reduce using rule 80 (constante -> id .)
    )               reduce using rule 80 (constante -> id .)
    ,               reduce using rule 80 (constante -> id .)
    ]               reduce using rule 80 (constante -> id .)


state 100

    (81) constante -> CTEF . ctef
    (83) ctef -> .

    *               reduce using rule 83 (ctef -> .)
    /               reduce using rule 83 (ctef -> .)
    +               reduce using rule 83 (ctef -> .)
    -               reduce using rule 83 (ctef -> .)
    <               reduce using rule 83 (ctef -> .)
    >               reduce using rule 83 (ctef -> .)
    EQUALS          reduce using rule 83 (ctef -> .)
    DIFF            reduce using rule 83 (ctef -> .)
    LTHANEQ         reduce using rule 83 (ctef -> .)
    GTHANEQ         reduce using rule 83 (ctef -> .)
    AND             reduce using rule 83 (ctef -> .)
    OR              reduce using rule 83 (ctef -> .)
    ;               reduce using rule 83 (ctef -> .)
    )               reduce using rule 83 (ctef -> .)
    ,               reduce using rule 83 (ctef -> .)
    ]               reduce using rule 83 (ctef -> .)

    ctef                           shift and go to state 141

state 101

    (82) constante -> CTEI . ctei
    (84) ctei -> .

    *               reduce using rule 84 (ctei -> .)
    /               reduce using rule 84 (ctei -> .)
    +               reduce using rule 84 (ctei -> .)
    -               reduce using rule 84 (ctei -> .)
    <               reduce using rule 84 (ctei -> .)
    >               reduce using rule 84 (ctei -> .)
    EQUALS          reduce using rule 84 (ctei -> .)
    DIFF            reduce using rule 84 (ctei -> .)
    LTHANEQ         reduce using rule 84 (ctei -> .)
    GTHANEQ         reduce using rule 84 (ctei -> .)
    AND             reduce using rule 84 (ctei -> .)
    OR              reduce using rule 84 (ctei -> .)
    ;               reduce using rule 84 (ctei -> .)
    )               reduce using rule 84 (ctei -> .)
    ,               reduce using rule 84 (ctei -> .)
    ]               reduce using rule 84 (ctei -> .)

    ctei                           shift and go to state 142

state 102

    (78) lParen -> ( .

    CTEF            reduce using rule 78 (lParen -> ( .)
    CTEI            reduce using rule 78 (lParen -> ( .)
    (               reduce using rule 78 (lParen -> ( .)
    ID              reduce using rule 78 (lParen -> ( .)


state 103

    (44) for -> FOR ( . id = superexpresion forAux ; superexpresion forAux2 ) bloque forAux3
    (102) id -> . ID idp

    ID              shift and go to state 82

    id                             shift and go to state 143

state 104

    (110) fact -> FACT ( . CTEI ) ;

    CTEI            shift and go to state 144


state 105

    (112) fibonacci -> FIBONACCI ( . CTEI ) ;

    CTEI            shift and go to state 145


state 106

    (111) cuadratica -> CUADRATICA ( . CTEI , CTEI , CTEI ) ;

    CTEI            shift and go to state 146


state 107

    (113) raiz -> RAIZ ( . CTEI ) ;

    CTEI            shift and go to state 147


state 108

    (102) id -> ID idp .

    ;               reduce using rule 102 (id -> ID idp .)
    =               reduce using rule 102 (id -> ID idp .)
    *               reduce using rule 102 (id -> ID idp .)
    /               reduce using rule 102 (id -> ID idp .)
    +               reduce using rule 102 (id -> ID idp .)
    -               reduce using rule 102 (id -> ID idp .)
    <               reduce using rule 102 (id -> ID idp .)
    >               reduce using rule 102 (id -> ID idp .)
    EQUALS          reduce using rule 102 (id -> ID idp .)
    DIFF            reduce using rule 102 (id -> ID idp .)
    LTHANEQ         reduce using rule 102 (id -> ID idp .)
    GTHANEQ         reduce using rule 102 (id -> ID idp .)
    AND             reduce using rule 102 (id -> ID idp .)
    OR              reduce using rule 102 (id -> ID idp .)
    )               reduce using rule 102 (id -> ID idp .)
    ,               reduce using rule 102 (id -> ID idp .)
    ]               reduce using rule 102 (id -> ID idp .)


state 109

    (103) idp -> ( . idpp )
    (106) idpp -> . superexpresion idppp
    (107) idpp -> . empty
    (54) superexpresion -> . megaexpresion superexpresionp
    (114) empty -> .
    (58) megaexpresion -> . exp megaexpresionp
    (66) exp -> . termino expp
    (71) termino -> . factor terminop
    (76) factor -> . constante
    (77) factor -> . lParen superexpresion rParen
    (80) constante -> . id
    (81) constante -> . CTEF ctef
    (82) constante -> . CTEI ctei
    (78) lParen -> . (
    (102) id -> . ID idp

    )               reduce using rule 114 (empty -> .)
    CTEF            shift and go to state 100
    CTEI            shift and go to state 101
    (               shift and go to state 102
    ID              shift and go to state 82

    idpp                           shift and go to state 148
    superexpresion                 shift and go to state 149
    empty                          shift and go to state 150
    megaexpresion                  shift and go to state 93
    exp                            shift and go to state 94
    termino                        shift and go to state 95
    factor                         shift and go to state 96
    constante                      shift and go to state 97
    lParen                         shift and go to state 98
    id                             shift and go to state 99

state 110

    (104) idp -> [ . superexpresion ]
    (54) superexpresion -> . megaexpresion superexpresionp
    (58) megaexpresion -> . exp megaexpresionp
    (66) exp -> . termino expp
    (71) termino -> . factor terminop
    (76) factor -> . constante
    (77) factor -> . lParen superexpresion rParen
    (80) constante -> . id
    (81) constante -> . CTEF ctef
    (82) constante -> . CTEI ctei
    (78) lParen -> . (
    (102) id -> . ID idp

    CTEF            shift and go to state 100
    CTEI            shift and go to state 101
    (               shift and go to state 102
    ID              shift and go to state 82

    superexpresion                 shift and go to state 151
    megaexpresion                  shift and go to state 93
    exp                            shift and go to state 94
    termino                        shift and go to state 95
    factor                         shift and go to state 96
    constante                      shift and go to state 97
    lParen                         shift and go to state 98
    id                             shift and go to state 99

state 111

    (105) idp -> empty .

    ;               reduce using rule 105 (idp -> empty .)
    =               reduce using rule 105 (idp -> empty .)
    *               reduce using rule 105 (idp -> empty .)
    /               reduce using rule 105 (idp -> empty .)
    +               reduce using rule 105 (idp -> empty .)
    -               reduce using rule 105 (idp -> empty .)
    <               reduce using rule 105 (idp -> empty .)
    >               reduce using rule 105 (idp -> empty .)
    EQUALS          reduce using rule 105 (idp -> empty .)
    DIFF            reduce using rule 105 (idp -> empty .)
    LTHANEQ         reduce using rule 105 (idp -> empty .)
    GTHANEQ         reduce using rule 105 (idp -> empty .)
    AND             reduce using rule 105 (idp -> empty .)
    OR              reduce using rule 105 (idp -> empty .)
    )               reduce using rule 105 (idp -> empty .)
    ,               reduce using rule 105 (idp -> empty .)
    ]               reduce using rule 105 (idp -> empty .)


state 112

    (7) function -> FUNCTION tipoRetorno ID ( functionParam ) functionAux bloque functionAux2 .

    FUNCTION        reduce using rule 7 (function -> FUNCTION tipoRetorno ID ( functionParam ) functionAux bloque functionAux2 .)
    MAIN            reduce using rule 7 (function -> FUNCTION tipoRetorno ID ( functionParam ) functionAux bloque functionAux2 .)


state 113

    (53) asignacionp -> = superexpresion . ;

    ;               shift and go to state 152


state 114

    (31) condicion -> IF ( superexpresion . ) condicionAux bloque condicionelse

    )               shift and go to state 153


state 115

    (36) write -> WRITE ( writep . ) ;

    )               shift and go to state 154


state 116

    (37) writep -> superexpresion . writepAux writepp
    (39) writepAux -> .

    ,               reduce using rule 39 (writepAux -> .)
    )               reduce using rule 39 (writepAux -> .)

    writepAux                      shift and go to state 155

state 117

    (38) writep -> LETRERO . writepAux2 writepp
    (40) writepAux2 -> .

    ,               reduce using rule 40 (writepAux2 -> .)
    )               reduce using rule 40 (writepAux2 -> .)

    writepAux2                     shift and go to state 156

state 118

    (48) while -> WHILE whileAux ( . superexpresion ) whileAux2 bloque
    (54) superexpresion -> . megaexpresion superexpresionp
    (58) megaexpresion -> . exp megaexpresionp
    (66) exp -> . termino expp
    (71) termino -> . factor terminop
    (76) factor -> . constante
    (77) factor -> . lParen superexpresion rParen
    (80) constante -> . id
    (81) constante -> . CTEF ctef
    (82) constante -> . CTEI ctei
    (78) lParen -> . (
    (102) id -> . ID idp

    CTEF            shift and go to state 100
    CTEI            shift and go to state 101
    (               shift and go to state 102
    ID              shift and go to state 82

    superexpresion                 shift and go to state 157
    megaexpresion                  shift and go to state 93
    exp                            shift and go to state 94
    termino                        shift and go to state 95
    factor                         shift and go to state 96
    constante                      shift and go to state 97
    lParen                         shift and go to state 98
    id                             shift and go to state 99

state 119

    (30) return -> RETURN superexpresion ; .

    IF              reduce using rule 30 (return -> RETURN superexpresion ; .)
    WRITE           reduce using rule 30 (return -> RETURN superexpresion ; .)
    WHILE           reduce using rule 30 (return -> RETURN superexpresion ; .)
    RETURN          reduce using rule 30 (return -> RETURN superexpresion ; .)
    FOR             reduce using rule 30 (return -> RETURN superexpresion ; .)
    FACT            reduce using rule 30 (return -> RETURN superexpresion ; .)
    FIBONACCI       reduce using rule 30 (return -> RETURN superexpresion ; .)
    CUADRATICA      reduce using rule 30 (return -> RETURN superexpresion ; .)
    RAIZ            reduce using rule 30 (return -> RETURN superexpresion ; .)
    ID              reduce using rule 30 (return -> RETURN superexpresion ; .)
    INT             reduce using rule 30 (return -> RETURN superexpresion ; .)
    FLOAT           reduce using rule 30 (return -> RETURN superexpresion ; .)
    CHAR            reduce using rule 30 (return -> RETURN superexpresion ; .)
    }               reduce using rule 30 (return -> RETURN superexpresion ; .)


state 120

    (54) superexpresion -> megaexpresion superexpresionp .

    ;               reduce using rule 54 (superexpresion -> megaexpresion superexpresionp .)
    )               reduce using rule 54 (superexpresion -> megaexpresion superexpresionp .)
    ,               reduce using rule 54 (superexpresion -> megaexpresion superexpresionp .)
    ]               reduce using rule 54 (superexpresion -> megaexpresion superexpresionp .)


state 121

    (55) superexpresionp -> AND . superexpresion
    (54) superexpresion -> . megaexpresion superexpresionp
    (58) megaexpresion -> . exp megaexpresionp
    (66) exp -> . termino expp
    (71) termino -> . factor terminop
    (76) factor -> . constante
    (77) factor -> . lParen superexpresion rParen
    (80) constante -> . id
    (81) constante -> . CTEF ctef
    (82) constante -> . CTEI ctei
    (78) lParen -> . (
    (102) id -> . ID idp

    CTEF            shift and go to state 100
    CTEI            shift and go to state 101
    (               shift and go to state 102
    ID              shift and go to state 82

    superexpresion                 shift and go to state 158
    megaexpresion                  shift and go to state 93
    exp                            shift and go to state 94
    termino                        shift and go to state 95
    factor                         shift and go to state 96
    constante                      shift and go to state 97
    lParen                         shift and go to state 98
    id                             shift and go to state 99

state 122

    (56) superexpresionp -> OR . superexpresion
    (54) superexpresion -> . megaexpresion superexpresionp
    (58) megaexpresion -> . exp megaexpresionp
    (66) exp -> . termino expp
    (71) termino -> . factor terminop
    (76) factor -> . constante
    (77) factor -> . lParen superexpresion rParen
    (80) constante -> . id
    (81) constante -> . CTEF ctef
    (82) constante -> . CTEI ctei
    (78) lParen -> . (
    (102) id -> . ID idp

    CTEF            shift and go to state 100
    CTEI            shift and go to state 101
    (               shift and go to state 102
    ID              shift and go to state 82

    superexpresion                 shift and go to state 159
    megaexpresion                  shift and go to state 93
    exp                            shift and go to state 94
    termino                        shift and go to state 95
    factor                         shift and go to state 96
    constante                      shift and go to state 97
    lParen                         shift and go to state 98
    id                             shift and go to state 99

state 123

    (57) superexpresionp -> empty .

    ;               reduce using rule 57 (superexpresionp -> empty .)
    )               reduce using rule 57 (superexpresionp -> empty .)
    ,               reduce using rule 57 (superexpresionp -> empty .)
    ]               reduce using rule 57 (superexpresionp -> empty .)


state 124

    (58) megaexpresion -> exp megaexpresionp .

    AND             reduce using rule 58 (megaexpresion -> exp megaexpresionp .)
    OR              reduce using rule 58 (megaexpresion -> exp megaexpresionp .)
    ;               reduce using rule 58 (megaexpresion -> exp megaexpresionp .)
    )               reduce using rule 58 (megaexpresion -> exp megaexpresionp .)
    ,               reduce using rule 58 (megaexpresion -> exp megaexpresionp .)
    ]               reduce using rule 58 (megaexpresion -> exp megaexpresionp .)


state 125

    (59) megaexpresionp -> < . exp
    (66) exp -> . termino expp
    (71) termino -> . factor terminop
    (76) factor -> . constante
    (77) factor -> . lParen superexpresion rParen
    (80) constante -> . id
    (81) constante -> . CTEF ctef
    (82) constante -> . CTEI ctei
    (78) lParen -> . (
    (102) id -> . ID idp

    CTEF            shift and go to state 100
    CTEI            shift and go to state 101
    (               shift and go to state 102
    ID              shift and go to state 82

    exp                            shift and go to state 160
    termino                        shift and go to state 95
    factor                         shift and go to state 96
    constante                      shift and go to state 97
    lParen                         shift and go to state 98
    id                             shift and go to state 99

state 126

    (60) megaexpresionp -> > . exp
    (66) exp -> . termino expp
    (71) termino -> . factor terminop
    (76) factor -> . constante
    (77) factor -> . lParen superexpresion rParen
    (80) constante -> . id
    (81) constante -> . CTEF ctef
    (82) constante -> . CTEI ctei
    (78) lParen -> . (
    (102) id -> . ID idp

    CTEF            shift and go to state 100
    CTEI            shift and go to state 101
    (               shift and go to state 102
    ID              shift and go to state 82

    exp                            shift and go to state 161
    termino                        shift and go to state 95
    factor                         shift and go to state 96
    constante                      shift and go to state 97
    lParen                         shift and go to state 98
    id                             shift and go to state 99

state 127

    (61) megaexpresionp -> EQUALS . exp
    (66) exp -> . termino expp
    (71) termino -> . factor terminop
    (76) factor -> . constante
    (77) factor -> . lParen superexpresion rParen
    (80) constante -> . id
    (81) constante -> . CTEF ctef
    (82) constante -> . CTEI ctei
    (78) lParen -> . (
    (102) id -> . ID idp

    CTEF            shift and go to state 100
    CTEI            shift and go to state 101
    (               shift and go to state 102
    ID              shift and go to state 82

    exp                            shift and go to state 162
    termino                        shift and go to state 95
    factor                         shift and go to state 96
    constante                      shift and go to state 97
    lParen                         shift and go to state 98
    id                             shift and go to state 99

state 128

    (62) megaexpresionp -> DIFF . exp
    (66) exp -> . termino expp
    (71) termino -> . factor terminop
    (76) factor -> . constante
    (77) factor -> . lParen superexpresion rParen
    (80) constante -> . id
    (81) constante -> . CTEF ctef
    (82) constante -> . CTEI ctei
    (78) lParen -> . (
    (102) id -> . ID idp

    CTEF            shift and go to state 100
    CTEI            shift and go to state 101
    (               shift and go to state 102
    ID              shift and go to state 82

    exp                            shift and go to state 163
    termino                        shift and go to state 95
    factor                         shift and go to state 96
    constante                      shift and go to state 97
    lParen                         shift and go to state 98
    id                             shift and go to state 99

state 129

    (63) megaexpresionp -> LTHANEQ . exp
    (66) exp -> . termino expp
    (71) termino -> . factor terminop
    (76) factor -> . constante
    (77) factor -> . lParen superexpresion rParen
    (80) constante -> . id
    (81) constante -> . CTEF ctef
    (82) constante -> . CTEI ctei
    (78) lParen -> . (
    (102) id -> . ID idp

    CTEF            shift and go to state 100
    CTEI            shift and go to state 101
    (               shift and go to state 102
    ID              shift and go to state 82

    exp                            shift and go to state 164
    termino                        shift and go to state 95
    factor                         shift and go to state 96
    constante                      shift and go to state 97
    lParen                         shift and go to state 98
    id                             shift and go to state 99

state 130

    (64) megaexpresionp -> GTHANEQ . exp
    (66) exp -> . termino expp
    (71) termino -> . factor terminop
    (76) factor -> . constante
    (77) factor -> . lParen superexpresion rParen
    (80) constante -> . id
    (81) constante -> . CTEF ctef
    (82) constante -> . CTEI ctei
    (78) lParen -> . (
    (102) id -> . ID idp

    CTEF            shift and go to state 100
    CTEI            shift and go to state 101
    (               shift and go to state 102
    ID              shift and go to state 82

    exp                            shift and go to state 165
    termino                        shift and go to state 95
    factor                         shift and go to state 96
    constante                      shift and go to state 97
    lParen                         shift and go to state 98
    id                             shift and go to state 99

state 131

    (65) megaexpresionp -> empty .

    AND             reduce using rule 65 (megaexpresionp -> empty .)
    OR              reduce using rule 65 (megaexpresionp -> empty .)
    ;               reduce using rule 65 (megaexpresionp -> empty .)
    )               reduce using rule 65 (megaexpresionp -> empty .)
    ,               reduce using rule 65 (megaexpresionp -> empty .)
    ]               reduce using rule 65 (megaexpresionp -> empty .)


state 132

    (66) exp -> termino expp .

    <               reduce using rule 66 (exp -> termino expp .)
    >               reduce using rule 66 (exp -> termino expp .)
    EQUALS          reduce using rule 66 (exp -> termino expp .)
    DIFF            reduce using rule 66 (exp -> termino expp .)
    LTHANEQ         reduce using rule 66 (exp -> termino expp .)
    GTHANEQ         reduce using rule 66 (exp -> termino expp .)
    AND             reduce using rule 66 (exp -> termino expp .)
    OR              reduce using rule 66 (exp -> termino expp .)
    ;               reduce using rule 66 (exp -> termino expp .)
    )               reduce using rule 66 (exp -> termino expp .)
    ,               reduce using rule 66 (exp -> termino expp .)
    ]               reduce using rule 66 (exp -> termino expp .)


state 133

    (67) expp -> + . pAppT exp
    (70) pAppT -> .

    CTEF            reduce using rule 70 (pAppT -> .)
    CTEI            reduce using rule 70 (pAppT -> .)
    (               reduce using rule 70 (pAppT -> .)
    ID              reduce using rule 70 (pAppT -> .)

    pAppT                          shift and go to state 166

state 134

    (68) expp -> - . pAppT exp
    (70) pAppT -> .

    CTEF            reduce using rule 70 (pAppT -> .)
    CTEI            reduce using rule 70 (pAppT -> .)
    (               reduce using rule 70 (pAppT -> .)
    ID              reduce using rule 70 (pAppT -> .)

    pAppT                          shift and go to state 167

state 135

    (69) expp -> empty .

    <               reduce using rule 69 (expp -> empty .)
    >               reduce using rule 69 (expp -> empty .)
    EQUALS          reduce using rule 69 (expp -> empty .)
    DIFF            reduce using rule 69 (expp -> empty .)
    LTHANEQ         reduce using rule 69 (expp -> empty .)
    GTHANEQ         reduce using rule 69 (expp -> empty .)
    AND             reduce using rule 69 (expp -> empty .)
    OR              reduce using rule 69 (expp -> empty .)
    ;               reduce using rule 69 (expp -> empty .)
    )               reduce using rule 69 (expp -> empty .)
    ,               reduce using rule 69 (expp -> empty .)
    ]               reduce using rule 69 (expp -> empty .)


state 136

    (71) termino -> factor terminop .

    +               reduce using rule 71 (termino -> factor terminop .)
    -               reduce using rule 71 (termino -> factor terminop .)
    <               reduce using rule 71 (termino -> factor terminop .)
    >               reduce using rule 71 (termino -> factor terminop .)
    EQUALS          reduce using rule 71 (termino -> factor terminop .)
    DIFF            reduce using rule 71 (termino -> factor terminop .)
    LTHANEQ         reduce using rule 71 (termino -> factor terminop .)
    GTHANEQ         reduce using rule 71 (termino -> factor terminop .)
    AND             reduce using rule 71 (termino -> factor terminop .)
    OR              reduce using rule 71 (termino -> factor terminop .)
    ;               reduce using rule 71 (termino -> factor terminop .)
    )               reduce using rule 71 (termino -> factor terminop .)
    ,               reduce using rule 71 (termino -> factor terminop .)
    ]               reduce using rule 71 (termino -> factor terminop .)


state 137

    (72) terminop -> * . pAppF termino
    (75) pAppF -> .

    CTEF            reduce using rule 75 (pAppF -> .)
    CTEI            reduce using rule 75 (pAppF -> .)
    (               reduce using rule 75 (pAppF -> .)
    ID              reduce using rule 75 (pAppF -> .)

    pAppF                          shift and go to state 168

state 138

    (73) terminop -> / . pAppF termino
    (75) pAppF -> .

    CTEF            reduce using rule 75 (pAppF -> .)
    CTEI            reduce using rule 75 (pAppF -> .)
    (               reduce using rule 75 (pAppF -> .)
    ID              reduce using rule 75 (pAppF -> .)

    pAppF                          shift and go to state 169

state 139

    (74) terminop -> empty .

    +               reduce using rule 74 (terminop -> empty .)
    -               reduce using rule 74 (terminop -> empty .)
    <               reduce using rule 74 (terminop -> empty .)
    >               reduce using rule 74 (terminop -> empty .)
    EQUALS          reduce using rule 74 (terminop -> empty .)
    DIFF            reduce using rule 74 (terminop -> empty .)
    LTHANEQ         reduce using rule 74 (terminop -> empty .)
    GTHANEQ         reduce using rule 74 (terminop -> empty .)
    AND             reduce using rule 74 (terminop -> empty .)
    OR              reduce using rule 74 (terminop -> empty .)
    ;               reduce using rule 74 (terminop -> empty .)
    )               reduce using rule 74 (terminop -> empty .)
    ,               reduce using rule 74 (terminop -> empty .)
    ]               reduce using rule 74 (terminop -> empty .)


state 140

    (77) factor -> lParen superexpresion . rParen
    (79) rParen -> . )

    )               shift and go to state 171

    rParen                         shift and go to state 170

state 141

    (81) constante -> CTEF ctef .

    *               reduce using rule 81 (constante -> CTEF ctef .)
    /               reduce using rule 81 (constante -> CTEF ctef .)
    +               reduce using rule 81 (constante -> CTEF ctef .)
    -               reduce using rule 81 (constante -> CTEF ctef .)
    <               reduce using rule 81 (constante -> CTEF ctef .)
    >               reduce using rule 81 (constante -> CTEF ctef .)
    EQUALS          reduce using rule 81 (constante -> CTEF ctef .)
    DIFF            reduce using rule 81 (constante -> CTEF ctef .)
    LTHANEQ         reduce using rule 81 (constante -> CTEF ctef .)
    GTHANEQ         reduce using rule 81 (constante -> CTEF ctef .)
    AND             reduce using rule 81 (constante -> CTEF ctef .)
    OR              reduce using rule 81 (constante -> CTEF ctef .)
    ;               reduce using rule 81 (constante -> CTEF ctef .)
    )               reduce using rule 81 (constante -> CTEF ctef .)
    ,               reduce using rule 81 (constante -> CTEF ctef .)
    ]               reduce using rule 81 (constante -> CTEF ctef .)


state 142

    (82) constante -> CTEI ctei .

    *               reduce using rule 82 (constante -> CTEI ctei .)
    /               reduce using rule 82 (constante -> CTEI ctei .)
    +               reduce using rule 82 (constante -> CTEI ctei .)
    -               reduce using rule 82 (constante -> CTEI ctei .)
    <               reduce using rule 82 (constante -> CTEI ctei .)
    >               reduce using rule 82 (constante -> CTEI ctei .)
    EQUALS          reduce using rule 82 (constante -> CTEI ctei .)
    DIFF            reduce using rule 82 (constante -> CTEI ctei .)
    LTHANEQ         reduce using rule 82 (constante -> CTEI ctei .)
    GTHANEQ         reduce using rule 82 (constante -> CTEI ctei .)
    AND             reduce using rule 82 (constante -> CTEI ctei .)
    OR              reduce using rule 82 (constante -> CTEI ctei .)
    ;               reduce using rule 82 (constante -> CTEI ctei .)
    )               reduce using rule 82 (constante -> CTEI ctei .)
    ,               reduce using rule 82 (constante -> CTEI ctei .)
    ]               reduce using rule 82 (constante -> CTEI ctei .)


state 143

    (44) for -> FOR ( id . = superexpresion forAux ; superexpresion forAux2 ) bloque forAux3

    =               shift and go to state 172


state 144

    (110) fact -> FACT ( CTEI . ) ;

    )               shift and go to state 173


state 145

    (112) fibonacci -> FIBONACCI ( CTEI . ) ;

    )               shift and go to state 174


state 146

    (111) cuadratica -> CUADRATICA ( CTEI . , CTEI , CTEI ) ;

    ,               shift and go to state 175


state 147

    (113) raiz -> RAIZ ( CTEI . ) ;

    )               shift and go to state 176


state 148

    (103) idp -> ( idpp . )

    )               shift and go to state 177


state 149

    (106) idpp -> superexpresion . idppp
    (108) idppp -> . , idpp
    (109) idppp -> . empty
    (114) empty -> .

    ,               shift and go to state 179
    )               reduce using rule 114 (empty -> .)

    idppp                          shift and go to state 178
    empty                          shift and go to state 180

state 150

    (107) idpp -> empty .

    )               reduce using rule 107 (idpp -> empty .)


state 151

    (104) idp -> [ superexpresion . ]

    ]               shift and go to state 181


state 152

    (53) asignacionp -> = superexpresion ; .

    IF              reduce using rule 53 (asignacionp -> = superexpresion ; .)
    WRITE           reduce using rule 53 (asignacionp -> = superexpresion ; .)
    WHILE           reduce using rule 53 (asignacionp -> = superexpresion ; .)
    RETURN          reduce using rule 53 (asignacionp -> = superexpresion ; .)
    FOR             reduce using rule 53 (asignacionp -> = superexpresion ; .)
    FACT            reduce using rule 53 (asignacionp -> = superexpresion ; .)
    FIBONACCI       reduce using rule 53 (asignacionp -> = superexpresion ; .)
    CUADRATICA      reduce using rule 53 (asignacionp -> = superexpresion ; .)
    RAIZ            reduce using rule 53 (asignacionp -> = superexpresion ; .)
    ID              reduce using rule 53 (asignacionp -> = superexpresion ; .)
    INT             reduce using rule 53 (asignacionp -> = superexpresion ; .)
    FLOAT           reduce using rule 53 (asignacionp -> = superexpresion ; .)
    CHAR            reduce using rule 53 (asignacionp -> = superexpresion ; .)
    }               reduce using rule 53 (asignacionp -> = superexpresion ; .)


state 153

    (31) condicion -> IF ( superexpresion ) . condicionAux bloque condicionelse
    (32) condicionAux -> .

    {               reduce using rule 32 (condicionAux -> .)

    condicionAux                   shift and go to state 182

state 154

    (36) write -> WRITE ( writep ) . ;

    ;               shift and go to state 183


state 155

    (37) writep -> superexpresion writepAux . writepp
    (41) writepp -> . , writeppAux writep
    (42) writepp -> . empty writeppAux
    (114) empty -> .

    ,               shift and go to state 185
    )               reduce using rule 114 (empty -> .)

    writepp                        shift and go to state 184
    empty                          shift and go to state 186

state 156

    (38) writep -> LETRERO writepAux2 . writepp
    (41) writepp -> . , writeppAux writep
    (42) writepp -> . empty writeppAux
    (114) empty -> .

    ,               shift and go to state 185
    )               reduce using rule 114 (empty -> .)

    writepp                        shift and go to state 187
    empty                          shift and go to state 186

state 157

    (48) while -> WHILE whileAux ( superexpresion . ) whileAux2 bloque

    )               shift and go to state 188


state 158

    (55) superexpresionp -> AND superexpresion .

    ;               reduce using rule 55 (superexpresionp -> AND superexpresion .)
    )               reduce using rule 55 (superexpresionp -> AND superexpresion .)
    ,               reduce using rule 55 (superexpresionp -> AND superexpresion .)
    ]               reduce using rule 55 (superexpresionp -> AND superexpresion .)


state 159

    (56) superexpresionp -> OR superexpresion .

    ;               reduce using rule 56 (superexpresionp -> OR superexpresion .)
    )               reduce using rule 56 (superexpresionp -> OR superexpresion .)
    ,               reduce using rule 56 (superexpresionp -> OR superexpresion .)
    ]               reduce using rule 56 (superexpresionp -> OR superexpresion .)


state 160

    (59) megaexpresionp -> < exp .

    AND             reduce using rule 59 (megaexpresionp -> < exp .)
    OR              reduce using rule 59 (megaexpresionp -> < exp .)
    ;               reduce using rule 59 (megaexpresionp -> < exp .)
    )               reduce using rule 59 (megaexpresionp -> < exp .)
    ,               reduce using rule 59 (megaexpresionp -> < exp .)
    ]               reduce using rule 59 (megaexpresionp -> < exp .)


state 161

    (60) megaexpresionp -> > exp .

    AND             reduce using rule 60 (megaexpresionp -> > exp .)
    OR              reduce using rule 60 (megaexpresionp -> > exp .)
    ;               reduce using rule 60 (megaexpresionp -> > exp .)
    )               reduce using rule 60 (megaexpresionp -> > exp .)
    ,               reduce using rule 60 (megaexpresionp -> > exp .)
    ]               reduce using rule 60 (megaexpresionp -> > exp .)


state 162

    (61) megaexpresionp -> EQUALS exp .

    AND             reduce using rule 61 (megaexpresionp -> EQUALS exp .)
    OR              reduce using rule 61 (megaexpresionp -> EQUALS exp .)
    ;               reduce using rule 61 (megaexpresionp -> EQUALS exp .)
    )               reduce using rule 61 (megaexpresionp -> EQUALS exp .)
    ,               reduce using rule 61 (megaexpresionp -> EQUALS exp .)
    ]               reduce using rule 61 (megaexpresionp -> EQUALS exp .)


state 163

    (62) megaexpresionp -> DIFF exp .

    AND             reduce using rule 62 (megaexpresionp -> DIFF exp .)
    OR              reduce using rule 62 (megaexpresionp -> DIFF exp .)
    ;               reduce using rule 62 (megaexpresionp -> DIFF exp .)
    )               reduce using rule 62 (megaexpresionp -> DIFF exp .)
    ,               reduce using rule 62 (megaexpresionp -> DIFF exp .)
    ]               reduce using rule 62 (megaexpresionp -> DIFF exp .)


state 164

    (63) megaexpresionp -> LTHANEQ exp .

    AND             reduce using rule 63 (megaexpresionp -> LTHANEQ exp .)
    OR              reduce using rule 63 (megaexpresionp -> LTHANEQ exp .)
    ;               reduce using rule 63 (megaexpresionp -> LTHANEQ exp .)
    )               reduce using rule 63 (megaexpresionp -> LTHANEQ exp .)
    ,               reduce using rule 63 (megaexpresionp -> LTHANEQ exp .)
    ]               reduce using rule 63 (megaexpresionp -> LTHANEQ exp .)


state 165

    (64) megaexpresionp -> GTHANEQ exp .

    AND             reduce using rule 64 (megaexpresionp -> GTHANEQ exp .)
    OR              reduce using rule 64 (megaexpresionp -> GTHANEQ exp .)
    ;               reduce using rule 64 (megaexpresionp -> GTHANEQ exp .)
    )               reduce using rule 64 (megaexpresionp -> GTHANEQ exp .)
    ,               reduce using rule 64 (megaexpresionp -> GTHANEQ exp .)
    ]               reduce using rule 64 (megaexpresionp -> GTHANEQ exp .)


state 166

    (67) expp -> + pAppT . exp
    (66) exp -> . termino expp
    (71) termino -> . factor terminop
    (76) factor -> . constante
    (77) factor -> . lParen superexpresion rParen
    (80) constante -> . id
    (81) constante -> . CTEF ctef
    (82) constante -> . CTEI ctei
    (78) lParen -> . (
    (102) id -> . ID idp

    CTEF            shift and go to state 100
    CTEI            shift and go to state 101
    (               shift and go to state 102
    ID              shift and go to state 82

    exp                            shift and go to state 189
    termino                        shift and go to state 95
    factor                         shift and go to state 96
    constante                      shift and go to state 97
    lParen                         shift and go to state 98
    id                             shift and go to state 99

state 167

    (68) expp -> - pAppT . exp
    (66) exp -> . termino expp
    (71) termino -> . factor terminop
    (76) factor -> . constante
    (77) factor -> . lParen superexpresion rParen
    (80) constante -> . id
    (81) constante -> . CTEF ctef
    (82) constante -> . CTEI ctei
    (78) lParen -> . (
    (102) id -> . ID idp

    CTEF            shift and go to state 100
    CTEI            shift and go to state 101
    (               shift and go to state 102
    ID              shift and go to state 82

    exp                            shift and go to state 190
    termino                        shift and go to state 95
    factor                         shift and go to state 96
    constante                      shift and go to state 97
    lParen                         shift and go to state 98
    id                             shift and go to state 99

state 168

    (72) terminop -> * pAppF . termino
    (71) termino -> . factor terminop
    (76) factor -> . constante
    (77) factor -> . lParen superexpresion rParen
    (80) constante -> . id
    (81) constante -> . CTEF ctef
    (82) constante -> . CTEI ctei
    (78) lParen -> . (
    (102) id -> . ID idp

    CTEF            shift and go to state 100
    CTEI            shift and go to state 101
    (               shift and go to state 102
    ID              shift and go to state 82

    termino                        shift and go to state 191
    factor                         shift and go to state 96
    constante                      shift and go to state 97
    lParen                         shift and go to state 98
    id                             shift and go to state 99

state 169

    (73) terminop -> / pAppF . termino
    (71) termino -> . factor terminop
    (76) factor -> . constante
    (77) factor -> . lParen superexpresion rParen
    (80) constante -> . id
    (81) constante -> . CTEF ctef
    (82) constante -> . CTEI ctei
    (78) lParen -> . (
    (102) id -> . ID idp

    CTEF            shift and go to state 100
    CTEI            shift and go to state 101
    (               shift and go to state 102
    ID              shift and go to state 82

    termino                        shift and go to state 192
    factor                         shift and go to state 96
    constante                      shift and go to state 97
    lParen                         shift and go to state 98
    id                             shift and go to state 99

state 170

    (77) factor -> lParen superexpresion rParen .

    *               reduce using rule 77 (factor -> lParen superexpresion rParen .)
    /               reduce using rule 77 (factor -> lParen superexpresion rParen .)
    +               reduce using rule 77 (factor -> lParen superexpresion rParen .)
    -               reduce using rule 77 (factor -> lParen superexpresion rParen .)
    <               reduce using rule 77 (factor -> lParen superexpresion rParen .)
    >               reduce using rule 77 (factor -> lParen superexpresion rParen .)
    EQUALS          reduce using rule 77 (factor -> lParen superexpresion rParen .)
    DIFF            reduce using rule 77 (factor -> lParen superexpresion rParen .)
    LTHANEQ         reduce using rule 77 (factor -> lParen superexpresion rParen .)
    GTHANEQ         reduce using rule 77 (factor -> lParen superexpresion rParen .)
    AND             reduce using rule 77 (factor -> lParen superexpresion rParen .)
    OR              reduce using rule 77 (factor -> lParen superexpresion rParen .)
    ;               reduce using rule 77 (factor -> lParen superexpresion rParen .)
    )               reduce using rule 77 (factor -> lParen superexpresion rParen .)
    ,               reduce using rule 77 (factor -> lParen superexpresion rParen .)
    ]               reduce using rule 77 (factor -> lParen superexpresion rParen .)


state 171

    (79) rParen -> ) .

    *               reduce using rule 79 (rParen -> ) .)
    /               reduce using rule 79 (rParen -> ) .)
    +               reduce using rule 79 (rParen -> ) .)
    -               reduce using rule 79 (rParen -> ) .)
    <               reduce using rule 79 (rParen -> ) .)
    >               reduce using rule 79 (rParen -> ) .)
    EQUALS          reduce using rule 79 (rParen -> ) .)
    DIFF            reduce using rule 79 (rParen -> ) .)
    LTHANEQ         reduce using rule 79 (rParen -> ) .)
    GTHANEQ         reduce using rule 79 (rParen -> ) .)
    AND             reduce using rule 79 (rParen -> ) .)
    OR              reduce using rule 79 (rParen -> ) .)
    ;               reduce using rule 79 (rParen -> ) .)
    )               reduce using rule 79 (rParen -> ) .)
    ,               reduce using rule 79 (rParen -> ) .)
    ]               reduce using rule 79 (rParen -> ) .)


state 172

    (44) for -> FOR ( id = . superexpresion forAux ; superexpresion forAux2 ) bloque forAux3
    (54) superexpresion -> . megaexpresion superexpresionp
    (58) megaexpresion -> . exp megaexpresionp
    (66) exp -> . termino expp
    (71) termino -> . factor terminop
    (76) factor -> . constante
    (77) factor -> . lParen superexpresion rParen
    (80) constante -> . id
    (81) constante -> . CTEF ctef
    (82) constante -> . CTEI ctei
    (78) lParen -> . (
    (102) id -> . ID idp

    CTEF            shift and go to state 100
    CTEI            shift and go to state 101
    (               shift and go to state 102
    ID              shift and go to state 82

    id                             shift and go to state 99
    superexpresion                 shift and go to state 193
    megaexpresion                  shift and go to state 93
    exp                            shift and go to state 94
    termino                        shift and go to state 95
    factor                         shift and go to state 96
    constante                      shift and go to state 97
    lParen                         shift and go to state 98

state 173

    (110) fact -> FACT ( CTEI ) . ;

    ;               shift and go to state 194


state 174

    (112) fibonacci -> FIBONACCI ( CTEI ) . ;

    ;               shift and go to state 195


state 175

    (111) cuadratica -> CUADRATICA ( CTEI , . CTEI , CTEI ) ;

    CTEI            shift and go to state 196


state 176

    (113) raiz -> RAIZ ( CTEI ) . ;

    ;               shift and go to state 197


state 177

    (103) idp -> ( idpp ) .

    ;               reduce using rule 103 (idp -> ( idpp ) .)
    =               reduce using rule 103 (idp -> ( idpp ) .)
    *               reduce using rule 103 (idp -> ( idpp ) .)
    /               reduce using rule 103 (idp -> ( idpp ) .)
    +               reduce using rule 103 (idp -> ( idpp ) .)
    -               reduce using rule 103 (idp -> ( idpp ) .)
    <               reduce using rule 103 (idp -> ( idpp ) .)
    >               reduce using rule 103 (idp -> ( idpp ) .)
    EQUALS          reduce using rule 103 (idp -> ( idpp ) .)
    DIFF            reduce using rule 103 (idp -> ( idpp ) .)
    LTHANEQ         reduce using rule 103 (idp -> ( idpp ) .)
    GTHANEQ         reduce using rule 103 (idp -> ( idpp ) .)
    AND             reduce using rule 103 (idp -> ( idpp ) .)
    OR              reduce using rule 103 (idp -> ( idpp ) .)
    )               reduce using rule 103 (idp -> ( idpp ) .)
    ,               reduce using rule 103 (idp -> ( idpp ) .)
    ]               reduce using rule 103 (idp -> ( idpp ) .)


state 178

    (106) idpp -> superexpresion idppp .

    )               reduce using rule 106 (idpp -> superexpresion idppp .)


state 179

    (108) idppp -> , . idpp
    (106) idpp -> . superexpresion idppp
    (107) idpp -> . empty
    (54) superexpresion -> . megaexpresion superexpresionp
    (114) empty -> .
    (58) megaexpresion -> . exp megaexpresionp
    (66) exp -> . termino expp
    (71) termino -> . factor terminop
    (76) factor -> . constante
    (77) factor -> . lParen superexpresion rParen
    (80) constante -> . id
    (81) constante -> . CTEF ctef
    (82) constante -> . CTEI ctei
    (78) lParen -> . (
    (102) id -> . ID idp

    )               reduce using rule 114 (empty -> .)
    CTEF            shift and go to state 100
    CTEI            shift and go to state 101
    (               shift and go to state 102
    ID              shift and go to state 82

    idpp                           shift and go to state 198
    superexpresion                 shift and go to state 149
    empty                          shift and go to state 150
    megaexpresion                  shift and go to state 93
    exp                            shift and go to state 94
    termino                        shift and go to state 95
    factor                         shift and go to state 96
    constante                      shift and go to state 97
    lParen                         shift and go to state 98
    id                             shift and go to state 99

state 180

    (109) idppp -> empty .

    )               reduce using rule 109 (idppp -> empty .)


state 181

    (104) idp -> [ superexpresion ] .

    ;               reduce using rule 104 (idp -> [ superexpresion ] .)
    =               reduce using rule 104 (idp -> [ superexpresion ] .)
    *               reduce using rule 104 (idp -> [ superexpresion ] .)
    /               reduce using rule 104 (idp -> [ superexpresion ] .)
    +               reduce using rule 104 (idp -> [ superexpresion ] .)
    -               reduce using rule 104 (idp -> [ superexpresion ] .)
    <               reduce using rule 104 (idp -> [ superexpresion ] .)
    >               reduce using rule 104 (idp -> [ superexpresion ] .)
    EQUALS          reduce using rule 104 (idp -> [ superexpresion ] .)
    DIFF            reduce using rule 104 (idp -> [ superexpresion ] .)
    LTHANEQ         reduce using rule 104 (idp -> [ superexpresion ] .)
    GTHANEQ         reduce using rule 104 (idp -> [ superexpresion ] .)
    AND             reduce using rule 104 (idp -> [ superexpresion ] .)
    OR              reduce using rule 104 (idp -> [ superexpresion ] .)
    )               reduce using rule 104 (idp -> [ superexpresion ] .)
    ,               reduce using rule 104 (idp -> [ superexpresion ] .)
    ]               reduce using rule 104 (idp -> [ superexpresion ] .)


state 182

    (31) condicion -> IF ( superexpresion ) condicionAux . bloque condicionelse
    (14) bloque -> . { cuerpo }

    {               shift and go to state 47

    bloque                         shift and go to state 199

state 183

    (36) write -> WRITE ( writep ) ; .

    IF              reduce using rule 36 (write -> WRITE ( writep ) ; .)
    WRITE           reduce using rule 36 (write -> WRITE ( writep ) ; .)
    WHILE           reduce using rule 36 (write -> WRITE ( writep ) ; .)
    RETURN          reduce using rule 36 (write -> WRITE ( writep ) ; .)
    FOR             reduce using rule 36 (write -> WRITE ( writep ) ; .)
    FACT            reduce using rule 36 (write -> WRITE ( writep ) ; .)
    FIBONACCI       reduce using rule 36 (write -> WRITE ( writep ) ; .)
    CUADRATICA      reduce using rule 36 (write -> WRITE ( writep ) ; .)
    RAIZ            reduce using rule 36 (write -> WRITE ( writep ) ; .)
    ID              reduce using rule 36 (write -> WRITE ( writep ) ; .)
    INT             reduce using rule 36 (write -> WRITE ( writep ) ; .)
    FLOAT           reduce using rule 36 (write -> WRITE ( writep ) ; .)
    CHAR            reduce using rule 36 (write -> WRITE ( writep ) ; .)
    }               reduce using rule 36 (write -> WRITE ( writep ) ; .)


state 184

    (37) writep -> superexpresion writepAux writepp .

    )               reduce using rule 37 (writep -> superexpresion writepAux writepp .)


state 185

    (41) writepp -> , . writeppAux writep
    (43) writeppAux -> .

    LETRERO         reduce using rule 43 (writeppAux -> .)
    CTEF            reduce using rule 43 (writeppAux -> .)
    CTEI            reduce using rule 43 (writeppAux -> .)
    (               reduce using rule 43 (writeppAux -> .)
    ID              reduce using rule 43 (writeppAux -> .)

    writeppAux                     shift and go to state 200

state 186

    (42) writepp -> empty . writeppAux
    (43) writeppAux -> .

    )               reduce using rule 43 (writeppAux -> .)

    writeppAux                     shift and go to state 201

state 187

    (38) writep -> LETRERO writepAux2 writepp .

    )               reduce using rule 38 (writep -> LETRERO writepAux2 writepp .)


state 188

    (48) while -> WHILE whileAux ( superexpresion ) . whileAux2 bloque
    (50) whileAux2 -> .

    {               reduce using rule 50 (whileAux2 -> .)

    whileAux2                      shift and go to state 202

state 189

    (67) expp -> + pAppT exp .

    <               reduce using rule 67 (expp -> + pAppT exp .)
    >               reduce using rule 67 (expp -> + pAppT exp .)
    EQUALS          reduce using rule 67 (expp -> + pAppT exp .)
    DIFF            reduce using rule 67 (expp -> + pAppT exp .)
    LTHANEQ         reduce using rule 67 (expp -> + pAppT exp .)
    GTHANEQ         reduce using rule 67 (expp -> + pAppT exp .)
    AND             reduce using rule 67 (expp -> + pAppT exp .)
    OR              reduce using rule 67 (expp -> + pAppT exp .)
    ;               reduce using rule 67 (expp -> + pAppT exp .)
    )               reduce using rule 67 (expp -> + pAppT exp .)
    ,               reduce using rule 67 (expp -> + pAppT exp .)
    ]               reduce using rule 67 (expp -> + pAppT exp .)


state 190

    (68) expp -> - pAppT exp .

    <               reduce using rule 68 (expp -> - pAppT exp .)
    >               reduce using rule 68 (expp -> - pAppT exp .)
    EQUALS          reduce using rule 68 (expp -> - pAppT exp .)
    DIFF            reduce using rule 68 (expp -> - pAppT exp .)
    LTHANEQ         reduce using rule 68 (expp -> - pAppT exp .)
    GTHANEQ         reduce using rule 68 (expp -> - pAppT exp .)
    AND             reduce using rule 68 (expp -> - pAppT exp .)
    OR              reduce using rule 68 (expp -> - pAppT exp .)
    ;               reduce using rule 68 (expp -> - pAppT exp .)
    )               reduce using rule 68 (expp -> - pAppT exp .)
    ,               reduce using rule 68 (expp -> - pAppT exp .)
    ]               reduce using rule 68 (expp -> - pAppT exp .)


state 191

    (72) terminop -> * pAppF termino .

    +               reduce using rule 72 (terminop -> * pAppF termino .)
    -               reduce using rule 72 (terminop -> * pAppF termino .)
    <               reduce using rule 72 (terminop -> * pAppF termino .)
    >               reduce using rule 72 (terminop -> * pAppF termino .)
    EQUALS          reduce using rule 72 (terminop -> * pAppF termino .)
    DIFF            reduce using rule 72 (terminop -> * pAppF termino .)
    LTHANEQ         reduce using rule 72 (terminop -> * pAppF termino .)
    GTHANEQ         reduce using rule 72 (terminop -> * pAppF termino .)
    AND             reduce using rule 72 (terminop -> * pAppF termino .)
    OR              reduce using rule 72 (terminop -> * pAppF termino .)
    ;               reduce using rule 72 (terminop -> * pAppF termino .)
    )               reduce using rule 72 (terminop -> * pAppF termino .)
    ,               reduce using rule 72 (terminop -> * pAppF termino .)
    ]               reduce using rule 72 (terminop -> * pAppF termino .)


state 192

    (73) terminop -> / pAppF termino .

    +               reduce using rule 73 (terminop -> / pAppF termino .)
    -               reduce using rule 73 (terminop -> / pAppF termino .)
    <               reduce using rule 73 (terminop -> / pAppF termino .)
    >               reduce using rule 73 (terminop -> / pAppF termino .)
    EQUALS          reduce using rule 73 (terminop -> / pAppF termino .)
    DIFF            reduce using rule 73 (terminop -> / pAppF termino .)
    LTHANEQ         reduce using rule 73 (terminop -> / pAppF termino .)
    GTHANEQ         reduce using rule 73 (terminop -> / pAppF termino .)
    AND             reduce using rule 73 (terminop -> / pAppF termino .)
    OR              reduce using rule 73 (terminop -> / pAppF termino .)
    ;               reduce using rule 73 (terminop -> / pAppF termino .)
    )               reduce using rule 73 (terminop -> / pAppF termino .)
    ,               reduce using rule 73 (terminop -> / pAppF termino .)
    ]               reduce using rule 73 (terminop -> / pAppF termino .)


state 193

    (44) for -> FOR ( id = superexpresion . forAux ; superexpresion forAux2 ) bloque forAux3
    (45) forAux -> .

    ;               reduce using rule 45 (forAux -> .)

    forAux                         shift and go to state 203

state 194

    (110) fact -> FACT ( CTEI ) ; .

    IF              reduce using rule 110 (fact -> FACT ( CTEI ) ; .)
    WRITE           reduce using rule 110 (fact -> FACT ( CTEI ) ; .)
    WHILE           reduce using rule 110 (fact -> FACT ( CTEI ) ; .)
    RETURN          reduce using rule 110 (fact -> FACT ( CTEI ) ; .)
    FOR             reduce using rule 110 (fact -> FACT ( CTEI ) ; .)
    FACT            reduce using rule 110 (fact -> FACT ( CTEI ) ; .)
    FIBONACCI       reduce using rule 110 (fact -> FACT ( CTEI ) ; .)
    CUADRATICA      reduce using rule 110 (fact -> FACT ( CTEI ) ; .)
    RAIZ            reduce using rule 110 (fact -> FACT ( CTEI ) ; .)
    ID              reduce using rule 110 (fact -> FACT ( CTEI ) ; .)
    INT             reduce using rule 110 (fact -> FACT ( CTEI ) ; .)
    FLOAT           reduce using rule 110 (fact -> FACT ( CTEI ) ; .)
    CHAR            reduce using rule 110 (fact -> FACT ( CTEI ) ; .)
    }               reduce using rule 110 (fact -> FACT ( CTEI ) ; .)


state 195

    (112) fibonacci -> FIBONACCI ( CTEI ) ; .

    IF              reduce using rule 112 (fibonacci -> FIBONACCI ( CTEI ) ; .)
    WRITE           reduce using rule 112 (fibonacci -> FIBONACCI ( CTEI ) ; .)
    WHILE           reduce using rule 112 (fibonacci -> FIBONACCI ( CTEI ) ; .)
    RETURN          reduce using rule 112 (fibonacci -> FIBONACCI ( CTEI ) ; .)
    FOR             reduce using rule 112 (fibonacci -> FIBONACCI ( CTEI ) ; .)
    FACT            reduce using rule 112 (fibonacci -> FIBONACCI ( CTEI ) ; .)
    FIBONACCI       reduce using rule 112 (fibonacci -> FIBONACCI ( CTEI ) ; .)
    CUADRATICA      reduce using rule 112 (fibonacci -> FIBONACCI ( CTEI ) ; .)
    RAIZ            reduce using rule 112 (fibonacci -> FIBONACCI ( CTEI ) ; .)
    ID              reduce using rule 112 (fibonacci -> FIBONACCI ( CTEI ) ; .)
    INT             reduce using rule 112 (fibonacci -> FIBONACCI ( CTEI ) ; .)
    FLOAT           reduce using rule 112 (fibonacci -> FIBONACCI ( CTEI ) ; .)
    CHAR            reduce using rule 112 (fibonacci -> FIBONACCI ( CTEI ) ; .)
    }               reduce using rule 112 (fibonacci -> FIBONACCI ( CTEI ) ; .)


state 196

    (111) cuadratica -> CUADRATICA ( CTEI , CTEI . , CTEI ) ;

    ,               shift and go to state 204


state 197

    (113) raiz -> RAIZ ( CTEI ) ; .

    IF              reduce using rule 113 (raiz -> RAIZ ( CTEI ) ; .)
    WRITE           reduce using rule 113 (raiz -> RAIZ ( CTEI ) ; .)
    WHILE           reduce using rule 113 (raiz -> RAIZ ( CTEI ) ; .)
    RETURN          reduce using rule 113 (raiz -> RAIZ ( CTEI ) ; .)
    FOR             reduce using rule 113 (raiz -> RAIZ ( CTEI ) ; .)
    FACT            reduce using rule 113 (raiz -> RAIZ ( CTEI ) ; .)
    FIBONACCI       reduce using rule 113 (raiz -> RAIZ ( CTEI ) ; .)
    CUADRATICA      reduce using rule 113 (raiz -> RAIZ ( CTEI ) ; .)
    RAIZ            reduce using rule 113 (raiz -> RAIZ ( CTEI ) ; .)
    ID              reduce using rule 113 (raiz -> RAIZ ( CTEI ) ; .)
    INT             reduce using rule 113 (raiz -> RAIZ ( CTEI ) ; .)
    FLOAT           reduce using rule 113 (raiz -> RAIZ ( CTEI ) ; .)
    CHAR            reduce using rule 113 (raiz -> RAIZ ( CTEI ) ; .)
    }               reduce using rule 113 (raiz -> RAIZ ( CTEI ) ; .)


state 198

    (108) idppp -> , idpp .

    )               reduce using rule 108 (idppp -> , idpp .)


state 199

    (31) condicion -> IF ( superexpresion ) condicionAux bloque . condicionelse
    (33) condicionelse -> . ELSE condicionelseAux bloque
    (34) condicionelse -> . empty
    (114) empty -> .

    ELSE            shift and go to state 206
    IF              reduce using rule 114 (empty -> .)
    WRITE           reduce using rule 114 (empty -> .)
    WHILE           reduce using rule 114 (empty -> .)
    RETURN          reduce using rule 114 (empty -> .)
    FOR             reduce using rule 114 (empty -> .)
    FACT            reduce using rule 114 (empty -> .)
    FIBONACCI       reduce using rule 114 (empty -> .)
    CUADRATICA      reduce using rule 114 (empty -> .)
    RAIZ            reduce using rule 114 (empty -> .)
    ID              reduce using rule 114 (empty -> .)
    INT             reduce using rule 114 (empty -> .)
    FLOAT           reduce using rule 114 (empty -> .)
    CHAR            reduce using rule 114 (empty -> .)
    }               reduce using rule 114 (empty -> .)

    condicionelse                  shift and go to state 205
    empty                          shift and go to state 207

state 200

    (41) writepp -> , writeppAux . writep
    (37) writep -> . superexpresion writepAux writepp
    (38) writep -> . LETRERO writepAux2 writepp
    (54) superexpresion -> . megaexpresion superexpresionp
    (58) megaexpresion -> . exp megaexpresionp
    (66) exp -> . termino expp
    (71) termino -> . factor terminop
    (76) factor -> . constante
    (77) factor -> . lParen superexpresion rParen
    (80) constante -> . id
    (81) constante -> . CTEF ctef
    (82) constante -> . CTEI ctei
    (78) lParen -> . (
    (102) id -> . ID idp

    LETRERO         shift and go to state 117
    CTEF            shift and go to state 100
    CTEI            shift and go to state 101
    (               shift and go to state 102
    ID              shift and go to state 82

    writep                         shift and go to state 208
    superexpresion                 shift and go to state 116
    megaexpresion                  shift and go to state 93
    exp                            shift and go to state 94
    termino                        shift and go to state 95
    factor                         shift and go to state 96
    constante                      shift and go to state 97
    lParen                         shift and go to state 98
    id                             shift and go to state 99

state 201

    (42) writepp -> empty writeppAux .

    )               reduce using rule 42 (writepp -> empty writeppAux .)


state 202

    (48) while -> WHILE whileAux ( superexpresion ) whileAux2 . bloque
    (14) bloque -> . { cuerpo }

    {               shift and go to state 47

    bloque                         shift and go to state 209

state 203

    (44) for -> FOR ( id = superexpresion forAux . ; superexpresion forAux2 ) bloque forAux3

    ;               shift and go to state 210


state 204

    (111) cuadratica -> CUADRATICA ( CTEI , CTEI , . CTEI ) ;

    CTEI            shift and go to state 211


state 205

    (31) condicion -> IF ( superexpresion ) condicionAux bloque condicionelse .

    IF              reduce using rule 31 (condicion -> IF ( superexpresion ) condicionAux bloque condicionelse .)
    WRITE           reduce using rule 31 (condicion -> IF ( superexpresion ) condicionAux bloque condicionelse .)
    WHILE           reduce using rule 31 (condicion -> IF ( superexpresion ) condicionAux bloque condicionelse .)
    RETURN          reduce using rule 31 (condicion -> IF ( superexpresion ) condicionAux bloque condicionelse .)
    FOR             reduce using rule 31 (condicion -> IF ( superexpresion ) condicionAux bloque condicionelse .)
    FACT            reduce using rule 31 (condicion -> IF ( superexpresion ) condicionAux bloque condicionelse .)
    FIBONACCI       reduce using rule 31 (condicion -> IF ( superexpresion ) condicionAux bloque condicionelse .)
    CUADRATICA      reduce using rule 31 (condicion -> IF ( superexpresion ) condicionAux bloque condicionelse .)
    RAIZ            reduce using rule 31 (condicion -> IF ( superexpresion ) condicionAux bloque condicionelse .)
    ID              reduce using rule 31 (condicion -> IF ( superexpresion ) condicionAux bloque condicionelse .)
    INT             reduce using rule 31 (condicion -> IF ( superexpresion ) condicionAux bloque condicionelse .)
    FLOAT           reduce using rule 31 (condicion -> IF ( superexpresion ) condicionAux bloque condicionelse .)
    CHAR            reduce using rule 31 (condicion -> IF ( superexpresion ) condicionAux bloque condicionelse .)
    }               reduce using rule 31 (condicion -> IF ( superexpresion ) condicionAux bloque condicionelse .)


state 206

    (33) condicionelse -> ELSE . condicionelseAux bloque
    (35) condicionelseAux -> .

    {               reduce using rule 35 (condicionelseAux -> .)

    condicionelseAux               shift and go to state 212

state 207

    (34) condicionelse -> empty .

    IF              reduce using rule 34 (condicionelse -> empty .)
    WRITE           reduce using rule 34 (condicionelse -> empty .)
    WHILE           reduce using rule 34 (condicionelse -> empty .)
    RETURN          reduce using rule 34 (condicionelse -> empty .)
    FOR             reduce using rule 34 (condicionelse -> empty .)
    FACT            reduce using rule 34 (condicionelse -> empty .)
    FIBONACCI       reduce using rule 34 (condicionelse -> empty .)
    CUADRATICA      reduce using rule 34 (condicionelse -> empty .)
    RAIZ            reduce using rule 34 (condicionelse -> empty .)
    ID              reduce using rule 34 (condicionelse -> empty .)
    INT             reduce using rule 34 (condicionelse -> empty .)
    FLOAT           reduce using rule 34 (condicionelse -> empty .)
    CHAR            reduce using rule 34 (condicionelse -> empty .)
    }               reduce using rule 34 (condicionelse -> empty .)


state 208

    (41) writepp -> , writeppAux writep .

    )               reduce using rule 41 (writepp -> , writeppAux writep .)


state 209

    (48) while -> WHILE whileAux ( superexpresion ) whileAux2 bloque .

    IF              reduce using rule 48 (while -> WHILE whileAux ( superexpresion ) whileAux2 bloque .)
    WRITE           reduce using rule 48 (while -> WHILE whileAux ( superexpresion ) whileAux2 bloque .)
    WHILE           reduce using rule 48 (while -> WHILE whileAux ( superexpresion ) whileAux2 bloque .)
    RETURN          reduce using rule 48 (while -> WHILE whileAux ( superexpresion ) whileAux2 bloque .)
    FOR             reduce using rule 48 (while -> WHILE whileAux ( superexpresion ) whileAux2 bloque .)
    FACT            reduce using rule 48 (while -> WHILE whileAux ( superexpresion ) whileAux2 bloque .)
    FIBONACCI       reduce using rule 48 (while -> WHILE whileAux ( superexpresion ) whileAux2 bloque .)
    CUADRATICA      reduce using rule 48 (while -> WHILE whileAux ( superexpresion ) whileAux2 bloque .)
    RAIZ            reduce using rule 48 (while -> WHILE whileAux ( superexpresion ) whileAux2 bloque .)
    ID              reduce using rule 48 (while -> WHILE whileAux ( superexpresion ) whileAux2 bloque .)
    INT             reduce using rule 48 (while -> WHILE whileAux ( superexpresion ) whileAux2 bloque .)
    FLOAT           reduce using rule 48 (while -> WHILE whileAux ( superexpresion ) whileAux2 bloque .)
    CHAR            reduce using rule 48 (while -> WHILE whileAux ( superexpresion ) whileAux2 bloque .)
    }               reduce using rule 48 (while -> WHILE whileAux ( superexpresion ) whileAux2 bloque .)


state 210

    (44) for -> FOR ( id = superexpresion forAux ; . superexpresion forAux2 ) bloque forAux3
    (54) superexpresion -> . megaexpresion superexpresionp
    (58) megaexpresion -> . exp megaexpresionp
    (66) exp -> . termino expp
    (71) termino -> . factor terminop
    (76) factor -> . constante
    (77) factor -> . lParen superexpresion rParen
    (80) constante -> . id
    (81) constante -> . CTEF ctef
    (82) constante -> . CTEI ctei
    (78) lParen -> . (
    (102) id -> . ID idp

    CTEF            shift and go to state 100
    CTEI            shift and go to state 101
    (               shift and go to state 102
    ID              shift and go to state 82

    id                             shift and go to state 99
    superexpresion                 shift and go to state 213
    megaexpresion                  shift and go to state 93
    exp                            shift and go to state 94
    termino                        shift and go to state 95
    factor                         shift and go to state 96
    constante                      shift and go to state 97
    lParen                         shift and go to state 98

state 211

    (111) cuadratica -> CUADRATICA ( CTEI , CTEI , CTEI . ) ;

    )               shift and go to state 214


state 212

    (33) condicionelse -> ELSE condicionelseAux . bloque
    (14) bloque -> . { cuerpo }

    {               shift and go to state 47

    bloque                         shift and go to state 215

state 213

    (44) for -> FOR ( id = superexpresion forAux ; superexpresion . forAux2 ) bloque forAux3
    (46) forAux2 -> .

    )               reduce using rule 46 (forAux2 -> .)

    forAux2                        shift and go to state 216

state 214

    (111) cuadratica -> CUADRATICA ( CTEI , CTEI , CTEI ) . ;

    ;               shift and go to state 217


state 215

    (33) condicionelse -> ELSE condicionelseAux bloque .

    IF              reduce using rule 33 (condicionelse -> ELSE condicionelseAux bloque .)
    WRITE           reduce using rule 33 (condicionelse -> ELSE condicionelseAux bloque .)
    WHILE           reduce using rule 33 (condicionelse -> ELSE condicionelseAux bloque .)
    RETURN          reduce using rule 33 (condicionelse -> ELSE condicionelseAux bloque .)
    FOR             reduce using rule 33 (condicionelse -> ELSE condicionelseAux bloque .)
    FACT            reduce using rule 33 (condicionelse -> ELSE condicionelseAux bloque .)
    FIBONACCI       reduce using rule 33 (condicionelse -> ELSE condicionelseAux bloque .)
    CUADRATICA      reduce using rule 33 (condicionelse -> ELSE condicionelseAux bloque .)
    RAIZ            reduce using rule 33 (condicionelse -> ELSE condicionelseAux bloque .)
    ID              reduce using rule 33 (condicionelse -> ELSE condicionelseAux bloque .)
    INT             reduce using rule 33 (condicionelse -> ELSE condicionelseAux bloque .)
    FLOAT           reduce using rule 33 (condicionelse -> ELSE condicionelseAux bloque .)
    CHAR            reduce using rule 33 (condicionelse -> ELSE condicionelseAux bloque .)
    }               reduce using rule 33 (condicionelse -> ELSE condicionelseAux bloque .)


state 216

    (44) for -> FOR ( id = superexpresion forAux ; superexpresion forAux2 . ) bloque forAux3

    )               shift and go to state 218


state 217

    (111) cuadratica -> CUADRATICA ( CTEI , CTEI , CTEI ) ; .

    IF              reduce using rule 111 (cuadratica -> CUADRATICA ( CTEI , CTEI , CTEI ) ; .)
    WRITE           reduce using rule 111 (cuadratica -> CUADRATICA ( CTEI , CTEI , CTEI ) ; .)
    WHILE           reduce using rule 111 (cuadratica -> CUADRATICA ( CTEI , CTEI , CTEI ) ; .)
    RETURN          reduce using rule 111 (cuadratica -> CUADRATICA ( CTEI , CTEI , CTEI ) ; .)
    FOR             reduce using rule 111 (cuadratica -> CUADRATICA ( CTEI , CTEI , CTEI ) ; .)
    FACT            reduce using rule 111 (cuadratica -> CUADRATICA ( CTEI , CTEI , CTEI ) ; .)
    FIBONACCI       reduce using rule 111 (cuadratica -> CUADRATICA ( CTEI , CTEI , CTEI ) ; .)
    CUADRATICA      reduce using rule 111 (cuadratica -> CUADRATICA ( CTEI , CTEI , CTEI ) ; .)
    RAIZ            reduce using rule 111 (cuadratica -> CUADRATICA ( CTEI , CTEI , CTEI ) ; .)
    ID              reduce using rule 111 (cuadratica -> CUADRATICA ( CTEI , CTEI , CTEI ) ; .)
    INT             reduce using rule 111 (cuadratica -> CUADRATICA ( CTEI , CTEI , CTEI ) ; .)
    FLOAT           reduce using rule 111 (cuadratica -> CUADRATICA ( CTEI , CTEI , CTEI ) ; .)
    CHAR            reduce using rule 111 (cuadratica -> CUADRATICA ( CTEI , CTEI , CTEI ) ; .)
    }               reduce using rule 111 (cuadratica -> CUADRATICA ( CTEI , CTEI , CTEI ) ; .)


state 218

    (44) for -> FOR ( id = superexpresion forAux ; superexpresion forAux2 ) . bloque forAux3
    (14) bloque -> . { cuerpo }

    {               shift and go to state 47

    bloque                         shift and go to state 219

state 219

    (44) for -> FOR ( id = superexpresion forAux ; superexpresion forAux2 ) bloque . forAux3
    (47) forAux3 -> .

    IF              reduce using rule 47 (forAux3 -> .)
    WRITE           reduce using rule 47 (forAux3 -> .)
    WHILE           reduce using rule 47 (forAux3 -> .)
    RETURN          reduce using rule 47 (forAux3 -> .)
    FOR             reduce using rule 47 (forAux3 -> .)
    FACT            reduce using rule 47 (forAux3 -> .)
    FIBONACCI       reduce using rule 47 (forAux3 -> .)
    CUADRATICA      reduce using rule 47 (forAux3 -> .)
    RAIZ            reduce using rule 47 (forAux3 -> .)
    ID              reduce using rule 47 (forAux3 -> .)
    INT             reduce using rule 47 (forAux3 -> .)
    FLOAT           reduce using rule 47 (forAux3 -> .)
    CHAR            reduce using rule 47 (forAux3 -> .)
    }               reduce using rule 47 (forAux3 -> .)

    forAux3                        shift and go to state 220

state 220

    (44) for -> FOR ( id = superexpresion forAux ; superexpresion forAux2 ) bloque forAux3 .

    IF              reduce using rule 44 (for -> FOR ( id = superexpresion forAux ; superexpresion forAux2 ) bloque forAux3 .)
    WRITE           reduce using rule 44 (for -> FOR ( id = superexpresion forAux ; superexpresion forAux2 ) bloque forAux3 .)
    WHILE           reduce using rule 44 (for -> FOR ( id = superexpresion forAux ; superexpresion forAux2 ) bloque forAux3 .)
    RETURN          reduce using rule 44 (for -> FOR ( id = superexpresion forAux ; superexpresion forAux2 ) bloque forAux3 .)
    FOR             reduce using rule 44 (for -> FOR ( id = superexpresion forAux ; superexpresion forAux2 ) bloque forAux3 .)
    FACT            reduce using rule 44 (for -> FOR ( id = superexpresion forAux ; superexpresion forAux2 ) bloque forAux3 .)
    FIBONACCI       reduce using rule 44 (for -> FOR ( id = superexpresion forAux ; superexpresion forAux2 ) bloque forAux3 .)
    CUADRATICA      reduce using rule 44 (for -> FOR ( id = superexpresion forAux ; superexpresion forAux2 ) bloque forAux3 .)
    RAIZ            reduce using rule 44 (for -> FOR ( id = superexpresion forAux ; superexpresion forAux2 ) bloque forAux3 .)
    ID              reduce using rule 44 (for -> FOR ( id = superexpresion forAux ; superexpresion forAux2 ) bloque forAux3 .)
    INT             reduce using rule 44 (for -> FOR ( id = superexpresion forAux ; superexpresion forAux2 ) bloque forAux3 .)
    FLOAT           reduce using rule 44 (for -> FOR ( id = superexpresion forAux ; superexpresion forAux2 ) bloque forAux3 .)
    CHAR            reduce using rule 44 (for -> FOR ( id = superexpresion forAux ; superexpresion forAux2 ) bloque forAux3 .)
    }               reduce using rule 44 (for -> FOR ( id = superexpresion forAux ; superexpresion forAux2 ) bloque forAux3 .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for FUNCTION in state 5 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 13 resolved as shift
WARNING: shift/reduce conflict for INT in state 25 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 25 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 25 resolved as shift
WARNING: shift/reduce conflict for INT in state 47 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 47 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 47 resolved as shift
WARNING: shift/reduce conflict for IF in state 52 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 52 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 52 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 52 resolved as shift
WARNING: shift/reduce conflict for FOR in state 52 resolved as shift
WARNING: shift/reduce conflict for FACT in state 52 resolved as shift
WARNING: shift/reduce conflict for FIBONACCI in state 52 resolved as shift
WARNING: shift/reduce conflict for CUADRATICA in state 52 resolved as shift
WARNING: shift/reduce conflict for RAIZ in state 52 resolved as shift
WARNING: shift/reduce conflict for ID in state 52 resolved as shift
WARNING: shift/reduce conflict for INT in state 52 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 52 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 52 resolved as shift
WARNING: shift/reduce conflict for IF in state 60 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 60 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 60 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 60 resolved as shift
WARNING: shift/reduce conflict for FOR in state 60 resolved as shift
WARNING: shift/reduce conflict for FACT in state 60 resolved as shift
WARNING: shift/reduce conflict for FIBONACCI in state 60 resolved as shift
WARNING: shift/reduce conflict for CUADRATICA in state 60 resolved as shift
WARNING: shift/reduce conflict for RAIZ in state 60 resolved as shift
WARNING: shift/reduce conflict for ID in state 60 resolved as shift
WARNING: shift/reduce conflict for INT in state 60 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 60 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 60 resolved as shift
WARNING: reduce/reduce conflict in state 14 resolved using rule (programaF -> empty)
WARNING: rejected rule (function -> empty) in state 14
WARNING: reduce/reduce conflict in state 61 resolved using rule (estatutop -> empty)
WARNING: rejected rule (estatuto -> empty) in state 61
WARNING: reduce/reduce conflict in state 61 resolved using rule (estatuto -> empty)
WARNING: rejected rule (varsp -> empty) in state 61
WARNING: reduce/reduce conflict in state 61 resolved using rule (estatutop -> empty)
WARNING: rejected rule (varsp -> empty) in state 61
