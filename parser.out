Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> programa
Rule 1     programa -> ID primerCuad ; vars programaF main
Rule 2     primerCuad -> <empty>
Rule 3     main -> MAIN llenarCuad ( ) bloque
Rule 4     llenarCuad -> <empty>
Rule 5     programaF -> function programaF
Rule 6     programaF -> empty
Rule 7     function -> FUNCTION tipoRetorno ID ( functionParam ) functionAux bloque functionAux2
Rule 8     function -> empty
Rule 9     functionAux -> <empty>
Rule 10    functionAux2 -> <empty>
Rule 11    tipoRetorno -> INT
Rule 12    tipoRetorno -> FLOAT
Rule 13    tipoRetorno -> VOID
Rule 14    bloque -> { cuerpo }
Rule 15    cuerpo -> vars estatutop
Rule 16    estatutop -> estatuto estatutop
Rule 17    estatutop -> empty
Rule 18    estatuto -> asignacion
Rule 19    estatuto -> condicion
Rule 20    estatuto -> write
Rule 21    estatuto -> while
Rule 22    estatuto -> return
Rule 23    estatuto -> for
Rule 24    estatuto -> id ;
Rule 25    estatuto -> empty
Rule 26    return -> RETURN superexpresion ;
Rule 27    condicion -> IF ( superexpresion ) condicionAux bloque condicionelse
Rule 28    condicionAux -> <empty>
Rule 29    condicionelse -> ELSE condicionelseAux bloque
Rule 30    condicionelse -> empty
Rule 31    condicionelseAux -> <empty>
Rule 32    write -> WRITE ( writep ) ;
Rule 33    writep -> superexpresion writepAux writepp
Rule 34    writep -> LETRERO writepAux2 writepp
Rule 35    writepAux -> <empty>
Rule 36    writepAux2 -> <empty>
Rule 37    writepp -> , writeppAux writep
Rule 38    writepp -> empty writeppAux
Rule 39    writeppAux -> <empty>
Rule 40    for -> FOR ( id = superexpresion forAux ; superexpresion forAux2 ) bloque forAux3
Rule 41    forAux -> <empty>
Rule 42    forAux2 -> <empty>
Rule 43    forAux3 -> <empty>
Rule 44    while -> WHILE whileAux ( superexpresion ) whileAux2 bloque
Rule 45    whileAux -> <empty>
Rule 46    whileAux2 -> <empty>
Rule 47    asignacion -> vars
Rule 48    asignacion -> id asignacionp
Rule 49    asignacionp -> = superexpresion ;
Rule 50    asignacionp -> [ superexpresion ] = superexpresion ;
Rule 51    superexpresion -> megaexpresion superexpresionp
Rule 52    superexpresionp -> AND superexpresion
Rule 53    superexpresionp -> OR superexpresion
Rule 54    superexpresionp -> empty
Rule 55    megaexpresion -> exp megaexpresionp
Rule 56    megaexpresionp -> < exp
Rule 57    megaexpresionp -> > exp
Rule 58    megaexpresionp -> EQUALS exp
Rule 59    megaexpresionp -> DIFF exp
Rule 60    megaexpresionp -> LTHANEQ exp
Rule 61    megaexpresionp -> GTHANEQ exp
Rule 62    megaexpresionp -> empty
Rule 63    exp -> termino expp
Rule 64    expp -> + pAppT exp
Rule 65    expp -> - pAppT exp
Rule 66    expp -> empty
Rule 67    pAppT -> <empty>
Rule 68    termino -> factor terminop
Rule 69    terminop -> * pAppF termino
Rule 70    terminop -> / pAppF termino
Rule 71    terminop -> empty
Rule 72    pAppF -> <empty>
Rule 73    factor -> constante
Rule 74    factor -> lParen superexpresion rParen
Rule 75    lParen -> (
Rule 76    rParen -> )
Rule 77    constante -> id
Rule 78    constante -> CTEF ctef
Rule 79    constante -> CTEI ctei
Rule 80    ctef -> <empty>
Rule 81    ctei -> <empty>
Rule 82    functionParam -> parametro
Rule 83    functionParam -> empty
Rule 84    parametro -> tipo ID parametrop
Rule 85    parametrop -> , parametro
Rule 86    parametrop -> empty
Rule 87    vars -> varsp
Rule 88    varsp -> tipo varspp ; varsp
Rule 89    varsp -> empty
Rule 90    varspp -> ID varsppp
Rule 91    varsppp -> , varspp
Rule 92    varsppp -> empty
Rule 93    tipo -> INT
Rule 94    tipo -> FLOAT
Rule 95    tipo -> CHAR
Rule 96    id -> ID idp
Rule 97    idp -> ( idpp )
Rule 98    idp -> [ superexpresion ]
Rule 99    idp -> empty
Rule 100   idpp -> superexpresion idppp
Rule 101   idpp -> empty
Rule 102   idppp -> , idpp
Rule 103   idppp -> empty
Rule 104   empty -> <empty>

Terminals, with rules where they appear

(                    : 3 7 27 32 40 44 75 97
)                    : 3 7 27 32 40 44 76 97
*                    : 69
+                    : 64
,                    : 37 85 91 102
-                    : 65
/                    : 70
;                    : 1 24 26 32 40 49 50 88
<                    : 56
=                    : 40 49 50
>                    : 57
AND                  : 52
CHAR                 : 95
CTEF                 : 78
CTEI                 : 79
DIFF                 : 59
ELSE                 : 29
EQUALS               : 58
FLOAT                : 12 94
FOR                  : 40
FUNCTION             : 7
GTHANEQ              : 61
ID                   : 1 7 84 90 96
IF                   : 27
INT                  : 11 93
LETRERO              : 34
LTHANEQ              : 60
MAIN                 : 3
OR                   : 53
RETURN               : 26
VOID                 : 13
WHILE                : 44
WRITE                : 32
[                    : 50 98
]                    : 50 98
error                : 
{                    : 14
}                    : 14

Nonterminals, with rules where they appear

asignacion           : 18
asignacionp          : 48
bloque               : 3 7 27 29 40 44
condicion            : 19
condicionAux         : 27
condicionelse        : 27
condicionelseAux     : 29
constante            : 73
ctef                 : 78
ctei                 : 79
cuerpo               : 14
empty                : 6 8 17 25 30 38 54 62 66 71 83 86 89 92 99 101 103
estatuto             : 16
estatutop            : 15 16
exp                  : 55 56 57 58 59 60 61 64 65
expp                 : 63
factor               : 68
for                  : 23
forAux               : 40
forAux2              : 40
forAux3              : 40
function             : 5
functionAux          : 7
functionAux2         : 7
functionParam        : 7
id                   : 24 40 48 77
idp                  : 96
idpp                 : 97 102
idppp                : 100
lParen               : 74
llenarCuad           : 3
main                 : 1
megaexpresion        : 51
megaexpresionp       : 55
pAppF                : 69 70
pAppT                : 64 65
parametro            : 82 85
parametrop           : 84
primerCuad           : 1
programa             : 0
programaF            : 1 5
rParen               : 74
return               : 22
superexpresion       : 26 27 33 40 40 44 49 50 50 52 53 74 98 100
superexpresionp      : 51
termino              : 63 69 70
terminop             : 68
tipo                 : 84 88
tipoRetorno          : 7
vars                 : 1 15 47
varsp                : 87 88
varspp               : 88 91
varsppp              : 90
while                : 21
whileAux             : 44
whileAux2            : 44
write                : 20
writep               : 32 37
writepAux            : 33
writepAux2           : 34
writepp              : 33 34
writeppAux           : 37 38

Parsing method: LALR

state 0

    (0) S' -> . programa
    (1) programa -> . ID primerCuad ; vars programaF main

    ID              shift and go to state 2

    programa                       shift and go to state 1

state 1

    (0) S' -> programa .



state 2

    (1) programa -> ID . primerCuad ; vars programaF main
    (2) primerCuad -> .

    ;               reduce using rule 2 (primerCuad -> .)

    primerCuad                     shift and go to state 3

state 3

    (1) programa -> ID primerCuad . ; vars programaF main

    ;               shift and go to state 4


state 4

    (1) programa -> ID primerCuad ; . vars programaF main
    (87) vars -> . varsp
    (88) varsp -> . tipo varspp ; varsp
    (89) varsp -> . empty
    (93) tipo -> . INT
    (94) tipo -> . FLOAT
    (95) tipo -> . CHAR
    (104) empty -> .

    INT             shift and go to state 9
    FLOAT           shift and go to state 10
    CHAR            shift and go to state 11
    FUNCTION        reduce using rule 104 (empty -> .)
    MAIN            reduce using rule 104 (empty -> .)

    vars                           shift and go to state 5
    varsp                          shift and go to state 6
    tipo                           shift and go to state 7
    empty                          shift and go to state 8

state 5

    (1) programa -> ID primerCuad ; vars . programaF main
    (5) programaF -> . function programaF
    (6) programaF -> . empty
    (7) function -> . FUNCTION tipoRetorno ID ( functionParam ) functionAux bloque functionAux2
    (8) function -> . empty
    (104) empty -> .

  ! shift/reduce conflict for FUNCTION resolved as shift
    FUNCTION        shift and go to state 15
    MAIN            reduce using rule 104 (empty -> .)

  ! FUNCTION        [ reduce using rule 104 (empty -> .) ]

    programaF                      shift and go to state 12
    function                       shift and go to state 13
    empty                          shift and go to state 14

state 6

    (87) vars -> varsp .

    FUNCTION        reduce using rule 87 (vars -> varsp .)
    MAIN            reduce using rule 87 (vars -> varsp .)
    IF              reduce using rule 87 (vars -> varsp .)
    WRITE           reduce using rule 87 (vars -> varsp .)
    WHILE           reduce using rule 87 (vars -> varsp .)
    RETURN          reduce using rule 87 (vars -> varsp .)
    FOR             reduce using rule 87 (vars -> varsp .)
    ID              reduce using rule 87 (vars -> varsp .)
    INT             reduce using rule 87 (vars -> varsp .)
    FLOAT           reduce using rule 87 (vars -> varsp .)
    CHAR            reduce using rule 87 (vars -> varsp .)
    }               reduce using rule 87 (vars -> varsp .)


state 7

    (88) varsp -> tipo . varspp ; varsp
    (90) varspp -> . ID varsppp

    ID              shift and go to state 17

    varspp                         shift and go to state 16

state 8

    (89) varsp -> empty .

    FUNCTION        reduce using rule 89 (varsp -> empty .)
    MAIN            reduce using rule 89 (varsp -> empty .)
    IF              reduce using rule 89 (varsp -> empty .)
    WRITE           reduce using rule 89 (varsp -> empty .)
    WHILE           reduce using rule 89 (varsp -> empty .)
    RETURN          reduce using rule 89 (varsp -> empty .)
    FOR             reduce using rule 89 (varsp -> empty .)
    ID              reduce using rule 89 (varsp -> empty .)
    INT             reduce using rule 89 (varsp -> empty .)
    FLOAT           reduce using rule 89 (varsp -> empty .)
    CHAR            reduce using rule 89 (varsp -> empty .)
    }               reduce using rule 89 (varsp -> empty .)


state 9

    (93) tipo -> INT .

    ID              reduce using rule 93 (tipo -> INT .)


state 10

    (94) tipo -> FLOAT .

    ID              reduce using rule 94 (tipo -> FLOAT .)


state 11

    (95) tipo -> CHAR .

    ID              reduce using rule 95 (tipo -> CHAR .)


state 12

    (1) programa -> ID primerCuad ; vars programaF . main
    (3) main -> . MAIN llenarCuad ( ) bloque

    MAIN            shift and go to state 19

    main                           shift and go to state 18

state 13

    (5) programaF -> function . programaF
    (5) programaF -> . function programaF
    (6) programaF -> . empty
    (7) function -> . FUNCTION tipoRetorno ID ( functionParam ) functionAux bloque functionAux2
    (8) function -> . empty
    (104) empty -> .

  ! shift/reduce conflict for FUNCTION resolved as shift
    FUNCTION        shift and go to state 15
    MAIN            reduce using rule 104 (empty -> .)

  ! FUNCTION        [ reduce using rule 104 (empty -> .) ]

    function                       shift and go to state 13
    programaF                      shift and go to state 20
    empty                          shift and go to state 14

state 14

    (6) programaF -> empty .
    (8) function -> empty .

  ! reduce/reduce conflict for MAIN resolved using rule 6 (programaF -> empty .)
    MAIN            reduce using rule 6 (programaF -> empty .)
    FUNCTION        reduce using rule 8 (function -> empty .)

  ! MAIN            [ reduce using rule 8 (function -> empty .) ]


state 15

    (7) function -> FUNCTION . tipoRetorno ID ( functionParam ) functionAux bloque functionAux2
    (11) tipoRetorno -> . INT
    (12) tipoRetorno -> . FLOAT
    (13) tipoRetorno -> . VOID

    INT             shift and go to state 22
    FLOAT           shift and go to state 23
    VOID            shift and go to state 24

    tipoRetorno                    shift and go to state 21

state 16

    (88) varsp -> tipo varspp . ; varsp

    ;               shift and go to state 25


state 17

    (90) varspp -> ID . varsppp
    (91) varsppp -> . , varspp
    (92) varsppp -> . empty
    (104) empty -> .

    ,               shift and go to state 27
    ;               reduce using rule 104 (empty -> .)

    varsppp                        shift and go to state 26
    empty                          shift and go to state 28

state 18

    (1) programa -> ID primerCuad ; vars programaF main .

    $end            reduce using rule 1 (programa -> ID primerCuad ; vars programaF main .)


state 19

    (3) main -> MAIN . llenarCuad ( ) bloque
    (4) llenarCuad -> .

    (               reduce using rule 4 (llenarCuad -> .)

    llenarCuad                     shift and go to state 29

state 20

    (5) programaF -> function programaF .

    MAIN            reduce using rule 5 (programaF -> function programaF .)


state 21

    (7) function -> FUNCTION tipoRetorno . ID ( functionParam ) functionAux bloque functionAux2

    ID              shift and go to state 30


state 22

    (11) tipoRetorno -> INT .

    ID              reduce using rule 11 (tipoRetorno -> INT .)


state 23

    (12) tipoRetorno -> FLOAT .

    ID              reduce using rule 12 (tipoRetorno -> FLOAT .)


state 24

    (13) tipoRetorno -> VOID .

    ID              reduce using rule 13 (tipoRetorno -> VOID .)


state 25

    (88) varsp -> tipo varspp ; . varsp
    (88) varsp -> . tipo varspp ; varsp
    (89) varsp -> . empty
    (93) tipo -> . INT
    (94) tipo -> . FLOAT
    (95) tipo -> . CHAR
    (104) empty -> .

  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
    INT             shift and go to state 9
    FLOAT           shift and go to state 10
    CHAR            shift and go to state 11
    FUNCTION        reduce using rule 104 (empty -> .)
    MAIN            reduce using rule 104 (empty -> .)
    IF              reduce using rule 104 (empty -> .)
    WRITE           reduce using rule 104 (empty -> .)
    WHILE           reduce using rule 104 (empty -> .)
    RETURN          reduce using rule 104 (empty -> .)
    FOR             reduce using rule 104 (empty -> .)
    ID              reduce using rule 104 (empty -> .)
    }               reduce using rule 104 (empty -> .)

  ! INT             [ reduce using rule 104 (empty -> .) ]
  ! FLOAT           [ reduce using rule 104 (empty -> .) ]
  ! CHAR            [ reduce using rule 104 (empty -> .) ]

    tipo                           shift and go to state 7
    varsp                          shift and go to state 31
    empty                          shift and go to state 8

state 26

    (90) varspp -> ID varsppp .

    ;               reduce using rule 90 (varspp -> ID varsppp .)


state 27

    (91) varsppp -> , . varspp
    (90) varspp -> . ID varsppp

    ID              shift and go to state 17

    varspp                         shift and go to state 32

state 28

    (92) varsppp -> empty .

    ;               reduce using rule 92 (varsppp -> empty .)


state 29

    (3) main -> MAIN llenarCuad . ( ) bloque

    (               shift and go to state 33


state 30

    (7) function -> FUNCTION tipoRetorno ID . ( functionParam ) functionAux bloque functionAux2

    (               shift and go to state 34


state 31

    (88) varsp -> tipo varspp ; varsp .

    FUNCTION        reduce using rule 88 (varsp -> tipo varspp ; varsp .)
    MAIN            reduce using rule 88 (varsp -> tipo varspp ; varsp .)
    IF              reduce using rule 88 (varsp -> tipo varspp ; varsp .)
    WRITE           reduce using rule 88 (varsp -> tipo varspp ; varsp .)
    WHILE           reduce using rule 88 (varsp -> tipo varspp ; varsp .)
    RETURN          reduce using rule 88 (varsp -> tipo varspp ; varsp .)
    FOR             reduce using rule 88 (varsp -> tipo varspp ; varsp .)
    ID              reduce using rule 88 (varsp -> tipo varspp ; varsp .)
    INT             reduce using rule 88 (varsp -> tipo varspp ; varsp .)
    FLOAT           reduce using rule 88 (varsp -> tipo varspp ; varsp .)
    CHAR            reduce using rule 88 (varsp -> tipo varspp ; varsp .)
    }               reduce using rule 88 (varsp -> tipo varspp ; varsp .)


state 32

    (91) varsppp -> , varspp .

    ;               reduce using rule 91 (varsppp -> , varspp .)


state 33

    (3) main -> MAIN llenarCuad ( . ) bloque

    )               shift and go to state 35


state 34

    (7) function -> FUNCTION tipoRetorno ID ( . functionParam ) functionAux bloque functionAux2
    (82) functionParam -> . parametro
    (83) functionParam -> . empty
    (84) parametro -> . tipo ID parametrop
    (104) empty -> .
    (93) tipo -> . INT
    (94) tipo -> . FLOAT
    (95) tipo -> . CHAR

    )               reduce using rule 104 (empty -> .)
    INT             shift and go to state 9
    FLOAT           shift and go to state 10
    CHAR            shift and go to state 11

    functionParam                  shift and go to state 36
    parametro                      shift and go to state 37
    empty                          shift and go to state 38
    tipo                           shift and go to state 39

state 35

    (3) main -> MAIN llenarCuad ( ) . bloque
    (14) bloque -> . { cuerpo }

    {               shift and go to state 41

    bloque                         shift and go to state 40

state 36

    (7) function -> FUNCTION tipoRetorno ID ( functionParam . ) functionAux bloque functionAux2

    )               shift and go to state 42


state 37

    (82) functionParam -> parametro .

    )               reduce using rule 82 (functionParam -> parametro .)


state 38

    (83) functionParam -> empty .

    )               reduce using rule 83 (functionParam -> empty .)


state 39

    (84) parametro -> tipo . ID parametrop

    ID              shift and go to state 43


state 40

    (3) main -> MAIN llenarCuad ( ) bloque .

    $end            reduce using rule 3 (main -> MAIN llenarCuad ( ) bloque .)


state 41

    (14) bloque -> { . cuerpo }
    (15) cuerpo -> . vars estatutop
    (87) vars -> . varsp
    (88) varsp -> . tipo varspp ; varsp
    (89) varsp -> . empty
    (93) tipo -> . INT
    (94) tipo -> . FLOAT
    (95) tipo -> . CHAR
    (104) empty -> .

  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
    INT             shift and go to state 9
    FLOAT           shift and go to state 10
    CHAR            shift and go to state 11
    IF              reduce using rule 104 (empty -> .)
    WRITE           reduce using rule 104 (empty -> .)
    WHILE           reduce using rule 104 (empty -> .)
    RETURN          reduce using rule 104 (empty -> .)
    FOR             reduce using rule 104 (empty -> .)
    ID              reduce using rule 104 (empty -> .)
    }               reduce using rule 104 (empty -> .)

  ! INT             [ reduce using rule 104 (empty -> .) ]
  ! FLOAT           [ reduce using rule 104 (empty -> .) ]
  ! CHAR            [ reduce using rule 104 (empty -> .) ]

    cuerpo                         shift and go to state 44
    vars                           shift and go to state 45
    varsp                          shift and go to state 6
    tipo                           shift and go to state 7
    empty                          shift and go to state 8

state 42

    (7) function -> FUNCTION tipoRetorno ID ( functionParam ) . functionAux bloque functionAux2
    (9) functionAux -> .

    {               reduce using rule 9 (functionAux -> .)

    functionAux                    shift and go to state 46

state 43

    (84) parametro -> tipo ID . parametrop
    (85) parametrop -> . , parametro
    (86) parametrop -> . empty
    (104) empty -> .

    ,               shift and go to state 48
    )               reduce using rule 104 (empty -> .)

    parametrop                     shift and go to state 47
    empty                          shift and go to state 49

state 44

    (14) bloque -> { cuerpo . }

    }               shift and go to state 50


state 45

    (15) cuerpo -> vars . estatutop
    (16) estatutop -> . estatuto estatutop
    (17) estatutop -> . empty
    (18) estatuto -> . asignacion
    (19) estatuto -> . condicion
    (20) estatuto -> . write
    (21) estatuto -> . while
    (22) estatuto -> . return
    (23) estatuto -> . for
    (24) estatuto -> . id ;
    (25) estatuto -> . empty
    (104) empty -> .
    (47) asignacion -> . vars
    (48) asignacion -> . id asignacionp
    (27) condicion -> . IF ( superexpresion ) condicionAux bloque condicionelse
    (32) write -> . WRITE ( writep ) ;
    (44) while -> . WHILE whileAux ( superexpresion ) whileAux2 bloque
    (26) return -> . RETURN superexpresion ;
    (40) for -> . FOR ( id = superexpresion forAux ; superexpresion forAux2 ) bloque forAux3
    (96) id -> . ID idp
    (87) vars -> . varsp
    (88) varsp -> . tipo varspp ; varsp
    (89) varsp -> . empty
    (93) tipo -> . INT
    (94) tipo -> . FLOAT
    (95) tipo -> . CHAR

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
    }               reduce using rule 104 (empty -> .)
    IF              shift and go to state 62
    WRITE           shift and go to state 63
    WHILE           shift and go to state 64
    RETURN          shift and go to state 65
    FOR             shift and go to state 66
    ID              shift and go to state 67
    INT             shift and go to state 9
    FLOAT           shift and go to state 10
    CHAR            shift and go to state 11

  ! IF              [ reduce using rule 104 (empty -> .) ]
  ! WRITE           [ reduce using rule 104 (empty -> .) ]
  ! WHILE           [ reduce using rule 104 (empty -> .) ]
  ! RETURN          [ reduce using rule 104 (empty -> .) ]
  ! FOR             [ reduce using rule 104 (empty -> .) ]
  ! ID              [ reduce using rule 104 (empty -> .) ]
  ! INT             [ reduce using rule 104 (empty -> .) ]
  ! FLOAT           [ reduce using rule 104 (empty -> .) ]
  ! CHAR            [ reduce using rule 104 (empty -> .) ]

    vars                           shift and go to state 51
    estatutop                      shift and go to state 52
    estatuto                       shift and go to state 53
    empty                          shift and go to state 54
    asignacion                     shift and go to state 55
    condicion                      shift and go to state 56
    write                          shift and go to state 57
    while                          shift and go to state 58
    return                         shift and go to state 59
    for                            shift and go to state 60
    id                             shift and go to state 61
    varsp                          shift and go to state 6
    tipo                           shift and go to state 7

state 46

    (7) function -> FUNCTION tipoRetorno ID ( functionParam ) functionAux . bloque functionAux2
    (14) bloque -> . { cuerpo }

    {               shift and go to state 41

    bloque                         shift and go to state 68

state 47

    (84) parametro -> tipo ID parametrop .

    )               reduce using rule 84 (parametro -> tipo ID parametrop .)


state 48

    (85) parametrop -> , . parametro
    (84) parametro -> . tipo ID parametrop
    (93) tipo -> . INT
    (94) tipo -> . FLOAT
    (95) tipo -> . CHAR

    INT             shift and go to state 9
    FLOAT           shift and go to state 10
    CHAR            shift and go to state 11

    parametro                      shift and go to state 69
    tipo                           shift and go to state 39

state 49

    (86) parametrop -> empty .

    )               reduce using rule 86 (parametrop -> empty .)


state 50

    (14) bloque -> { cuerpo } .

    $end            reduce using rule 14 (bloque -> { cuerpo } .)
    FUNCTION        reduce using rule 14 (bloque -> { cuerpo } .)
    MAIN            reduce using rule 14 (bloque -> { cuerpo } .)
    ELSE            reduce using rule 14 (bloque -> { cuerpo } .)
    IF              reduce using rule 14 (bloque -> { cuerpo } .)
    WRITE           reduce using rule 14 (bloque -> { cuerpo } .)
    WHILE           reduce using rule 14 (bloque -> { cuerpo } .)
    RETURN          reduce using rule 14 (bloque -> { cuerpo } .)
    FOR             reduce using rule 14 (bloque -> { cuerpo } .)
    ID              reduce using rule 14 (bloque -> { cuerpo } .)
    INT             reduce using rule 14 (bloque -> { cuerpo } .)
    FLOAT           reduce using rule 14 (bloque -> { cuerpo } .)
    CHAR            reduce using rule 14 (bloque -> { cuerpo } .)
    }               reduce using rule 14 (bloque -> { cuerpo } .)


state 51

    (47) asignacion -> vars .

    IF              reduce using rule 47 (asignacion -> vars .)
    WRITE           reduce using rule 47 (asignacion -> vars .)
    WHILE           reduce using rule 47 (asignacion -> vars .)
    RETURN          reduce using rule 47 (asignacion -> vars .)
    FOR             reduce using rule 47 (asignacion -> vars .)
    ID              reduce using rule 47 (asignacion -> vars .)
    INT             reduce using rule 47 (asignacion -> vars .)
    FLOAT           reduce using rule 47 (asignacion -> vars .)
    CHAR            reduce using rule 47 (asignacion -> vars .)
    }               reduce using rule 47 (asignacion -> vars .)


state 52

    (15) cuerpo -> vars estatutop .

    }               reduce using rule 15 (cuerpo -> vars estatutop .)


state 53

    (16) estatutop -> estatuto . estatutop
    (16) estatutop -> . estatuto estatutop
    (17) estatutop -> . empty
    (18) estatuto -> . asignacion
    (19) estatuto -> . condicion
    (20) estatuto -> . write
    (21) estatuto -> . while
    (22) estatuto -> . return
    (23) estatuto -> . for
    (24) estatuto -> . id ;
    (25) estatuto -> . empty
    (104) empty -> .
    (47) asignacion -> . vars
    (48) asignacion -> . id asignacionp
    (27) condicion -> . IF ( superexpresion ) condicionAux bloque condicionelse
    (32) write -> . WRITE ( writep ) ;
    (44) while -> . WHILE whileAux ( superexpresion ) whileAux2 bloque
    (26) return -> . RETURN superexpresion ;
    (40) for -> . FOR ( id = superexpresion forAux ; superexpresion forAux2 ) bloque forAux3
    (96) id -> . ID idp
    (87) vars -> . varsp
    (88) varsp -> . tipo varspp ; varsp
    (89) varsp -> . empty
    (93) tipo -> . INT
    (94) tipo -> . FLOAT
    (95) tipo -> . CHAR

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
    }               reduce using rule 104 (empty -> .)
    IF              shift and go to state 62
    WRITE           shift and go to state 63
    WHILE           shift and go to state 64
    RETURN          shift and go to state 65
    FOR             shift and go to state 66
    ID              shift and go to state 67
    INT             shift and go to state 9
    FLOAT           shift and go to state 10
    CHAR            shift and go to state 11

  ! IF              [ reduce using rule 104 (empty -> .) ]
  ! WRITE           [ reduce using rule 104 (empty -> .) ]
  ! WHILE           [ reduce using rule 104 (empty -> .) ]
  ! RETURN          [ reduce using rule 104 (empty -> .) ]
  ! FOR             [ reduce using rule 104 (empty -> .) ]
  ! ID              [ reduce using rule 104 (empty -> .) ]
  ! INT             [ reduce using rule 104 (empty -> .) ]
  ! FLOAT           [ reduce using rule 104 (empty -> .) ]
  ! CHAR            [ reduce using rule 104 (empty -> .) ]

    estatuto                       shift and go to state 53
    estatutop                      shift and go to state 70
    empty                          shift and go to state 54
    asignacion                     shift and go to state 55
    condicion                      shift and go to state 56
    write                          shift and go to state 57
    while                          shift and go to state 58
    return                         shift and go to state 59
    for                            shift and go to state 60
    id                             shift and go to state 61
    vars                           shift and go to state 51
    varsp                          shift and go to state 6
    tipo                           shift and go to state 7

state 54

    (17) estatutop -> empty .
    (25) estatuto -> empty .
    (89) varsp -> empty .

  ! reduce/reduce conflict for } resolved using rule 17 (estatutop -> empty .)
  ! reduce/reduce conflict for IF resolved using rule 25 (estatuto -> empty .)
  ! reduce/reduce conflict for WRITE resolved using rule 25 (estatuto -> empty .)
  ! reduce/reduce conflict for WHILE resolved using rule 25 (estatuto -> empty .)
  ! reduce/reduce conflict for RETURN resolved using rule 25 (estatuto -> empty .)
  ! reduce/reduce conflict for FOR resolved using rule 25 (estatuto -> empty .)
  ! reduce/reduce conflict for ID resolved using rule 25 (estatuto -> empty .)
  ! reduce/reduce conflict for INT resolved using rule 25 (estatuto -> empty .)
  ! reduce/reduce conflict for FLOAT resolved using rule 25 (estatuto -> empty .)
  ! reduce/reduce conflict for CHAR resolved using rule 25 (estatuto -> empty .)
  ! reduce/reduce conflict for } resolved using rule 17 (estatutop -> empty .)
    }               reduce using rule 17 (estatutop -> empty .)
    IF              reduce using rule 25 (estatuto -> empty .)
    WRITE           reduce using rule 25 (estatuto -> empty .)
    WHILE           reduce using rule 25 (estatuto -> empty .)
    RETURN          reduce using rule 25 (estatuto -> empty .)
    FOR             reduce using rule 25 (estatuto -> empty .)
    ID              reduce using rule 25 (estatuto -> empty .)
    INT             reduce using rule 25 (estatuto -> empty .)
    FLOAT           reduce using rule 25 (estatuto -> empty .)
    CHAR            reduce using rule 25 (estatuto -> empty .)

  ! }               [ reduce using rule 25 (estatuto -> empty .) ]
  ! IF              [ reduce using rule 89 (varsp -> empty .) ]
  ! WRITE           [ reduce using rule 89 (varsp -> empty .) ]
  ! WHILE           [ reduce using rule 89 (varsp -> empty .) ]
  ! RETURN          [ reduce using rule 89 (varsp -> empty .) ]
  ! FOR             [ reduce using rule 89 (varsp -> empty .) ]
  ! ID              [ reduce using rule 89 (varsp -> empty .) ]
  ! INT             [ reduce using rule 89 (varsp -> empty .) ]
  ! FLOAT           [ reduce using rule 89 (varsp -> empty .) ]
  ! CHAR            [ reduce using rule 89 (varsp -> empty .) ]
  ! }               [ reduce using rule 89 (varsp -> empty .) ]


state 55

    (18) estatuto -> asignacion .

    IF              reduce using rule 18 (estatuto -> asignacion .)
    WRITE           reduce using rule 18 (estatuto -> asignacion .)
    WHILE           reduce using rule 18 (estatuto -> asignacion .)
    RETURN          reduce using rule 18 (estatuto -> asignacion .)
    FOR             reduce using rule 18 (estatuto -> asignacion .)
    ID              reduce using rule 18 (estatuto -> asignacion .)
    INT             reduce using rule 18 (estatuto -> asignacion .)
    FLOAT           reduce using rule 18 (estatuto -> asignacion .)
    CHAR            reduce using rule 18 (estatuto -> asignacion .)
    }               reduce using rule 18 (estatuto -> asignacion .)


state 56

    (19) estatuto -> condicion .

    IF              reduce using rule 19 (estatuto -> condicion .)
    WRITE           reduce using rule 19 (estatuto -> condicion .)
    WHILE           reduce using rule 19 (estatuto -> condicion .)
    RETURN          reduce using rule 19 (estatuto -> condicion .)
    FOR             reduce using rule 19 (estatuto -> condicion .)
    ID              reduce using rule 19 (estatuto -> condicion .)
    INT             reduce using rule 19 (estatuto -> condicion .)
    FLOAT           reduce using rule 19 (estatuto -> condicion .)
    CHAR            reduce using rule 19 (estatuto -> condicion .)
    }               reduce using rule 19 (estatuto -> condicion .)


state 57

    (20) estatuto -> write .

    IF              reduce using rule 20 (estatuto -> write .)
    WRITE           reduce using rule 20 (estatuto -> write .)
    WHILE           reduce using rule 20 (estatuto -> write .)
    RETURN          reduce using rule 20 (estatuto -> write .)
    FOR             reduce using rule 20 (estatuto -> write .)
    ID              reduce using rule 20 (estatuto -> write .)
    INT             reduce using rule 20 (estatuto -> write .)
    FLOAT           reduce using rule 20 (estatuto -> write .)
    CHAR            reduce using rule 20 (estatuto -> write .)
    }               reduce using rule 20 (estatuto -> write .)


state 58

    (21) estatuto -> while .

    IF              reduce using rule 21 (estatuto -> while .)
    WRITE           reduce using rule 21 (estatuto -> while .)
    WHILE           reduce using rule 21 (estatuto -> while .)
    RETURN          reduce using rule 21 (estatuto -> while .)
    FOR             reduce using rule 21 (estatuto -> while .)
    ID              reduce using rule 21 (estatuto -> while .)
    INT             reduce using rule 21 (estatuto -> while .)
    FLOAT           reduce using rule 21 (estatuto -> while .)
    CHAR            reduce using rule 21 (estatuto -> while .)
    }               reduce using rule 21 (estatuto -> while .)


state 59

    (22) estatuto -> return .

    IF              reduce using rule 22 (estatuto -> return .)
    WRITE           reduce using rule 22 (estatuto -> return .)
    WHILE           reduce using rule 22 (estatuto -> return .)
    RETURN          reduce using rule 22 (estatuto -> return .)
    FOR             reduce using rule 22 (estatuto -> return .)
    ID              reduce using rule 22 (estatuto -> return .)
    INT             reduce using rule 22 (estatuto -> return .)
    FLOAT           reduce using rule 22 (estatuto -> return .)
    CHAR            reduce using rule 22 (estatuto -> return .)
    }               reduce using rule 22 (estatuto -> return .)


state 60

    (23) estatuto -> for .

    IF              reduce using rule 23 (estatuto -> for .)
    WRITE           reduce using rule 23 (estatuto -> for .)
    WHILE           reduce using rule 23 (estatuto -> for .)
    RETURN          reduce using rule 23 (estatuto -> for .)
    FOR             reduce using rule 23 (estatuto -> for .)
    ID              reduce using rule 23 (estatuto -> for .)
    INT             reduce using rule 23 (estatuto -> for .)
    FLOAT           reduce using rule 23 (estatuto -> for .)
    CHAR            reduce using rule 23 (estatuto -> for .)
    }               reduce using rule 23 (estatuto -> for .)


state 61

    (24) estatuto -> id . ;
    (48) asignacion -> id . asignacionp
    (49) asignacionp -> . = superexpresion ;
    (50) asignacionp -> . [ superexpresion ] = superexpresion ;

    ;               shift and go to state 71
    =               shift and go to state 73
    [               shift and go to state 74

    asignacionp                    shift and go to state 72

state 62

    (27) condicion -> IF . ( superexpresion ) condicionAux bloque condicionelse

    (               shift and go to state 75


state 63

    (32) write -> WRITE . ( writep ) ;

    (               shift and go to state 76


state 64

    (44) while -> WHILE . whileAux ( superexpresion ) whileAux2 bloque
    (45) whileAux -> .

    (               reduce using rule 45 (whileAux -> .)

    whileAux                       shift and go to state 77

state 65

    (26) return -> RETURN . superexpresion ;
    (51) superexpresion -> . megaexpresion superexpresionp
    (55) megaexpresion -> . exp megaexpresionp
    (63) exp -> . termino expp
    (68) termino -> . factor terminop
    (73) factor -> . constante
    (74) factor -> . lParen superexpresion rParen
    (77) constante -> . id
    (78) constante -> . CTEF ctef
    (79) constante -> . CTEI ctei
    (75) lParen -> . (
    (96) id -> . ID idp

    CTEF            shift and go to state 86
    CTEI            shift and go to state 87
    (               shift and go to state 88
    ID              shift and go to state 67

    superexpresion                 shift and go to state 78
    megaexpresion                  shift and go to state 79
    exp                            shift and go to state 80
    termino                        shift and go to state 81
    factor                         shift and go to state 82
    constante                      shift and go to state 83
    lParen                         shift and go to state 84
    id                             shift and go to state 85

state 66

    (40) for -> FOR . ( id = superexpresion forAux ; superexpresion forAux2 ) bloque forAux3

    (               shift and go to state 89


state 67

    (96) id -> ID . idp
    (97) idp -> . ( idpp )
    (98) idp -> . [ superexpresion ]
    (99) idp -> . empty
    (104) empty -> .

  ! shift/reduce conflict for [ resolved as shift
    (               shift and go to state 91
    [               shift and go to state 92
    ;               reduce using rule 104 (empty -> .)
    =               reduce using rule 104 (empty -> .)
    *               reduce using rule 104 (empty -> .)
    /               reduce using rule 104 (empty -> .)
    +               reduce using rule 104 (empty -> .)
    -               reduce using rule 104 (empty -> .)
    <               reduce using rule 104 (empty -> .)
    >               reduce using rule 104 (empty -> .)
    EQUALS          reduce using rule 104 (empty -> .)
    DIFF            reduce using rule 104 (empty -> .)
    LTHANEQ         reduce using rule 104 (empty -> .)
    GTHANEQ         reduce using rule 104 (empty -> .)
    AND             reduce using rule 104 (empty -> .)
    OR              reduce using rule 104 (empty -> .)
    ]               reduce using rule 104 (empty -> .)
    )               reduce using rule 104 (empty -> .)
    ,               reduce using rule 104 (empty -> .)

  ! [               [ reduce using rule 104 (empty -> .) ]

    idp                            shift and go to state 90
    empty                          shift and go to state 93

state 68

    (7) function -> FUNCTION tipoRetorno ID ( functionParam ) functionAux bloque . functionAux2
    (10) functionAux2 -> .

    FUNCTION        reduce using rule 10 (functionAux2 -> .)
    MAIN            reduce using rule 10 (functionAux2 -> .)

    functionAux2                   shift and go to state 94

state 69

    (85) parametrop -> , parametro .

    )               reduce using rule 85 (parametrop -> , parametro .)


state 70

    (16) estatutop -> estatuto estatutop .

    }               reduce using rule 16 (estatutop -> estatuto estatutop .)


state 71

    (24) estatuto -> id ; .

    IF              reduce using rule 24 (estatuto -> id ; .)
    WRITE           reduce using rule 24 (estatuto -> id ; .)
    WHILE           reduce using rule 24 (estatuto -> id ; .)
    RETURN          reduce using rule 24 (estatuto -> id ; .)
    FOR             reduce using rule 24 (estatuto -> id ; .)
    ID              reduce using rule 24 (estatuto -> id ; .)
    INT             reduce using rule 24 (estatuto -> id ; .)
    FLOAT           reduce using rule 24 (estatuto -> id ; .)
    CHAR            reduce using rule 24 (estatuto -> id ; .)
    }               reduce using rule 24 (estatuto -> id ; .)


state 72

    (48) asignacion -> id asignacionp .

    IF              reduce using rule 48 (asignacion -> id asignacionp .)
    WRITE           reduce using rule 48 (asignacion -> id asignacionp .)
    WHILE           reduce using rule 48 (asignacion -> id asignacionp .)
    RETURN          reduce using rule 48 (asignacion -> id asignacionp .)
    FOR             reduce using rule 48 (asignacion -> id asignacionp .)
    ID              reduce using rule 48 (asignacion -> id asignacionp .)
    INT             reduce using rule 48 (asignacion -> id asignacionp .)
    FLOAT           reduce using rule 48 (asignacion -> id asignacionp .)
    CHAR            reduce using rule 48 (asignacion -> id asignacionp .)
    }               reduce using rule 48 (asignacion -> id asignacionp .)


state 73

    (49) asignacionp -> = . superexpresion ;
    (51) superexpresion -> . megaexpresion superexpresionp
    (55) megaexpresion -> . exp megaexpresionp
    (63) exp -> . termino expp
    (68) termino -> . factor terminop
    (73) factor -> . constante
    (74) factor -> . lParen superexpresion rParen
    (77) constante -> . id
    (78) constante -> . CTEF ctef
    (79) constante -> . CTEI ctei
    (75) lParen -> . (
    (96) id -> . ID idp

    CTEF            shift and go to state 86
    CTEI            shift and go to state 87
    (               shift and go to state 88
    ID              shift and go to state 67

    superexpresion                 shift and go to state 95
    megaexpresion                  shift and go to state 79
    exp                            shift and go to state 80
    termino                        shift and go to state 81
    factor                         shift and go to state 82
    constante                      shift and go to state 83
    lParen                         shift and go to state 84
    id                             shift and go to state 85

state 74

    (50) asignacionp -> [ . superexpresion ] = superexpresion ;
    (51) superexpresion -> . megaexpresion superexpresionp
    (55) megaexpresion -> . exp megaexpresionp
    (63) exp -> . termino expp
    (68) termino -> . factor terminop
    (73) factor -> . constante
    (74) factor -> . lParen superexpresion rParen
    (77) constante -> . id
    (78) constante -> . CTEF ctef
    (79) constante -> . CTEI ctei
    (75) lParen -> . (
    (96) id -> . ID idp

    CTEF            shift and go to state 86
    CTEI            shift and go to state 87
    (               shift and go to state 88
    ID              shift and go to state 67

    superexpresion                 shift and go to state 96
    megaexpresion                  shift and go to state 79
    exp                            shift and go to state 80
    termino                        shift and go to state 81
    factor                         shift and go to state 82
    constante                      shift and go to state 83
    lParen                         shift and go to state 84
    id                             shift and go to state 85

state 75

    (27) condicion -> IF ( . superexpresion ) condicionAux bloque condicionelse
    (51) superexpresion -> . megaexpresion superexpresionp
    (55) megaexpresion -> . exp megaexpresionp
    (63) exp -> . termino expp
    (68) termino -> . factor terminop
    (73) factor -> . constante
    (74) factor -> . lParen superexpresion rParen
    (77) constante -> . id
    (78) constante -> . CTEF ctef
    (79) constante -> . CTEI ctei
    (75) lParen -> . (
    (96) id -> . ID idp

    CTEF            shift and go to state 86
    CTEI            shift and go to state 87
    (               shift and go to state 88
    ID              shift and go to state 67

    superexpresion                 shift and go to state 97
    megaexpresion                  shift and go to state 79
    exp                            shift and go to state 80
    termino                        shift and go to state 81
    factor                         shift and go to state 82
    constante                      shift and go to state 83
    lParen                         shift and go to state 84
    id                             shift and go to state 85

state 76

    (32) write -> WRITE ( . writep ) ;
    (33) writep -> . superexpresion writepAux writepp
    (34) writep -> . LETRERO writepAux2 writepp
    (51) superexpresion -> . megaexpresion superexpresionp
    (55) megaexpresion -> . exp megaexpresionp
    (63) exp -> . termino expp
    (68) termino -> . factor terminop
    (73) factor -> . constante
    (74) factor -> . lParen superexpresion rParen
    (77) constante -> . id
    (78) constante -> . CTEF ctef
    (79) constante -> . CTEI ctei
    (75) lParen -> . (
    (96) id -> . ID idp

    LETRERO         shift and go to state 100
    CTEF            shift and go to state 86
    CTEI            shift and go to state 87
    (               shift and go to state 88
    ID              shift and go to state 67

    writep                         shift and go to state 98
    superexpresion                 shift and go to state 99
    megaexpresion                  shift and go to state 79
    exp                            shift and go to state 80
    termino                        shift and go to state 81
    factor                         shift and go to state 82
    constante                      shift and go to state 83
    lParen                         shift and go to state 84
    id                             shift and go to state 85

state 77

    (44) while -> WHILE whileAux . ( superexpresion ) whileAux2 bloque

    (               shift and go to state 101


state 78

    (26) return -> RETURN superexpresion . ;

    ;               shift and go to state 102


state 79

    (51) superexpresion -> megaexpresion . superexpresionp
    (52) superexpresionp -> . AND superexpresion
    (53) superexpresionp -> . OR superexpresion
    (54) superexpresionp -> . empty
    (104) empty -> .

    AND             shift and go to state 104
    OR              shift and go to state 105
    ;               reduce using rule 104 (empty -> .)
    ]               reduce using rule 104 (empty -> .)
    )               reduce using rule 104 (empty -> .)
    ,               reduce using rule 104 (empty -> .)

    superexpresionp                shift and go to state 103
    empty                          shift and go to state 106

state 80

    (55) megaexpresion -> exp . megaexpresionp
    (56) megaexpresionp -> . < exp
    (57) megaexpresionp -> . > exp
    (58) megaexpresionp -> . EQUALS exp
    (59) megaexpresionp -> . DIFF exp
    (60) megaexpresionp -> . LTHANEQ exp
    (61) megaexpresionp -> . GTHANEQ exp
    (62) megaexpresionp -> . empty
    (104) empty -> .

    <               shift and go to state 108
    >               shift and go to state 109
    EQUALS          shift and go to state 110
    DIFF            shift and go to state 111
    LTHANEQ         shift and go to state 112
    GTHANEQ         shift and go to state 113
    AND             reduce using rule 104 (empty -> .)
    OR              reduce using rule 104 (empty -> .)
    ;               reduce using rule 104 (empty -> .)
    ]               reduce using rule 104 (empty -> .)
    )               reduce using rule 104 (empty -> .)
    ,               reduce using rule 104 (empty -> .)

    megaexpresionp                 shift and go to state 107
    empty                          shift and go to state 114

state 81

    (63) exp -> termino . expp
    (64) expp -> . + pAppT exp
    (65) expp -> . - pAppT exp
    (66) expp -> . empty
    (104) empty -> .

    +               shift and go to state 116
    -               shift and go to state 117
    <               reduce using rule 104 (empty -> .)
    >               reduce using rule 104 (empty -> .)
    EQUALS          reduce using rule 104 (empty -> .)
    DIFF            reduce using rule 104 (empty -> .)
    LTHANEQ         reduce using rule 104 (empty -> .)
    GTHANEQ         reduce using rule 104 (empty -> .)
    AND             reduce using rule 104 (empty -> .)
    OR              reduce using rule 104 (empty -> .)
    ;               reduce using rule 104 (empty -> .)
    ]               reduce using rule 104 (empty -> .)
    )               reduce using rule 104 (empty -> .)
    ,               reduce using rule 104 (empty -> .)

    expp                           shift and go to state 115
    empty                          shift and go to state 118

state 82

    (68) termino -> factor . terminop
    (69) terminop -> . * pAppF termino
    (70) terminop -> . / pAppF termino
    (71) terminop -> . empty
    (104) empty -> .

    *               shift and go to state 120
    /               shift and go to state 121
    +               reduce using rule 104 (empty -> .)
    -               reduce using rule 104 (empty -> .)
    <               reduce using rule 104 (empty -> .)
    >               reduce using rule 104 (empty -> .)
    EQUALS          reduce using rule 104 (empty -> .)
    DIFF            reduce using rule 104 (empty -> .)
    LTHANEQ         reduce using rule 104 (empty -> .)
    GTHANEQ         reduce using rule 104 (empty -> .)
    AND             reduce using rule 104 (empty -> .)
    OR              reduce using rule 104 (empty -> .)
    ;               reduce using rule 104 (empty -> .)
    ]               reduce using rule 104 (empty -> .)
    )               reduce using rule 104 (empty -> .)
    ,               reduce using rule 104 (empty -> .)

    terminop                       shift and go to state 119
    empty                          shift and go to state 122

state 83

    (73) factor -> constante .

    *               reduce using rule 73 (factor -> constante .)
    /               reduce using rule 73 (factor -> constante .)
    +               reduce using rule 73 (factor -> constante .)
    -               reduce using rule 73 (factor -> constante .)
    <               reduce using rule 73 (factor -> constante .)
    >               reduce using rule 73 (factor -> constante .)
    EQUALS          reduce using rule 73 (factor -> constante .)
    DIFF            reduce using rule 73 (factor -> constante .)
    LTHANEQ         reduce using rule 73 (factor -> constante .)
    GTHANEQ         reduce using rule 73 (factor -> constante .)
    AND             reduce using rule 73 (factor -> constante .)
    OR              reduce using rule 73 (factor -> constante .)
    ;               reduce using rule 73 (factor -> constante .)
    ]               reduce using rule 73 (factor -> constante .)
    )               reduce using rule 73 (factor -> constante .)
    ,               reduce using rule 73 (factor -> constante .)


state 84

    (74) factor -> lParen . superexpresion rParen
    (51) superexpresion -> . megaexpresion superexpresionp
    (55) megaexpresion -> . exp megaexpresionp
    (63) exp -> . termino expp
    (68) termino -> . factor terminop
    (73) factor -> . constante
    (74) factor -> . lParen superexpresion rParen
    (77) constante -> . id
    (78) constante -> . CTEF ctef
    (79) constante -> . CTEI ctei
    (75) lParen -> . (
    (96) id -> . ID idp

    CTEF            shift and go to state 86
    CTEI            shift and go to state 87
    (               shift and go to state 88
    ID              shift and go to state 67

    lParen                         shift and go to state 84
    superexpresion                 shift and go to state 123
    megaexpresion                  shift and go to state 79
    exp                            shift and go to state 80
    termino                        shift and go to state 81
    factor                         shift and go to state 82
    constante                      shift and go to state 83
    id                             shift and go to state 85

state 85

    (77) constante -> id .

    *               reduce using rule 77 (constante -> id .)
    /               reduce using rule 77 (constante -> id .)
    +               reduce using rule 77 (constante -> id .)
    -               reduce using rule 77 (constante -> id .)
    <               reduce using rule 77 (constante -> id .)
    >               reduce using rule 77 (constante -> id .)
    EQUALS          reduce using rule 77 (constante -> id .)
    DIFF            reduce using rule 77 (constante -> id .)
    LTHANEQ         reduce using rule 77 (constante -> id .)
    GTHANEQ         reduce using rule 77 (constante -> id .)
    AND             reduce using rule 77 (constante -> id .)
    OR              reduce using rule 77 (constante -> id .)
    ;               reduce using rule 77 (constante -> id .)
    ]               reduce using rule 77 (constante -> id .)
    )               reduce using rule 77 (constante -> id .)
    ,               reduce using rule 77 (constante -> id .)


state 86

    (78) constante -> CTEF . ctef
    (80) ctef -> .

    *               reduce using rule 80 (ctef -> .)
    /               reduce using rule 80 (ctef -> .)
    +               reduce using rule 80 (ctef -> .)
    -               reduce using rule 80 (ctef -> .)
    <               reduce using rule 80 (ctef -> .)
    >               reduce using rule 80 (ctef -> .)
    EQUALS          reduce using rule 80 (ctef -> .)
    DIFF            reduce using rule 80 (ctef -> .)
    LTHANEQ         reduce using rule 80 (ctef -> .)
    GTHANEQ         reduce using rule 80 (ctef -> .)
    AND             reduce using rule 80 (ctef -> .)
    OR              reduce using rule 80 (ctef -> .)
    ;               reduce using rule 80 (ctef -> .)
    ]               reduce using rule 80 (ctef -> .)
    )               reduce using rule 80 (ctef -> .)
    ,               reduce using rule 80 (ctef -> .)

    ctef                           shift and go to state 124

state 87

    (79) constante -> CTEI . ctei
    (81) ctei -> .

    *               reduce using rule 81 (ctei -> .)
    /               reduce using rule 81 (ctei -> .)
    +               reduce using rule 81 (ctei -> .)
    -               reduce using rule 81 (ctei -> .)
    <               reduce using rule 81 (ctei -> .)
    >               reduce using rule 81 (ctei -> .)
    EQUALS          reduce using rule 81 (ctei -> .)
    DIFF            reduce using rule 81 (ctei -> .)
    LTHANEQ         reduce using rule 81 (ctei -> .)
    GTHANEQ         reduce using rule 81 (ctei -> .)
    AND             reduce using rule 81 (ctei -> .)
    OR              reduce using rule 81 (ctei -> .)
    ;               reduce using rule 81 (ctei -> .)
    ]               reduce using rule 81 (ctei -> .)
    )               reduce using rule 81 (ctei -> .)
    ,               reduce using rule 81 (ctei -> .)

    ctei                           shift and go to state 125

state 88

    (75) lParen -> ( .

    CTEF            reduce using rule 75 (lParen -> ( .)
    CTEI            reduce using rule 75 (lParen -> ( .)
    (               reduce using rule 75 (lParen -> ( .)
    ID              reduce using rule 75 (lParen -> ( .)


state 89

    (40) for -> FOR ( . id = superexpresion forAux ; superexpresion forAux2 ) bloque forAux3
    (96) id -> . ID idp

    ID              shift and go to state 67

    id                             shift and go to state 126

state 90

    (96) id -> ID idp .

    ;               reduce using rule 96 (id -> ID idp .)
    =               reduce using rule 96 (id -> ID idp .)
    [               reduce using rule 96 (id -> ID idp .)
    *               reduce using rule 96 (id -> ID idp .)
    /               reduce using rule 96 (id -> ID idp .)
    +               reduce using rule 96 (id -> ID idp .)
    -               reduce using rule 96 (id -> ID idp .)
    <               reduce using rule 96 (id -> ID idp .)
    >               reduce using rule 96 (id -> ID idp .)
    EQUALS          reduce using rule 96 (id -> ID idp .)
    DIFF            reduce using rule 96 (id -> ID idp .)
    LTHANEQ         reduce using rule 96 (id -> ID idp .)
    GTHANEQ         reduce using rule 96 (id -> ID idp .)
    AND             reduce using rule 96 (id -> ID idp .)
    OR              reduce using rule 96 (id -> ID idp .)
    ]               reduce using rule 96 (id -> ID idp .)
    )               reduce using rule 96 (id -> ID idp .)
    ,               reduce using rule 96 (id -> ID idp .)


state 91

    (97) idp -> ( . idpp )
    (100) idpp -> . superexpresion idppp
    (101) idpp -> . empty
    (51) superexpresion -> . megaexpresion superexpresionp
    (104) empty -> .
    (55) megaexpresion -> . exp megaexpresionp
    (63) exp -> . termino expp
    (68) termino -> . factor terminop
    (73) factor -> . constante
    (74) factor -> . lParen superexpresion rParen
    (77) constante -> . id
    (78) constante -> . CTEF ctef
    (79) constante -> . CTEI ctei
    (75) lParen -> . (
    (96) id -> . ID idp

    )               reduce using rule 104 (empty -> .)
    CTEF            shift and go to state 86
    CTEI            shift and go to state 87
    (               shift and go to state 88
    ID              shift and go to state 67

    idpp                           shift and go to state 127
    superexpresion                 shift and go to state 128
    empty                          shift and go to state 129
    megaexpresion                  shift and go to state 79
    exp                            shift and go to state 80
    termino                        shift and go to state 81
    factor                         shift and go to state 82
    constante                      shift and go to state 83
    lParen                         shift and go to state 84
    id                             shift and go to state 85

state 92

    (98) idp -> [ . superexpresion ]
    (51) superexpresion -> . megaexpresion superexpresionp
    (55) megaexpresion -> . exp megaexpresionp
    (63) exp -> . termino expp
    (68) termino -> . factor terminop
    (73) factor -> . constante
    (74) factor -> . lParen superexpresion rParen
    (77) constante -> . id
    (78) constante -> . CTEF ctef
    (79) constante -> . CTEI ctei
    (75) lParen -> . (
    (96) id -> . ID idp

    CTEF            shift and go to state 86
    CTEI            shift and go to state 87
    (               shift and go to state 88
    ID              shift and go to state 67

    superexpresion                 shift and go to state 130
    megaexpresion                  shift and go to state 79
    exp                            shift and go to state 80
    termino                        shift and go to state 81
    factor                         shift and go to state 82
    constante                      shift and go to state 83
    lParen                         shift and go to state 84
    id                             shift and go to state 85

state 93

    (99) idp -> empty .

    ;               reduce using rule 99 (idp -> empty .)
    =               reduce using rule 99 (idp -> empty .)
    [               reduce using rule 99 (idp -> empty .)
    *               reduce using rule 99 (idp -> empty .)
    /               reduce using rule 99 (idp -> empty .)
    +               reduce using rule 99 (idp -> empty .)
    -               reduce using rule 99 (idp -> empty .)
    <               reduce using rule 99 (idp -> empty .)
    >               reduce using rule 99 (idp -> empty .)
    EQUALS          reduce using rule 99 (idp -> empty .)
    DIFF            reduce using rule 99 (idp -> empty .)
    LTHANEQ         reduce using rule 99 (idp -> empty .)
    GTHANEQ         reduce using rule 99 (idp -> empty .)
    AND             reduce using rule 99 (idp -> empty .)
    OR              reduce using rule 99 (idp -> empty .)
    ]               reduce using rule 99 (idp -> empty .)
    )               reduce using rule 99 (idp -> empty .)
    ,               reduce using rule 99 (idp -> empty .)


state 94

    (7) function -> FUNCTION tipoRetorno ID ( functionParam ) functionAux bloque functionAux2 .

    FUNCTION        reduce using rule 7 (function -> FUNCTION tipoRetorno ID ( functionParam ) functionAux bloque functionAux2 .)
    MAIN            reduce using rule 7 (function -> FUNCTION tipoRetorno ID ( functionParam ) functionAux bloque functionAux2 .)


state 95

    (49) asignacionp -> = superexpresion . ;

    ;               shift and go to state 131


state 96

    (50) asignacionp -> [ superexpresion . ] = superexpresion ;

    ]               shift and go to state 132


state 97

    (27) condicion -> IF ( superexpresion . ) condicionAux bloque condicionelse

    )               shift and go to state 133


state 98

    (32) write -> WRITE ( writep . ) ;

    )               shift and go to state 134


state 99

    (33) writep -> superexpresion . writepAux writepp
    (35) writepAux -> .

    ,               reduce using rule 35 (writepAux -> .)
    )               reduce using rule 35 (writepAux -> .)

    writepAux                      shift and go to state 135

state 100

    (34) writep -> LETRERO . writepAux2 writepp
    (36) writepAux2 -> .

    ,               reduce using rule 36 (writepAux2 -> .)
    )               reduce using rule 36 (writepAux2 -> .)

    writepAux2                     shift and go to state 136

state 101

    (44) while -> WHILE whileAux ( . superexpresion ) whileAux2 bloque
    (51) superexpresion -> . megaexpresion superexpresionp
    (55) megaexpresion -> . exp megaexpresionp
    (63) exp -> . termino expp
    (68) termino -> . factor terminop
    (73) factor -> . constante
    (74) factor -> . lParen superexpresion rParen
    (77) constante -> . id
    (78) constante -> . CTEF ctef
    (79) constante -> . CTEI ctei
    (75) lParen -> . (
    (96) id -> . ID idp

    CTEF            shift and go to state 86
    CTEI            shift and go to state 87
    (               shift and go to state 88
    ID              shift and go to state 67

    superexpresion                 shift and go to state 137
    megaexpresion                  shift and go to state 79
    exp                            shift and go to state 80
    termino                        shift and go to state 81
    factor                         shift and go to state 82
    constante                      shift and go to state 83
    lParen                         shift and go to state 84
    id                             shift and go to state 85

state 102

    (26) return -> RETURN superexpresion ; .

    IF              reduce using rule 26 (return -> RETURN superexpresion ; .)
    WRITE           reduce using rule 26 (return -> RETURN superexpresion ; .)
    WHILE           reduce using rule 26 (return -> RETURN superexpresion ; .)
    RETURN          reduce using rule 26 (return -> RETURN superexpresion ; .)
    FOR             reduce using rule 26 (return -> RETURN superexpresion ; .)
    ID              reduce using rule 26 (return -> RETURN superexpresion ; .)
    INT             reduce using rule 26 (return -> RETURN superexpresion ; .)
    FLOAT           reduce using rule 26 (return -> RETURN superexpresion ; .)
    CHAR            reduce using rule 26 (return -> RETURN superexpresion ; .)
    }               reduce using rule 26 (return -> RETURN superexpresion ; .)


state 103

    (51) superexpresion -> megaexpresion superexpresionp .

    ;               reduce using rule 51 (superexpresion -> megaexpresion superexpresionp .)
    ]               reduce using rule 51 (superexpresion -> megaexpresion superexpresionp .)
    )               reduce using rule 51 (superexpresion -> megaexpresion superexpresionp .)
    ,               reduce using rule 51 (superexpresion -> megaexpresion superexpresionp .)


state 104

    (52) superexpresionp -> AND . superexpresion
    (51) superexpresion -> . megaexpresion superexpresionp
    (55) megaexpresion -> . exp megaexpresionp
    (63) exp -> . termino expp
    (68) termino -> . factor terminop
    (73) factor -> . constante
    (74) factor -> . lParen superexpresion rParen
    (77) constante -> . id
    (78) constante -> . CTEF ctef
    (79) constante -> . CTEI ctei
    (75) lParen -> . (
    (96) id -> . ID idp

    CTEF            shift and go to state 86
    CTEI            shift and go to state 87
    (               shift and go to state 88
    ID              shift and go to state 67

    superexpresion                 shift and go to state 138
    megaexpresion                  shift and go to state 79
    exp                            shift and go to state 80
    termino                        shift and go to state 81
    factor                         shift and go to state 82
    constante                      shift and go to state 83
    lParen                         shift and go to state 84
    id                             shift and go to state 85

state 105

    (53) superexpresionp -> OR . superexpresion
    (51) superexpresion -> . megaexpresion superexpresionp
    (55) megaexpresion -> . exp megaexpresionp
    (63) exp -> . termino expp
    (68) termino -> . factor terminop
    (73) factor -> . constante
    (74) factor -> . lParen superexpresion rParen
    (77) constante -> . id
    (78) constante -> . CTEF ctef
    (79) constante -> . CTEI ctei
    (75) lParen -> . (
    (96) id -> . ID idp

    CTEF            shift and go to state 86
    CTEI            shift and go to state 87
    (               shift and go to state 88
    ID              shift and go to state 67

    superexpresion                 shift and go to state 139
    megaexpresion                  shift and go to state 79
    exp                            shift and go to state 80
    termino                        shift and go to state 81
    factor                         shift and go to state 82
    constante                      shift and go to state 83
    lParen                         shift and go to state 84
    id                             shift and go to state 85

state 106

    (54) superexpresionp -> empty .

    ;               reduce using rule 54 (superexpresionp -> empty .)
    ]               reduce using rule 54 (superexpresionp -> empty .)
    )               reduce using rule 54 (superexpresionp -> empty .)
    ,               reduce using rule 54 (superexpresionp -> empty .)


state 107

    (55) megaexpresion -> exp megaexpresionp .

    AND             reduce using rule 55 (megaexpresion -> exp megaexpresionp .)
    OR              reduce using rule 55 (megaexpresion -> exp megaexpresionp .)
    ;               reduce using rule 55 (megaexpresion -> exp megaexpresionp .)
    ]               reduce using rule 55 (megaexpresion -> exp megaexpresionp .)
    )               reduce using rule 55 (megaexpresion -> exp megaexpresionp .)
    ,               reduce using rule 55 (megaexpresion -> exp megaexpresionp .)


state 108

    (56) megaexpresionp -> < . exp
    (63) exp -> . termino expp
    (68) termino -> . factor terminop
    (73) factor -> . constante
    (74) factor -> . lParen superexpresion rParen
    (77) constante -> . id
    (78) constante -> . CTEF ctef
    (79) constante -> . CTEI ctei
    (75) lParen -> . (
    (96) id -> . ID idp

    CTEF            shift and go to state 86
    CTEI            shift and go to state 87
    (               shift and go to state 88
    ID              shift and go to state 67

    exp                            shift and go to state 140
    termino                        shift and go to state 81
    factor                         shift and go to state 82
    constante                      shift and go to state 83
    lParen                         shift and go to state 84
    id                             shift and go to state 85

state 109

    (57) megaexpresionp -> > . exp
    (63) exp -> . termino expp
    (68) termino -> . factor terminop
    (73) factor -> . constante
    (74) factor -> . lParen superexpresion rParen
    (77) constante -> . id
    (78) constante -> . CTEF ctef
    (79) constante -> . CTEI ctei
    (75) lParen -> . (
    (96) id -> . ID idp

    CTEF            shift and go to state 86
    CTEI            shift and go to state 87
    (               shift and go to state 88
    ID              shift and go to state 67

    exp                            shift and go to state 141
    termino                        shift and go to state 81
    factor                         shift and go to state 82
    constante                      shift and go to state 83
    lParen                         shift and go to state 84
    id                             shift and go to state 85

state 110

    (58) megaexpresionp -> EQUALS . exp
    (63) exp -> . termino expp
    (68) termino -> . factor terminop
    (73) factor -> . constante
    (74) factor -> . lParen superexpresion rParen
    (77) constante -> . id
    (78) constante -> . CTEF ctef
    (79) constante -> . CTEI ctei
    (75) lParen -> . (
    (96) id -> . ID idp

    CTEF            shift and go to state 86
    CTEI            shift and go to state 87
    (               shift and go to state 88
    ID              shift and go to state 67

    exp                            shift and go to state 142
    termino                        shift and go to state 81
    factor                         shift and go to state 82
    constante                      shift and go to state 83
    lParen                         shift and go to state 84
    id                             shift and go to state 85

state 111

    (59) megaexpresionp -> DIFF . exp
    (63) exp -> . termino expp
    (68) termino -> . factor terminop
    (73) factor -> . constante
    (74) factor -> . lParen superexpresion rParen
    (77) constante -> . id
    (78) constante -> . CTEF ctef
    (79) constante -> . CTEI ctei
    (75) lParen -> . (
    (96) id -> . ID idp

    CTEF            shift and go to state 86
    CTEI            shift and go to state 87
    (               shift and go to state 88
    ID              shift and go to state 67

    exp                            shift and go to state 143
    termino                        shift and go to state 81
    factor                         shift and go to state 82
    constante                      shift and go to state 83
    lParen                         shift and go to state 84
    id                             shift and go to state 85

state 112

    (60) megaexpresionp -> LTHANEQ . exp
    (63) exp -> . termino expp
    (68) termino -> . factor terminop
    (73) factor -> . constante
    (74) factor -> . lParen superexpresion rParen
    (77) constante -> . id
    (78) constante -> . CTEF ctef
    (79) constante -> . CTEI ctei
    (75) lParen -> . (
    (96) id -> . ID idp

    CTEF            shift and go to state 86
    CTEI            shift and go to state 87
    (               shift and go to state 88
    ID              shift and go to state 67

    exp                            shift and go to state 144
    termino                        shift and go to state 81
    factor                         shift and go to state 82
    constante                      shift and go to state 83
    lParen                         shift and go to state 84
    id                             shift and go to state 85

state 113

    (61) megaexpresionp -> GTHANEQ . exp
    (63) exp -> . termino expp
    (68) termino -> . factor terminop
    (73) factor -> . constante
    (74) factor -> . lParen superexpresion rParen
    (77) constante -> . id
    (78) constante -> . CTEF ctef
    (79) constante -> . CTEI ctei
    (75) lParen -> . (
    (96) id -> . ID idp

    CTEF            shift and go to state 86
    CTEI            shift and go to state 87
    (               shift and go to state 88
    ID              shift and go to state 67

    exp                            shift and go to state 145
    termino                        shift and go to state 81
    factor                         shift and go to state 82
    constante                      shift and go to state 83
    lParen                         shift and go to state 84
    id                             shift and go to state 85

state 114

    (62) megaexpresionp -> empty .

    AND             reduce using rule 62 (megaexpresionp -> empty .)
    OR              reduce using rule 62 (megaexpresionp -> empty .)
    ;               reduce using rule 62 (megaexpresionp -> empty .)
    ]               reduce using rule 62 (megaexpresionp -> empty .)
    )               reduce using rule 62 (megaexpresionp -> empty .)
    ,               reduce using rule 62 (megaexpresionp -> empty .)


state 115

    (63) exp -> termino expp .

    <               reduce using rule 63 (exp -> termino expp .)
    >               reduce using rule 63 (exp -> termino expp .)
    EQUALS          reduce using rule 63 (exp -> termino expp .)
    DIFF            reduce using rule 63 (exp -> termino expp .)
    LTHANEQ         reduce using rule 63 (exp -> termino expp .)
    GTHANEQ         reduce using rule 63 (exp -> termino expp .)
    AND             reduce using rule 63 (exp -> termino expp .)
    OR              reduce using rule 63 (exp -> termino expp .)
    ;               reduce using rule 63 (exp -> termino expp .)
    ]               reduce using rule 63 (exp -> termino expp .)
    )               reduce using rule 63 (exp -> termino expp .)
    ,               reduce using rule 63 (exp -> termino expp .)


state 116

    (64) expp -> + . pAppT exp
    (67) pAppT -> .

    CTEF            reduce using rule 67 (pAppT -> .)
    CTEI            reduce using rule 67 (pAppT -> .)
    (               reduce using rule 67 (pAppT -> .)
    ID              reduce using rule 67 (pAppT -> .)

    pAppT                          shift and go to state 146

state 117

    (65) expp -> - . pAppT exp
    (67) pAppT -> .

    CTEF            reduce using rule 67 (pAppT -> .)
    CTEI            reduce using rule 67 (pAppT -> .)
    (               reduce using rule 67 (pAppT -> .)
    ID              reduce using rule 67 (pAppT -> .)

    pAppT                          shift and go to state 147

state 118

    (66) expp -> empty .

    <               reduce using rule 66 (expp -> empty .)
    >               reduce using rule 66 (expp -> empty .)
    EQUALS          reduce using rule 66 (expp -> empty .)
    DIFF            reduce using rule 66 (expp -> empty .)
    LTHANEQ         reduce using rule 66 (expp -> empty .)
    GTHANEQ         reduce using rule 66 (expp -> empty .)
    AND             reduce using rule 66 (expp -> empty .)
    OR              reduce using rule 66 (expp -> empty .)
    ;               reduce using rule 66 (expp -> empty .)
    ]               reduce using rule 66 (expp -> empty .)
    )               reduce using rule 66 (expp -> empty .)
    ,               reduce using rule 66 (expp -> empty .)


state 119

    (68) termino -> factor terminop .

    +               reduce using rule 68 (termino -> factor terminop .)
    -               reduce using rule 68 (termino -> factor terminop .)
    <               reduce using rule 68 (termino -> factor terminop .)
    >               reduce using rule 68 (termino -> factor terminop .)
    EQUALS          reduce using rule 68 (termino -> factor terminop .)
    DIFF            reduce using rule 68 (termino -> factor terminop .)
    LTHANEQ         reduce using rule 68 (termino -> factor terminop .)
    GTHANEQ         reduce using rule 68 (termino -> factor terminop .)
    AND             reduce using rule 68 (termino -> factor terminop .)
    OR              reduce using rule 68 (termino -> factor terminop .)
    ;               reduce using rule 68 (termino -> factor terminop .)
    ]               reduce using rule 68 (termino -> factor terminop .)
    )               reduce using rule 68 (termino -> factor terminop .)
    ,               reduce using rule 68 (termino -> factor terminop .)


state 120

    (69) terminop -> * . pAppF termino
    (72) pAppF -> .

    CTEF            reduce using rule 72 (pAppF -> .)
    CTEI            reduce using rule 72 (pAppF -> .)
    (               reduce using rule 72 (pAppF -> .)
    ID              reduce using rule 72 (pAppF -> .)

    pAppF                          shift and go to state 148

state 121

    (70) terminop -> / . pAppF termino
    (72) pAppF -> .

    CTEF            reduce using rule 72 (pAppF -> .)
    CTEI            reduce using rule 72 (pAppF -> .)
    (               reduce using rule 72 (pAppF -> .)
    ID              reduce using rule 72 (pAppF -> .)

    pAppF                          shift and go to state 149

state 122

    (71) terminop -> empty .

    +               reduce using rule 71 (terminop -> empty .)
    -               reduce using rule 71 (terminop -> empty .)
    <               reduce using rule 71 (terminop -> empty .)
    >               reduce using rule 71 (terminop -> empty .)
    EQUALS          reduce using rule 71 (terminop -> empty .)
    DIFF            reduce using rule 71 (terminop -> empty .)
    LTHANEQ         reduce using rule 71 (terminop -> empty .)
    GTHANEQ         reduce using rule 71 (terminop -> empty .)
    AND             reduce using rule 71 (terminop -> empty .)
    OR              reduce using rule 71 (terminop -> empty .)
    ;               reduce using rule 71 (terminop -> empty .)
    ]               reduce using rule 71 (terminop -> empty .)
    )               reduce using rule 71 (terminop -> empty .)
    ,               reduce using rule 71 (terminop -> empty .)


state 123

    (74) factor -> lParen superexpresion . rParen
    (76) rParen -> . )

    )               shift and go to state 151

    rParen                         shift and go to state 150

state 124

    (78) constante -> CTEF ctef .

    *               reduce using rule 78 (constante -> CTEF ctef .)
    /               reduce using rule 78 (constante -> CTEF ctef .)
    +               reduce using rule 78 (constante -> CTEF ctef .)
    -               reduce using rule 78 (constante -> CTEF ctef .)
    <               reduce using rule 78 (constante -> CTEF ctef .)
    >               reduce using rule 78 (constante -> CTEF ctef .)
    EQUALS          reduce using rule 78 (constante -> CTEF ctef .)
    DIFF            reduce using rule 78 (constante -> CTEF ctef .)
    LTHANEQ         reduce using rule 78 (constante -> CTEF ctef .)
    GTHANEQ         reduce using rule 78 (constante -> CTEF ctef .)
    AND             reduce using rule 78 (constante -> CTEF ctef .)
    OR              reduce using rule 78 (constante -> CTEF ctef .)
    ;               reduce using rule 78 (constante -> CTEF ctef .)
    ]               reduce using rule 78 (constante -> CTEF ctef .)
    )               reduce using rule 78 (constante -> CTEF ctef .)
    ,               reduce using rule 78 (constante -> CTEF ctef .)


state 125

    (79) constante -> CTEI ctei .

    *               reduce using rule 79 (constante -> CTEI ctei .)
    /               reduce using rule 79 (constante -> CTEI ctei .)
    +               reduce using rule 79 (constante -> CTEI ctei .)
    -               reduce using rule 79 (constante -> CTEI ctei .)
    <               reduce using rule 79 (constante -> CTEI ctei .)
    >               reduce using rule 79 (constante -> CTEI ctei .)
    EQUALS          reduce using rule 79 (constante -> CTEI ctei .)
    DIFF            reduce using rule 79 (constante -> CTEI ctei .)
    LTHANEQ         reduce using rule 79 (constante -> CTEI ctei .)
    GTHANEQ         reduce using rule 79 (constante -> CTEI ctei .)
    AND             reduce using rule 79 (constante -> CTEI ctei .)
    OR              reduce using rule 79 (constante -> CTEI ctei .)
    ;               reduce using rule 79 (constante -> CTEI ctei .)
    ]               reduce using rule 79 (constante -> CTEI ctei .)
    )               reduce using rule 79 (constante -> CTEI ctei .)
    ,               reduce using rule 79 (constante -> CTEI ctei .)


state 126

    (40) for -> FOR ( id . = superexpresion forAux ; superexpresion forAux2 ) bloque forAux3

    =               shift and go to state 152


state 127

    (97) idp -> ( idpp . )

    )               shift and go to state 153


state 128

    (100) idpp -> superexpresion . idppp
    (102) idppp -> . , idpp
    (103) idppp -> . empty
    (104) empty -> .

    ,               shift and go to state 155
    )               reduce using rule 104 (empty -> .)

    idppp                          shift and go to state 154
    empty                          shift and go to state 156

state 129

    (101) idpp -> empty .

    )               reduce using rule 101 (idpp -> empty .)


state 130

    (98) idp -> [ superexpresion . ]

    ]               shift and go to state 157


state 131

    (49) asignacionp -> = superexpresion ; .

    IF              reduce using rule 49 (asignacionp -> = superexpresion ; .)
    WRITE           reduce using rule 49 (asignacionp -> = superexpresion ; .)
    WHILE           reduce using rule 49 (asignacionp -> = superexpresion ; .)
    RETURN          reduce using rule 49 (asignacionp -> = superexpresion ; .)
    FOR             reduce using rule 49 (asignacionp -> = superexpresion ; .)
    ID              reduce using rule 49 (asignacionp -> = superexpresion ; .)
    INT             reduce using rule 49 (asignacionp -> = superexpresion ; .)
    FLOAT           reduce using rule 49 (asignacionp -> = superexpresion ; .)
    CHAR            reduce using rule 49 (asignacionp -> = superexpresion ; .)
    }               reduce using rule 49 (asignacionp -> = superexpresion ; .)


state 132

    (50) asignacionp -> [ superexpresion ] . = superexpresion ;

    =               shift and go to state 158


state 133

    (27) condicion -> IF ( superexpresion ) . condicionAux bloque condicionelse
    (28) condicionAux -> .

    {               reduce using rule 28 (condicionAux -> .)

    condicionAux                   shift and go to state 159

state 134

    (32) write -> WRITE ( writep ) . ;

    ;               shift and go to state 160


state 135

    (33) writep -> superexpresion writepAux . writepp
    (37) writepp -> . , writeppAux writep
    (38) writepp -> . empty writeppAux
    (104) empty -> .

    ,               shift and go to state 162
    )               reduce using rule 104 (empty -> .)

    writepp                        shift and go to state 161
    empty                          shift and go to state 163

state 136

    (34) writep -> LETRERO writepAux2 . writepp
    (37) writepp -> . , writeppAux writep
    (38) writepp -> . empty writeppAux
    (104) empty -> .

    ,               shift and go to state 162
    )               reduce using rule 104 (empty -> .)

    writepp                        shift and go to state 164
    empty                          shift and go to state 163

state 137

    (44) while -> WHILE whileAux ( superexpresion . ) whileAux2 bloque

    )               shift and go to state 165


state 138

    (52) superexpresionp -> AND superexpresion .

    ;               reduce using rule 52 (superexpresionp -> AND superexpresion .)
    ]               reduce using rule 52 (superexpresionp -> AND superexpresion .)
    )               reduce using rule 52 (superexpresionp -> AND superexpresion .)
    ,               reduce using rule 52 (superexpresionp -> AND superexpresion .)


state 139

    (53) superexpresionp -> OR superexpresion .

    ;               reduce using rule 53 (superexpresionp -> OR superexpresion .)
    ]               reduce using rule 53 (superexpresionp -> OR superexpresion .)
    )               reduce using rule 53 (superexpresionp -> OR superexpresion .)
    ,               reduce using rule 53 (superexpresionp -> OR superexpresion .)


state 140

    (56) megaexpresionp -> < exp .

    AND             reduce using rule 56 (megaexpresionp -> < exp .)
    OR              reduce using rule 56 (megaexpresionp -> < exp .)
    ;               reduce using rule 56 (megaexpresionp -> < exp .)
    ]               reduce using rule 56 (megaexpresionp -> < exp .)
    )               reduce using rule 56 (megaexpresionp -> < exp .)
    ,               reduce using rule 56 (megaexpresionp -> < exp .)


state 141

    (57) megaexpresionp -> > exp .

    AND             reduce using rule 57 (megaexpresionp -> > exp .)
    OR              reduce using rule 57 (megaexpresionp -> > exp .)
    ;               reduce using rule 57 (megaexpresionp -> > exp .)
    ]               reduce using rule 57 (megaexpresionp -> > exp .)
    )               reduce using rule 57 (megaexpresionp -> > exp .)
    ,               reduce using rule 57 (megaexpresionp -> > exp .)


state 142

    (58) megaexpresionp -> EQUALS exp .

    AND             reduce using rule 58 (megaexpresionp -> EQUALS exp .)
    OR              reduce using rule 58 (megaexpresionp -> EQUALS exp .)
    ;               reduce using rule 58 (megaexpresionp -> EQUALS exp .)
    ]               reduce using rule 58 (megaexpresionp -> EQUALS exp .)
    )               reduce using rule 58 (megaexpresionp -> EQUALS exp .)
    ,               reduce using rule 58 (megaexpresionp -> EQUALS exp .)


state 143

    (59) megaexpresionp -> DIFF exp .

    AND             reduce using rule 59 (megaexpresionp -> DIFF exp .)
    OR              reduce using rule 59 (megaexpresionp -> DIFF exp .)
    ;               reduce using rule 59 (megaexpresionp -> DIFF exp .)
    ]               reduce using rule 59 (megaexpresionp -> DIFF exp .)
    )               reduce using rule 59 (megaexpresionp -> DIFF exp .)
    ,               reduce using rule 59 (megaexpresionp -> DIFF exp .)


state 144

    (60) megaexpresionp -> LTHANEQ exp .

    AND             reduce using rule 60 (megaexpresionp -> LTHANEQ exp .)
    OR              reduce using rule 60 (megaexpresionp -> LTHANEQ exp .)
    ;               reduce using rule 60 (megaexpresionp -> LTHANEQ exp .)
    ]               reduce using rule 60 (megaexpresionp -> LTHANEQ exp .)
    )               reduce using rule 60 (megaexpresionp -> LTHANEQ exp .)
    ,               reduce using rule 60 (megaexpresionp -> LTHANEQ exp .)


state 145

    (61) megaexpresionp -> GTHANEQ exp .

    AND             reduce using rule 61 (megaexpresionp -> GTHANEQ exp .)
    OR              reduce using rule 61 (megaexpresionp -> GTHANEQ exp .)
    ;               reduce using rule 61 (megaexpresionp -> GTHANEQ exp .)
    ]               reduce using rule 61 (megaexpresionp -> GTHANEQ exp .)
    )               reduce using rule 61 (megaexpresionp -> GTHANEQ exp .)
    ,               reduce using rule 61 (megaexpresionp -> GTHANEQ exp .)


state 146

    (64) expp -> + pAppT . exp
    (63) exp -> . termino expp
    (68) termino -> . factor terminop
    (73) factor -> . constante
    (74) factor -> . lParen superexpresion rParen
    (77) constante -> . id
    (78) constante -> . CTEF ctef
    (79) constante -> . CTEI ctei
    (75) lParen -> . (
    (96) id -> . ID idp

    CTEF            shift and go to state 86
    CTEI            shift and go to state 87
    (               shift and go to state 88
    ID              shift and go to state 67

    exp                            shift and go to state 166
    termino                        shift and go to state 81
    factor                         shift and go to state 82
    constante                      shift and go to state 83
    lParen                         shift and go to state 84
    id                             shift and go to state 85

state 147

    (65) expp -> - pAppT . exp
    (63) exp -> . termino expp
    (68) termino -> . factor terminop
    (73) factor -> . constante
    (74) factor -> . lParen superexpresion rParen
    (77) constante -> . id
    (78) constante -> . CTEF ctef
    (79) constante -> . CTEI ctei
    (75) lParen -> . (
    (96) id -> . ID idp

    CTEF            shift and go to state 86
    CTEI            shift and go to state 87
    (               shift and go to state 88
    ID              shift and go to state 67

    exp                            shift and go to state 167
    termino                        shift and go to state 81
    factor                         shift and go to state 82
    constante                      shift and go to state 83
    lParen                         shift and go to state 84
    id                             shift and go to state 85

state 148

    (69) terminop -> * pAppF . termino
    (68) termino -> . factor terminop
    (73) factor -> . constante
    (74) factor -> . lParen superexpresion rParen
    (77) constante -> . id
    (78) constante -> . CTEF ctef
    (79) constante -> . CTEI ctei
    (75) lParen -> . (
    (96) id -> . ID idp

    CTEF            shift and go to state 86
    CTEI            shift and go to state 87
    (               shift and go to state 88
    ID              shift and go to state 67

    termino                        shift and go to state 168
    factor                         shift and go to state 82
    constante                      shift and go to state 83
    lParen                         shift and go to state 84
    id                             shift and go to state 85

state 149

    (70) terminop -> / pAppF . termino
    (68) termino -> . factor terminop
    (73) factor -> . constante
    (74) factor -> . lParen superexpresion rParen
    (77) constante -> . id
    (78) constante -> . CTEF ctef
    (79) constante -> . CTEI ctei
    (75) lParen -> . (
    (96) id -> . ID idp

    CTEF            shift and go to state 86
    CTEI            shift and go to state 87
    (               shift and go to state 88
    ID              shift and go to state 67

    termino                        shift and go to state 169
    factor                         shift and go to state 82
    constante                      shift and go to state 83
    lParen                         shift and go to state 84
    id                             shift and go to state 85

state 150

    (74) factor -> lParen superexpresion rParen .

    *               reduce using rule 74 (factor -> lParen superexpresion rParen .)
    /               reduce using rule 74 (factor -> lParen superexpresion rParen .)
    +               reduce using rule 74 (factor -> lParen superexpresion rParen .)
    -               reduce using rule 74 (factor -> lParen superexpresion rParen .)
    <               reduce using rule 74 (factor -> lParen superexpresion rParen .)
    >               reduce using rule 74 (factor -> lParen superexpresion rParen .)
    EQUALS          reduce using rule 74 (factor -> lParen superexpresion rParen .)
    DIFF            reduce using rule 74 (factor -> lParen superexpresion rParen .)
    LTHANEQ         reduce using rule 74 (factor -> lParen superexpresion rParen .)
    GTHANEQ         reduce using rule 74 (factor -> lParen superexpresion rParen .)
    AND             reduce using rule 74 (factor -> lParen superexpresion rParen .)
    OR              reduce using rule 74 (factor -> lParen superexpresion rParen .)
    ;               reduce using rule 74 (factor -> lParen superexpresion rParen .)
    ]               reduce using rule 74 (factor -> lParen superexpresion rParen .)
    )               reduce using rule 74 (factor -> lParen superexpresion rParen .)
    ,               reduce using rule 74 (factor -> lParen superexpresion rParen .)


state 151

    (76) rParen -> ) .

    *               reduce using rule 76 (rParen -> ) .)
    /               reduce using rule 76 (rParen -> ) .)
    +               reduce using rule 76 (rParen -> ) .)
    -               reduce using rule 76 (rParen -> ) .)
    <               reduce using rule 76 (rParen -> ) .)
    >               reduce using rule 76 (rParen -> ) .)
    EQUALS          reduce using rule 76 (rParen -> ) .)
    DIFF            reduce using rule 76 (rParen -> ) .)
    LTHANEQ         reduce using rule 76 (rParen -> ) .)
    GTHANEQ         reduce using rule 76 (rParen -> ) .)
    AND             reduce using rule 76 (rParen -> ) .)
    OR              reduce using rule 76 (rParen -> ) .)
    ;               reduce using rule 76 (rParen -> ) .)
    ]               reduce using rule 76 (rParen -> ) .)
    )               reduce using rule 76 (rParen -> ) .)
    ,               reduce using rule 76 (rParen -> ) .)


state 152

    (40) for -> FOR ( id = . superexpresion forAux ; superexpresion forAux2 ) bloque forAux3
    (51) superexpresion -> . megaexpresion superexpresionp
    (55) megaexpresion -> . exp megaexpresionp
    (63) exp -> . termino expp
    (68) termino -> . factor terminop
    (73) factor -> . constante
    (74) factor -> . lParen superexpresion rParen
    (77) constante -> . id
    (78) constante -> . CTEF ctef
    (79) constante -> . CTEI ctei
    (75) lParen -> . (
    (96) id -> . ID idp

    CTEF            shift and go to state 86
    CTEI            shift and go to state 87
    (               shift and go to state 88
    ID              shift and go to state 67

    id                             shift and go to state 85
    superexpresion                 shift and go to state 170
    megaexpresion                  shift and go to state 79
    exp                            shift and go to state 80
    termino                        shift and go to state 81
    factor                         shift and go to state 82
    constante                      shift and go to state 83
    lParen                         shift and go to state 84

state 153

    (97) idp -> ( idpp ) .

    ;               reduce using rule 97 (idp -> ( idpp ) .)
    =               reduce using rule 97 (idp -> ( idpp ) .)
    [               reduce using rule 97 (idp -> ( idpp ) .)
    *               reduce using rule 97 (idp -> ( idpp ) .)
    /               reduce using rule 97 (idp -> ( idpp ) .)
    +               reduce using rule 97 (idp -> ( idpp ) .)
    -               reduce using rule 97 (idp -> ( idpp ) .)
    <               reduce using rule 97 (idp -> ( idpp ) .)
    >               reduce using rule 97 (idp -> ( idpp ) .)
    EQUALS          reduce using rule 97 (idp -> ( idpp ) .)
    DIFF            reduce using rule 97 (idp -> ( idpp ) .)
    LTHANEQ         reduce using rule 97 (idp -> ( idpp ) .)
    GTHANEQ         reduce using rule 97 (idp -> ( idpp ) .)
    AND             reduce using rule 97 (idp -> ( idpp ) .)
    OR              reduce using rule 97 (idp -> ( idpp ) .)
    ]               reduce using rule 97 (idp -> ( idpp ) .)
    )               reduce using rule 97 (idp -> ( idpp ) .)
    ,               reduce using rule 97 (idp -> ( idpp ) .)


state 154

    (100) idpp -> superexpresion idppp .

    )               reduce using rule 100 (idpp -> superexpresion idppp .)


state 155

    (102) idppp -> , . idpp
    (100) idpp -> . superexpresion idppp
    (101) idpp -> . empty
    (51) superexpresion -> . megaexpresion superexpresionp
    (104) empty -> .
    (55) megaexpresion -> . exp megaexpresionp
    (63) exp -> . termino expp
    (68) termino -> . factor terminop
    (73) factor -> . constante
    (74) factor -> . lParen superexpresion rParen
    (77) constante -> . id
    (78) constante -> . CTEF ctef
    (79) constante -> . CTEI ctei
    (75) lParen -> . (
    (96) id -> . ID idp

    )               reduce using rule 104 (empty -> .)
    CTEF            shift and go to state 86
    CTEI            shift and go to state 87
    (               shift and go to state 88
    ID              shift and go to state 67

    idpp                           shift and go to state 171
    superexpresion                 shift and go to state 128
    empty                          shift and go to state 129
    megaexpresion                  shift and go to state 79
    exp                            shift and go to state 80
    termino                        shift and go to state 81
    factor                         shift and go to state 82
    constante                      shift and go to state 83
    lParen                         shift and go to state 84
    id                             shift and go to state 85

state 156

    (103) idppp -> empty .

    )               reduce using rule 103 (idppp -> empty .)


state 157

    (98) idp -> [ superexpresion ] .

    ;               reduce using rule 98 (idp -> [ superexpresion ] .)
    =               reduce using rule 98 (idp -> [ superexpresion ] .)
    [               reduce using rule 98 (idp -> [ superexpresion ] .)
    *               reduce using rule 98 (idp -> [ superexpresion ] .)
    /               reduce using rule 98 (idp -> [ superexpresion ] .)
    +               reduce using rule 98 (idp -> [ superexpresion ] .)
    -               reduce using rule 98 (idp -> [ superexpresion ] .)
    <               reduce using rule 98 (idp -> [ superexpresion ] .)
    >               reduce using rule 98 (idp -> [ superexpresion ] .)
    EQUALS          reduce using rule 98 (idp -> [ superexpresion ] .)
    DIFF            reduce using rule 98 (idp -> [ superexpresion ] .)
    LTHANEQ         reduce using rule 98 (idp -> [ superexpresion ] .)
    GTHANEQ         reduce using rule 98 (idp -> [ superexpresion ] .)
    AND             reduce using rule 98 (idp -> [ superexpresion ] .)
    OR              reduce using rule 98 (idp -> [ superexpresion ] .)
    ]               reduce using rule 98 (idp -> [ superexpresion ] .)
    )               reduce using rule 98 (idp -> [ superexpresion ] .)
    ,               reduce using rule 98 (idp -> [ superexpresion ] .)


state 158

    (50) asignacionp -> [ superexpresion ] = . superexpresion ;
    (51) superexpresion -> . megaexpresion superexpresionp
    (55) megaexpresion -> . exp megaexpresionp
    (63) exp -> . termino expp
    (68) termino -> . factor terminop
    (73) factor -> . constante
    (74) factor -> . lParen superexpresion rParen
    (77) constante -> . id
    (78) constante -> . CTEF ctef
    (79) constante -> . CTEI ctei
    (75) lParen -> . (
    (96) id -> . ID idp

    CTEF            shift and go to state 86
    CTEI            shift and go to state 87
    (               shift and go to state 88
    ID              shift and go to state 67

    superexpresion                 shift and go to state 172
    megaexpresion                  shift and go to state 79
    exp                            shift and go to state 80
    termino                        shift and go to state 81
    factor                         shift and go to state 82
    constante                      shift and go to state 83
    lParen                         shift and go to state 84
    id                             shift and go to state 85

state 159

    (27) condicion -> IF ( superexpresion ) condicionAux . bloque condicionelse
    (14) bloque -> . { cuerpo }

    {               shift and go to state 41

    bloque                         shift and go to state 173

state 160

    (32) write -> WRITE ( writep ) ; .

    IF              reduce using rule 32 (write -> WRITE ( writep ) ; .)
    WRITE           reduce using rule 32 (write -> WRITE ( writep ) ; .)
    WHILE           reduce using rule 32 (write -> WRITE ( writep ) ; .)
    RETURN          reduce using rule 32 (write -> WRITE ( writep ) ; .)
    FOR             reduce using rule 32 (write -> WRITE ( writep ) ; .)
    ID              reduce using rule 32 (write -> WRITE ( writep ) ; .)
    INT             reduce using rule 32 (write -> WRITE ( writep ) ; .)
    FLOAT           reduce using rule 32 (write -> WRITE ( writep ) ; .)
    CHAR            reduce using rule 32 (write -> WRITE ( writep ) ; .)
    }               reduce using rule 32 (write -> WRITE ( writep ) ; .)


state 161

    (33) writep -> superexpresion writepAux writepp .

    )               reduce using rule 33 (writep -> superexpresion writepAux writepp .)


state 162

    (37) writepp -> , . writeppAux writep
    (39) writeppAux -> .

    LETRERO         reduce using rule 39 (writeppAux -> .)
    CTEF            reduce using rule 39 (writeppAux -> .)
    CTEI            reduce using rule 39 (writeppAux -> .)
    (               reduce using rule 39 (writeppAux -> .)
    ID              reduce using rule 39 (writeppAux -> .)

    writeppAux                     shift and go to state 174

state 163

    (38) writepp -> empty . writeppAux
    (39) writeppAux -> .

    )               reduce using rule 39 (writeppAux -> .)

    writeppAux                     shift and go to state 175

state 164

    (34) writep -> LETRERO writepAux2 writepp .

    )               reduce using rule 34 (writep -> LETRERO writepAux2 writepp .)


state 165

    (44) while -> WHILE whileAux ( superexpresion ) . whileAux2 bloque
    (46) whileAux2 -> .

    {               reduce using rule 46 (whileAux2 -> .)

    whileAux2                      shift and go to state 176

state 166

    (64) expp -> + pAppT exp .

    <               reduce using rule 64 (expp -> + pAppT exp .)
    >               reduce using rule 64 (expp -> + pAppT exp .)
    EQUALS          reduce using rule 64 (expp -> + pAppT exp .)
    DIFF            reduce using rule 64 (expp -> + pAppT exp .)
    LTHANEQ         reduce using rule 64 (expp -> + pAppT exp .)
    GTHANEQ         reduce using rule 64 (expp -> + pAppT exp .)
    AND             reduce using rule 64 (expp -> + pAppT exp .)
    OR              reduce using rule 64 (expp -> + pAppT exp .)
    ;               reduce using rule 64 (expp -> + pAppT exp .)
    ]               reduce using rule 64 (expp -> + pAppT exp .)
    )               reduce using rule 64 (expp -> + pAppT exp .)
    ,               reduce using rule 64 (expp -> + pAppT exp .)


state 167

    (65) expp -> - pAppT exp .

    <               reduce using rule 65 (expp -> - pAppT exp .)
    >               reduce using rule 65 (expp -> - pAppT exp .)
    EQUALS          reduce using rule 65 (expp -> - pAppT exp .)
    DIFF            reduce using rule 65 (expp -> - pAppT exp .)
    LTHANEQ         reduce using rule 65 (expp -> - pAppT exp .)
    GTHANEQ         reduce using rule 65 (expp -> - pAppT exp .)
    AND             reduce using rule 65 (expp -> - pAppT exp .)
    OR              reduce using rule 65 (expp -> - pAppT exp .)
    ;               reduce using rule 65 (expp -> - pAppT exp .)
    ]               reduce using rule 65 (expp -> - pAppT exp .)
    )               reduce using rule 65 (expp -> - pAppT exp .)
    ,               reduce using rule 65 (expp -> - pAppT exp .)


state 168

    (69) terminop -> * pAppF termino .

    +               reduce using rule 69 (terminop -> * pAppF termino .)
    -               reduce using rule 69 (terminop -> * pAppF termino .)
    <               reduce using rule 69 (terminop -> * pAppF termino .)
    >               reduce using rule 69 (terminop -> * pAppF termino .)
    EQUALS          reduce using rule 69 (terminop -> * pAppF termino .)
    DIFF            reduce using rule 69 (terminop -> * pAppF termino .)
    LTHANEQ         reduce using rule 69 (terminop -> * pAppF termino .)
    GTHANEQ         reduce using rule 69 (terminop -> * pAppF termino .)
    AND             reduce using rule 69 (terminop -> * pAppF termino .)
    OR              reduce using rule 69 (terminop -> * pAppF termino .)
    ;               reduce using rule 69 (terminop -> * pAppF termino .)
    ]               reduce using rule 69 (terminop -> * pAppF termino .)
    )               reduce using rule 69 (terminop -> * pAppF termino .)
    ,               reduce using rule 69 (terminop -> * pAppF termino .)


state 169

    (70) terminop -> / pAppF termino .

    +               reduce using rule 70 (terminop -> / pAppF termino .)
    -               reduce using rule 70 (terminop -> / pAppF termino .)
    <               reduce using rule 70 (terminop -> / pAppF termino .)
    >               reduce using rule 70 (terminop -> / pAppF termino .)
    EQUALS          reduce using rule 70 (terminop -> / pAppF termino .)
    DIFF            reduce using rule 70 (terminop -> / pAppF termino .)
    LTHANEQ         reduce using rule 70 (terminop -> / pAppF termino .)
    GTHANEQ         reduce using rule 70 (terminop -> / pAppF termino .)
    AND             reduce using rule 70 (terminop -> / pAppF termino .)
    OR              reduce using rule 70 (terminop -> / pAppF termino .)
    ;               reduce using rule 70 (terminop -> / pAppF termino .)
    ]               reduce using rule 70 (terminop -> / pAppF termino .)
    )               reduce using rule 70 (terminop -> / pAppF termino .)
    ,               reduce using rule 70 (terminop -> / pAppF termino .)


state 170

    (40) for -> FOR ( id = superexpresion . forAux ; superexpresion forAux2 ) bloque forAux3
    (41) forAux -> .

    ;               reduce using rule 41 (forAux -> .)

    forAux                         shift and go to state 177

state 171

    (102) idppp -> , idpp .

    )               reduce using rule 102 (idppp -> , idpp .)


state 172

    (50) asignacionp -> [ superexpresion ] = superexpresion . ;

    ;               shift and go to state 178


state 173

    (27) condicion -> IF ( superexpresion ) condicionAux bloque . condicionelse
    (29) condicionelse -> . ELSE condicionelseAux bloque
    (30) condicionelse -> . empty
    (104) empty -> .

    ELSE            shift and go to state 180
    IF              reduce using rule 104 (empty -> .)
    WRITE           reduce using rule 104 (empty -> .)
    WHILE           reduce using rule 104 (empty -> .)
    RETURN          reduce using rule 104 (empty -> .)
    FOR             reduce using rule 104 (empty -> .)
    ID              reduce using rule 104 (empty -> .)
    INT             reduce using rule 104 (empty -> .)
    FLOAT           reduce using rule 104 (empty -> .)
    CHAR            reduce using rule 104 (empty -> .)
    }               reduce using rule 104 (empty -> .)

    condicionelse                  shift and go to state 179
    empty                          shift and go to state 181

state 174

    (37) writepp -> , writeppAux . writep
    (33) writep -> . superexpresion writepAux writepp
    (34) writep -> . LETRERO writepAux2 writepp
    (51) superexpresion -> . megaexpresion superexpresionp
    (55) megaexpresion -> . exp megaexpresionp
    (63) exp -> . termino expp
    (68) termino -> . factor terminop
    (73) factor -> . constante
    (74) factor -> . lParen superexpresion rParen
    (77) constante -> . id
    (78) constante -> . CTEF ctef
    (79) constante -> . CTEI ctei
    (75) lParen -> . (
    (96) id -> . ID idp

    LETRERO         shift and go to state 100
    CTEF            shift and go to state 86
    CTEI            shift and go to state 87
    (               shift and go to state 88
    ID              shift and go to state 67

    writep                         shift and go to state 182
    superexpresion                 shift and go to state 99
    megaexpresion                  shift and go to state 79
    exp                            shift and go to state 80
    termino                        shift and go to state 81
    factor                         shift and go to state 82
    constante                      shift and go to state 83
    lParen                         shift and go to state 84
    id                             shift and go to state 85

state 175

    (38) writepp -> empty writeppAux .

    )               reduce using rule 38 (writepp -> empty writeppAux .)


state 176

    (44) while -> WHILE whileAux ( superexpresion ) whileAux2 . bloque
    (14) bloque -> . { cuerpo }

    {               shift and go to state 41

    bloque                         shift and go to state 183

state 177

    (40) for -> FOR ( id = superexpresion forAux . ; superexpresion forAux2 ) bloque forAux3

    ;               shift and go to state 184


state 178

    (50) asignacionp -> [ superexpresion ] = superexpresion ; .

    IF              reduce using rule 50 (asignacionp -> [ superexpresion ] = superexpresion ; .)
    WRITE           reduce using rule 50 (asignacionp -> [ superexpresion ] = superexpresion ; .)
    WHILE           reduce using rule 50 (asignacionp -> [ superexpresion ] = superexpresion ; .)
    RETURN          reduce using rule 50 (asignacionp -> [ superexpresion ] = superexpresion ; .)
    FOR             reduce using rule 50 (asignacionp -> [ superexpresion ] = superexpresion ; .)
    ID              reduce using rule 50 (asignacionp -> [ superexpresion ] = superexpresion ; .)
    INT             reduce using rule 50 (asignacionp -> [ superexpresion ] = superexpresion ; .)
    FLOAT           reduce using rule 50 (asignacionp -> [ superexpresion ] = superexpresion ; .)
    CHAR            reduce using rule 50 (asignacionp -> [ superexpresion ] = superexpresion ; .)
    }               reduce using rule 50 (asignacionp -> [ superexpresion ] = superexpresion ; .)


state 179

    (27) condicion -> IF ( superexpresion ) condicionAux bloque condicionelse .

    IF              reduce using rule 27 (condicion -> IF ( superexpresion ) condicionAux bloque condicionelse .)
    WRITE           reduce using rule 27 (condicion -> IF ( superexpresion ) condicionAux bloque condicionelse .)
    WHILE           reduce using rule 27 (condicion -> IF ( superexpresion ) condicionAux bloque condicionelse .)
    RETURN          reduce using rule 27 (condicion -> IF ( superexpresion ) condicionAux bloque condicionelse .)
    FOR             reduce using rule 27 (condicion -> IF ( superexpresion ) condicionAux bloque condicionelse .)
    ID              reduce using rule 27 (condicion -> IF ( superexpresion ) condicionAux bloque condicionelse .)
    INT             reduce using rule 27 (condicion -> IF ( superexpresion ) condicionAux bloque condicionelse .)
    FLOAT           reduce using rule 27 (condicion -> IF ( superexpresion ) condicionAux bloque condicionelse .)
    CHAR            reduce using rule 27 (condicion -> IF ( superexpresion ) condicionAux bloque condicionelse .)
    }               reduce using rule 27 (condicion -> IF ( superexpresion ) condicionAux bloque condicionelse .)


state 180

    (29) condicionelse -> ELSE . condicionelseAux bloque
    (31) condicionelseAux -> .

    {               reduce using rule 31 (condicionelseAux -> .)

    condicionelseAux               shift and go to state 185

state 181

    (30) condicionelse -> empty .

    IF              reduce using rule 30 (condicionelse -> empty .)
    WRITE           reduce using rule 30 (condicionelse -> empty .)
    WHILE           reduce using rule 30 (condicionelse -> empty .)
    RETURN          reduce using rule 30 (condicionelse -> empty .)
    FOR             reduce using rule 30 (condicionelse -> empty .)
    ID              reduce using rule 30 (condicionelse -> empty .)
    INT             reduce using rule 30 (condicionelse -> empty .)
    FLOAT           reduce using rule 30 (condicionelse -> empty .)
    CHAR            reduce using rule 30 (condicionelse -> empty .)
    }               reduce using rule 30 (condicionelse -> empty .)


state 182

    (37) writepp -> , writeppAux writep .

    )               reduce using rule 37 (writepp -> , writeppAux writep .)


state 183

    (44) while -> WHILE whileAux ( superexpresion ) whileAux2 bloque .

    IF              reduce using rule 44 (while -> WHILE whileAux ( superexpresion ) whileAux2 bloque .)
    WRITE           reduce using rule 44 (while -> WHILE whileAux ( superexpresion ) whileAux2 bloque .)
    WHILE           reduce using rule 44 (while -> WHILE whileAux ( superexpresion ) whileAux2 bloque .)
    RETURN          reduce using rule 44 (while -> WHILE whileAux ( superexpresion ) whileAux2 bloque .)
    FOR             reduce using rule 44 (while -> WHILE whileAux ( superexpresion ) whileAux2 bloque .)
    ID              reduce using rule 44 (while -> WHILE whileAux ( superexpresion ) whileAux2 bloque .)
    INT             reduce using rule 44 (while -> WHILE whileAux ( superexpresion ) whileAux2 bloque .)
    FLOAT           reduce using rule 44 (while -> WHILE whileAux ( superexpresion ) whileAux2 bloque .)
    CHAR            reduce using rule 44 (while -> WHILE whileAux ( superexpresion ) whileAux2 bloque .)
    }               reduce using rule 44 (while -> WHILE whileAux ( superexpresion ) whileAux2 bloque .)


state 184

    (40) for -> FOR ( id = superexpresion forAux ; . superexpresion forAux2 ) bloque forAux3
    (51) superexpresion -> . megaexpresion superexpresionp
    (55) megaexpresion -> . exp megaexpresionp
    (63) exp -> . termino expp
    (68) termino -> . factor terminop
    (73) factor -> . constante
    (74) factor -> . lParen superexpresion rParen
    (77) constante -> . id
    (78) constante -> . CTEF ctef
    (79) constante -> . CTEI ctei
    (75) lParen -> . (
    (96) id -> . ID idp

    CTEF            shift and go to state 86
    CTEI            shift and go to state 87
    (               shift and go to state 88
    ID              shift and go to state 67

    id                             shift and go to state 85
    superexpresion                 shift and go to state 186
    megaexpresion                  shift and go to state 79
    exp                            shift and go to state 80
    termino                        shift and go to state 81
    factor                         shift and go to state 82
    constante                      shift and go to state 83
    lParen                         shift and go to state 84

state 185

    (29) condicionelse -> ELSE condicionelseAux . bloque
    (14) bloque -> . { cuerpo }

    {               shift and go to state 41

    bloque                         shift and go to state 187

state 186

    (40) for -> FOR ( id = superexpresion forAux ; superexpresion . forAux2 ) bloque forAux3
    (42) forAux2 -> .

    )               reduce using rule 42 (forAux2 -> .)

    forAux2                        shift and go to state 188

state 187

    (29) condicionelse -> ELSE condicionelseAux bloque .

    IF              reduce using rule 29 (condicionelse -> ELSE condicionelseAux bloque .)
    WRITE           reduce using rule 29 (condicionelse -> ELSE condicionelseAux bloque .)
    WHILE           reduce using rule 29 (condicionelse -> ELSE condicionelseAux bloque .)
    RETURN          reduce using rule 29 (condicionelse -> ELSE condicionelseAux bloque .)
    FOR             reduce using rule 29 (condicionelse -> ELSE condicionelseAux bloque .)
    ID              reduce using rule 29 (condicionelse -> ELSE condicionelseAux bloque .)
    INT             reduce using rule 29 (condicionelse -> ELSE condicionelseAux bloque .)
    FLOAT           reduce using rule 29 (condicionelse -> ELSE condicionelseAux bloque .)
    CHAR            reduce using rule 29 (condicionelse -> ELSE condicionelseAux bloque .)
    }               reduce using rule 29 (condicionelse -> ELSE condicionelseAux bloque .)


state 188

    (40) for -> FOR ( id = superexpresion forAux ; superexpresion forAux2 . ) bloque forAux3

    )               shift and go to state 189


state 189

    (40) for -> FOR ( id = superexpresion forAux ; superexpresion forAux2 ) . bloque forAux3
    (14) bloque -> . { cuerpo }

    {               shift and go to state 41

    bloque                         shift and go to state 190

state 190

    (40) for -> FOR ( id = superexpresion forAux ; superexpresion forAux2 ) bloque . forAux3
    (43) forAux3 -> .

    IF              reduce using rule 43 (forAux3 -> .)
    WRITE           reduce using rule 43 (forAux3 -> .)
    WHILE           reduce using rule 43 (forAux3 -> .)
    RETURN          reduce using rule 43 (forAux3 -> .)
    FOR             reduce using rule 43 (forAux3 -> .)
    ID              reduce using rule 43 (forAux3 -> .)
    INT             reduce using rule 43 (forAux3 -> .)
    FLOAT           reduce using rule 43 (forAux3 -> .)
    CHAR            reduce using rule 43 (forAux3 -> .)
    }               reduce using rule 43 (forAux3 -> .)

    forAux3                        shift and go to state 191

state 191

    (40) for -> FOR ( id = superexpresion forAux ; superexpresion forAux2 ) bloque forAux3 .

    IF              reduce using rule 40 (for -> FOR ( id = superexpresion forAux ; superexpresion forAux2 ) bloque forAux3 .)
    WRITE           reduce using rule 40 (for -> FOR ( id = superexpresion forAux ; superexpresion forAux2 ) bloque forAux3 .)
    WHILE           reduce using rule 40 (for -> FOR ( id = superexpresion forAux ; superexpresion forAux2 ) bloque forAux3 .)
    RETURN          reduce using rule 40 (for -> FOR ( id = superexpresion forAux ; superexpresion forAux2 ) bloque forAux3 .)
    FOR             reduce using rule 40 (for -> FOR ( id = superexpresion forAux ; superexpresion forAux2 ) bloque forAux3 .)
    ID              reduce using rule 40 (for -> FOR ( id = superexpresion forAux ; superexpresion forAux2 ) bloque forAux3 .)
    INT             reduce using rule 40 (for -> FOR ( id = superexpresion forAux ; superexpresion forAux2 ) bloque forAux3 .)
    FLOAT           reduce using rule 40 (for -> FOR ( id = superexpresion forAux ; superexpresion forAux2 ) bloque forAux3 .)
    CHAR            reduce using rule 40 (for -> FOR ( id = superexpresion forAux ; superexpresion forAux2 ) bloque forAux3 .)
    }               reduce using rule 40 (for -> FOR ( id = superexpresion forAux ; superexpresion forAux2 ) bloque forAux3 .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for FUNCTION in state 5 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 13 resolved as shift
WARNING: shift/reduce conflict for INT in state 25 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 25 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 25 resolved as shift
WARNING: shift/reduce conflict for INT in state 41 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 41 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 41 resolved as shift
WARNING: shift/reduce conflict for IF in state 45 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 45 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 45 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 45 resolved as shift
WARNING: shift/reduce conflict for FOR in state 45 resolved as shift
WARNING: shift/reduce conflict for ID in state 45 resolved as shift
WARNING: shift/reduce conflict for INT in state 45 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 45 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 45 resolved as shift
WARNING: shift/reduce conflict for IF in state 53 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 53 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 53 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 53 resolved as shift
WARNING: shift/reduce conflict for FOR in state 53 resolved as shift
WARNING: shift/reduce conflict for ID in state 53 resolved as shift
WARNING: shift/reduce conflict for INT in state 53 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 53 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 53 resolved as shift
WARNING: shift/reduce conflict for [ in state 67 resolved as shift
WARNING: reduce/reduce conflict in state 14 resolved using rule (programaF -> empty)
WARNING: rejected rule (function -> empty) in state 14
WARNING: reduce/reduce conflict in state 54 resolved using rule (estatutop -> empty)
WARNING: rejected rule (estatuto -> empty) in state 54
WARNING: reduce/reduce conflict in state 54 resolved using rule (estatuto -> empty)
WARNING: rejected rule (varsp -> empty) in state 54
WARNING: reduce/reduce conflict in state 54 resolved using rule (estatutop -> empty)
WARNING: rejected rule (varsp -> empty) in state 54
