Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> programa
Rule 1     programa -> ID primerCuad ; vars programaF main
Rule 2     primerCuad -> <empty>
Rule 3     main -> MAIN llenarCuad ( ) bloque
Rule 4     llenarCuad -> <empty>
Rule 5     programaF -> function programaF
Rule 6     programaF -> empty
Rule 7     function -> FUNCTION tipoRetorno ID ( functionParam ) functionAux bloque functionAux2
Rule 8     function -> empty
Rule 9     functionAux -> <empty>
Rule 10    functionAux2 -> <empty>
Rule 11    tipoRetorno -> INT
Rule 12    tipoRetorno -> FLOAT
Rule 13    tipoRetorno -> VOID
Rule 14    bloque -> { cuerpo }
Rule 15    cuerpo -> vars estatutop
Rule 16    estatutop -> estatuto estatutop
Rule 17    estatutop -> empty
Rule 18    estatuto -> asignacion
Rule 19    estatuto -> condicion
Rule 20    estatuto -> write
Rule 21    estatuto -> read
Rule 22    estatuto -> while
Rule 23    estatuto -> return
Rule 24    estatuto -> for
Rule 25    estatuto -> fact
Rule 26    estatuto -> fibonacci
Rule 27    estatuto -> cuadratica
Rule 28    estatuto -> raiz
Rule 29    estatuto -> id ;
Rule 30    estatuto -> empty
Rule 31    return -> RETURN ( superexpresion ) ;
Rule 32    condicion -> IF ( superexpresion ) condicionAux bloque condicionelse
Rule 33    condicionAux -> <empty>
Rule 34    condicionelse -> ELSE condicionelseAux bloque
Rule 35    condicionelse -> empty
Rule 36    condicionelseAux -> <empty>
Rule 37    write -> WRITE ( writep ) ;
Rule 38    writep -> superexpresion writepAux writepp
Rule 39    writep -> LETRERO writepAux2 writepp
Rule 40    writepAux -> <empty>
Rule 41    writepAux2 -> <empty>
Rule 42    writepp -> , writeppAux writep
Rule 43    writepp -> writeppAux
Rule 44    writepp -> empty
Rule 45    writeppAux -> <empty>
Rule 46    read -> READ ( id ) readAux ;
Rule 47    readAux -> <empty>
Rule 48    for -> FOR ( id = superexpresion forAux ; superexpresion forAux2 ; asignacion ) bloque forAux3
Rule 49    forAux -> <empty>
Rule 50    forAux2 -> <empty>
Rule 51    forAux3 -> <empty>
Rule 52    while -> WHILE whileAux ( superexpresion ) whileAux2 bloque
Rule 53    whileAux -> <empty>
Rule 54    whileAux2 -> <empty>
Rule 55    asignacion -> vars
Rule 56    asignacion -> id asignacionp
Rule 57    asignacionp -> = superexpresion ;
Rule 58    superexpresion -> megaexpresion superexpresionp
Rule 59    superexpresionp -> AND superexpresion
Rule 60    superexpresionp -> OR superexpresion
Rule 61    superexpresionp -> empty
Rule 62    megaexpresion -> exp megaexpresionp
Rule 63    megaexpresionp -> < exp
Rule 64    megaexpresionp -> > exp
Rule 65    megaexpresionp -> EQUALS exp
Rule 66    megaexpresionp -> DIFF exp
Rule 67    megaexpresionp -> LTHANEQ exp
Rule 68    megaexpresionp -> GTHANEQ exp
Rule 69    megaexpresionp -> empty
Rule 70    exp -> termino expp
Rule 71    expp -> + pAppT exp
Rule 72    expp -> - pAppT exp
Rule 73    expp -> empty
Rule 74    pAppT -> <empty>
Rule 75    termino -> factor terminop
Rule 76    terminop -> * pAppF termino
Rule 77    terminop -> / pAppF termino
Rule 78    terminop -> empty
Rule 79    pAppF -> <empty>
Rule 80    factor -> constante
Rule 81    factor -> lParen superexpresion rParen
Rule 82    lParen -> (
Rule 83    rParen -> )
Rule 84    constante -> id
Rule 85    constante -> CTEF ctef
Rule 86    constante -> CTEI ctei
Rule 87    ctef -> <empty>
Rule 88    ctei -> <empty>
Rule 89    functionParam -> parametro
Rule 90    functionParam -> empty
Rule 91    parametro -> tipo ID parametrop
Rule 92    parametrop -> , parametro
Rule 93    parametrop -> empty
Rule 94    vars -> varsp
Rule 95    varsp -> tipo varspp ; varsp
Rule 96    varsp -> empty
Rule 97    varspp -> ID varsppp
Rule 98    varsppp -> , varspp
Rule 99    varsppp -> empty
Rule 100   tipo -> INT
Rule 101   tipo -> FLOAT
Rule 102   tipo -> CHAR
Rule 103   tipo -> ARREGLO arreglo
Rule 104   arreglo -> [ CTEI ]
Rule 105   id -> ID idp
Rule 106   idp -> ( idpp )
Rule 107   idp -> [ CTEI ]
Rule 108   idp -> empty
Rule 109   idpp -> superexpresion idppp
Rule 110   idpp -> empty
Rule 111   idppp -> , idpp
Rule 112   idppp -> empty
Rule 113   fact -> FACT ( CTEI ) ;
Rule 114   cuadratica -> CUADRATICA ( CTEI , CTEI , CTEI ) ;
Rule 115   fibonacci -> FIBONACCI ( CTEI ) ;
Rule 116   raiz -> RAIZ ( CTEI ) ;
Rule 117   empty -> <empty>

Terminals, with rules where they appear

(                    : 3 7 31 32 37 46 48 52 82 106 113 114 115 116
)                    : 3 7 31 32 37 46 48 52 83 106 113 114 115 116
*                    : 76
+                    : 71
,                    : 42 92 98 111 114 114
-                    : 72
/                    : 77
;                    : 1 29 31 37 46 48 48 57 95 113 114 115 116
<                    : 63
=                    : 48 57
>                    : 64
AND                  : 59
ARREGLO              : 103
CHAR                 : 102
CTEF                 : 85
CTEI                 : 86 104 107 113 114 114 114 115 116
CUADRATICA           : 114
DIFF                 : 66
ELSE                 : 34
EQUALS               : 65
FACT                 : 113
FIBONACCI            : 115
FLOAT                : 12 101
FOR                  : 48
FUNCTION             : 7
GTHANEQ              : 68
ID                   : 1 7 91 97 105
IF                   : 32
INT                  : 11 100
LETRERO              : 39
LTHANEQ              : 67
MAIN                 : 3
OR                   : 60
RAIZ                 : 116
READ                 : 46
RETURN               : 31
VOID                 : 13
WHILE                : 52
WRITE                : 37
[                    : 104 107
]                    : 104 107
error                : 
{                    : 14
}                    : 14

Nonterminals, with rules where they appear

arreglo              : 103
asignacion           : 18 48
asignacionp          : 56
bloque               : 3 7 32 34 48 52
condicion            : 19
condicionAux         : 32
condicionelse        : 32
condicionelseAux     : 34
constante            : 80
ctef                 : 85
ctei                 : 86
cuadratica           : 27
cuerpo               : 14
empty                : 6 8 17 30 35 44 61 69 73 78 90 93 96 99 108 110 112
estatuto             : 16
estatutop            : 15 16
exp                  : 62 63 64 65 66 67 68 71 72
expp                 : 70
fact                 : 25
factor               : 75
fibonacci            : 26
for                  : 24
forAux               : 48
forAux2              : 48
forAux3              : 48
function             : 5
functionAux          : 7
functionAux2         : 7
functionParam        : 7
id                   : 29 46 48 56 84
idp                  : 105
idpp                 : 106 111
idppp                : 109
lParen               : 81
llenarCuad           : 3
main                 : 1
megaexpresion        : 58
megaexpresionp       : 62
pAppF                : 76 77
pAppT                : 71 72
parametro            : 89 92
parametrop           : 91
primerCuad           : 1
programa             : 0
programaF            : 1 5
rParen               : 81
raiz                 : 28
read                 : 21
readAux              : 46
return               : 23
superexpresion       : 31 32 38 48 48 52 57 59 60 81 109
superexpresionp      : 58
termino              : 70 76 77
terminop             : 75
tipo                 : 91 95
tipoRetorno          : 7
vars                 : 1 15 55
varsp                : 94 95
varspp               : 95 98
varsppp              : 97
while                : 22
whileAux             : 52
whileAux2            : 52
write                : 20
writep               : 37 42
writepAux            : 38
writepAux2           : 39
writepp              : 38 39
writeppAux           : 42 43

Parsing method: LALR

state 0

    (0) S' -> . programa
    (1) programa -> . ID primerCuad ; vars programaF main

    ID              shift and go to state 2

    programa                       shift and go to state 1

state 1

    (0) S' -> programa .



state 2

    (1) programa -> ID . primerCuad ; vars programaF main
    (2) primerCuad -> .

    ;               reduce using rule 2 (primerCuad -> .)

    primerCuad                     shift and go to state 3

state 3

    (1) programa -> ID primerCuad . ; vars programaF main

    ;               shift and go to state 4


state 4

    (1) programa -> ID primerCuad ; . vars programaF main
    (94) vars -> . varsp
    (95) varsp -> . tipo varspp ; varsp
    (96) varsp -> . empty
    (100) tipo -> . INT
    (101) tipo -> . FLOAT
    (102) tipo -> . CHAR
    (103) tipo -> . ARREGLO arreglo
    (117) empty -> .

    INT             shift and go to state 9
    FLOAT           shift and go to state 10
    CHAR            shift and go to state 11
    ARREGLO         shift and go to state 12
    FUNCTION        reduce using rule 117 (empty -> .)
    MAIN            reduce using rule 117 (empty -> .)

    vars                           shift and go to state 5
    varsp                          shift and go to state 6
    tipo                           shift and go to state 7
    empty                          shift and go to state 8

state 5

    (1) programa -> ID primerCuad ; vars . programaF main
    (5) programaF -> . function programaF
    (6) programaF -> . empty
    (7) function -> . FUNCTION tipoRetorno ID ( functionParam ) functionAux bloque functionAux2
    (8) function -> . empty
    (117) empty -> .

  ! shift/reduce conflict for FUNCTION resolved as shift
    FUNCTION        shift and go to state 16
    MAIN            reduce using rule 117 (empty -> .)

  ! FUNCTION        [ reduce using rule 117 (empty -> .) ]

    programaF                      shift and go to state 13
    function                       shift and go to state 14
    empty                          shift and go to state 15

state 6

    (94) vars -> varsp .

    FUNCTION        reduce using rule 94 (vars -> varsp .)
    MAIN            reduce using rule 94 (vars -> varsp .)
    IF              reduce using rule 94 (vars -> varsp .)
    WRITE           reduce using rule 94 (vars -> varsp .)
    READ            reduce using rule 94 (vars -> varsp .)
    WHILE           reduce using rule 94 (vars -> varsp .)
    RETURN          reduce using rule 94 (vars -> varsp .)
    FOR             reduce using rule 94 (vars -> varsp .)
    FACT            reduce using rule 94 (vars -> varsp .)
    FIBONACCI       reduce using rule 94 (vars -> varsp .)
    CUADRATICA      reduce using rule 94 (vars -> varsp .)
    RAIZ            reduce using rule 94 (vars -> varsp .)
    ID              reduce using rule 94 (vars -> varsp .)
    INT             reduce using rule 94 (vars -> varsp .)
    FLOAT           reduce using rule 94 (vars -> varsp .)
    CHAR            reduce using rule 94 (vars -> varsp .)
    ARREGLO         reduce using rule 94 (vars -> varsp .)
    }               reduce using rule 94 (vars -> varsp .)
    )               reduce using rule 94 (vars -> varsp .)


state 7

    (95) varsp -> tipo . varspp ; varsp
    (97) varspp -> . ID varsppp

    ID              shift and go to state 18

    varspp                         shift and go to state 17

state 8

    (96) varsp -> empty .

    FUNCTION        reduce using rule 96 (varsp -> empty .)
    MAIN            reduce using rule 96 (varsp -> empty .)
    IF              reduce using rule 96 (varsp -> empty .)
    WRITE           reduce using rule 96 (varsp -> empty .)
    READ            reduce using rule 96 (varsp -> empty .)
    WHILE           reduce using rule 96 (varsp -> empty .)
    RETURN          reduce using rule 96 (varsp -> empty .)
    FOR             reduce using rule 96 (varsp -> empty .)
    FACT            reduce using rule 96 (varsp -> empty .)
    FIBONACCI       reduce using rule 96 (varsp -> empty .)
    CUADRATICA      reduce using rule 96 (varsp -> empty .)
    RAIZ            reduce using rule 96 (varsp -> empty .)
    ID              reduce using rule 96 (varsp -> empty .)
    INT             reduce using rule 96 (varsp -> empty .)
    FLOAT           reduce using rule 96 (varsp -> empty .)
    CHAR            reduce using rule 96 (varsp -> empty .)
    ARREGLO         reduce using rule 96 (varsp -> empty .)
    }               reduce using rule 96 (varsp -> empty .)
    )               reduce using rule 96 (varsp -> empty .)


state 9

    (100) tipo -> INT .

    ID              reduce using rule 100 (tipo -> INT .)


state 10

    (101) tipo -> FLOAT .

    ID              reduce using rule 101 (tipo -> FLOAT .)


state 11

    (102) tipo -> CHAR .

    ID              reduce using rule 102 (tipo -> CHAR .)


state 12

    (103) tipo -> ARREGLO . arreglo
    (104) arreglo -> . [ CTEI ]

    [               shift and go to state 20

    arreglo                        shift and go to state 19

state 13

    (1) programa -> ID primerCuad ; vars programaF . main
    (3) main -> . MAIN llenarCuad ( ) bloque

    MAIN            shift and go to state 22

    main                           shift and go to state 21

state 14

    (5) programaF -> function . programaF
    (5) programaF -> . function programaF
    (6) programaF -> . empty
    (7) function -> . FUNCTION tipoRetorno ID ( functionParam ) functionAux bloque functionAux2
    (8) function -> . empty
    (117) empty -> .

  ! shift/reduce conflict for FUNCTION resolved as shift
    FUNCTION        shift and go to state 16
    MAIN            reduce using rule 117 (empty -> .)

  ! FUNCTION        [ reduce using rule 117 (empty -> .) ]

    function                       shift and go to state 14
    programaF                      shift and go to state 23
    empty                          shift and go to state 15

state 15

    (6) programaF -> empty .
    (8) function -> empty .

  ! reduce/reduce conflict for MAIN resolved using rule 6 (programaF -> empty .)
    MAIN            reduce using rule 6 (programaF -> empty .)
    FUNCTION        reduce using rule 8 (function -> empty .)

  ! MAIN            [ reduce using rule 8 (function -> empty .) ]


state 16

    (7) function -> FUNCTION . tipoRetorno ID ( functionParam ) functionAux bloque functionAux2
    (11) tipoRetorno -> . INT
    (12) tipoRetorno -> . FLOAT
    (13) tipoRetorno -> . VOID

    INT             shift and go to state 25
    FLOAT           shift and go to state 26
    VOID            shift and go to state 27

    tipoRetorno                    shift and go to state 24

state 17

    (95) varsp -> tipo varspp . ; varsp

    ;               shift and go to state 28


state 18

    (97) varspp -> ID . varsppp
    (98) varsppp -> . , varspp
    (99) varsppp -> . empty
    (117) empty -> .

    ,               shift and go to state 30
    ;               reduce using rule 117 (empty -> .)

    varsppp                        shift and go to state 29
    empty                          shift and go to state 31

state 19

    (103) tipo -> ARREGLO arreglo .

    ID              reduce using rule 103 (tipo -> ARREGLO arreglo .)


state 20

    (104) arreglo -> [ . CTEI ]

    CTEI            shift and go to state 32


state 21

    (1) programa -> ID primerCuad ; vars programaF main .

    $end            reduce using rule 1 (programa -> ID primerCuad ; vars programaF main .)


state 22

    (3) main -> MAIN . llenarCuad ( ) bloque
    (4) llenarCuad -> .

    (               reduce using rule 4 (llenarCuad -> .)

    llenarCuad                     shift and go to state 33

state 23

    (5) programaF -> function programaF .

    MAIN            reduce using rule 5 (programaF -> function programaF .)


state 24

    (7) function -> FUNCTION tipoRetorno . ID ( functionParam ) functionAux bloque functionAux2

    ID              shift and go to state 34


state 25

    (11) tipoRetorno -> INT .

    ID              reduce using rule 11 (tipoRetorno -> INT .)


state 26

    (12) tipoRetorno -> FLOAT .

    ID              reduce using rule 12 (tipoRetorno -> FLOAT .)


state 27

    (13) tipoRetorno -> VOID .

    ID              reduce using rule 13 (tipoRetorno -> VOID .)


state 28

    (95) varsp -> tipo varspp ; . varsp
    (95) varsp -> . tipo varspp ; varsp
    (96) varsp -> . empty
    (100) tipo -> . INT
    (101) tipo -> . FLOAT
    (102) tipo -> . CHAR
    (103) tipo -> . ARREGLO arreglo
    (117) empty -> .

  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for ARREGLO resolved as shift
    INT             shift and go to state 9
    FLOAT           shift and go to state 10
    CHAR            shift and go to state 11
    ARREGLO         shift and go to state 12
    FUNCTION        reduce using rule 117 (empty -> .)
    MAIN            reduce using rule 117 (empty -> .)
    IF              reduce using rule 117 (empty -> .)
    WRITE           reduce using rule 117 (empty -> .)
    READ            reduce using rule 117 (empty -> .)
    WHILE           reduce using rule 117 (empty -> .)
    RETURN          reduce using rule 117 (empty -> .)
    FOR             reduce using rule 117 (empty -> .)
    FACT            reduce using rule 117 (empty -> .)
    FIBONACCI       reduce using rule 117 (empty -> .)
    CUADRATICA      reduce using rule 117 (empty -> .)
    RAIZ            reduce using rule 117 (empty -> .)
    ID              reduce using rule 117 (empty -> .)
    }               reduce using rule 117 (empty -> .)
    )               reduce using rule 117 (empty -> .)

  ! INT             [ reduce using rule 117 (empty -> .) ]
  ! FLOAT           [ reduce using rule 117 (empty -> .) ]
  ! CHAR            [ reduce using rule 117 (empty -> .) ]
  ! ARREGLO         [ reduce using rule 117 (empty -> .) ]

    tipo                           shift and go to state 7
    varsp                          shift and go to state 35
    empty                          shift and go to state 8

state 29

    (97) varspp -> ID varsppp .

    ;               reduce using rule 97 (varspp -> ID varsppp .)


state 30

    (98) varsppp -> , . varspp
    (97) varspp -> . ID varsppp

    ID              shift and go to state 18

    varspp                         shift and go to state 36

state 31

    (99) varsppp -> empty .

    ;               reduce using rule 99 (varsppp -> empty .)


state 32

    (104) arreglo -> [ CTEI . ]

    ]               shift and go to state 37


state 33

    (3) main -> MAIN llenarCuad . ( ) bloque

    (               shift and go to state 38


state 34

    (7) function -> FUNCTION tipoRetorno ID . ( functionParam ) functionAux bloque functionAux2

    (               shift and go to state 39


state 35

    (95) varsp -> tipo varspp ; varsp .

    FUNCTION        reduce using rule 95 (varsp -> tipo varspp ; varsp .)
    MAIN            reduce using rule 95 (varsp -> tipo varspp ; varsp .)
    IF              reduce using rule 95 (varsp -> tipo varspp ; varsp .)
    WRITE           reduce using rule 95 (varsp -> tipo varspp ; varsp .)
    READ            reduce using rule 95 (varsp -> tipo varspp ; varsp .)
    WHILE           reduce using rule 95 (varsp -> tipo varspp ; varsp .)
    RETURN          reduce using rule 95 (varsp -> tipo varspp ; varsp .)
    FOR             reduce using rule 95 (varsp -> tipo varspp ; varsp .)
    FACT            reduce using rule 95 (varsp -> tipo varspp ; varsp .)
    FIBONACCI       reduce using rule 95 (varsp -> tipo varspp ; varsp .)
    CUADRATICA      reduce using rule 95 (varsp -> tipo varspp ; varsp .)
    RAIZ            reduce using rule 95 (varsp -> tipo varspp ; varsp .)
    ID              reduce using rule 95 (varsp -> tipo varspp ; varsp .)
    INT             reduce using rule 95 (varsp -> tipo varspp ; varsp .)
    FLOAT           reduce using rule 95 (varsp -> tipo varspp ; varsp .)
    CHAR            reduce using rule 95 (varsp -> tipo varspp ; varsp .)
    ARREGLO         reduce using rule 95 (varsp -> tipo varspp ; varsp .)
    }               reduce using rule 95 (varsp -> tipo varspp ; varsp .)
    )               reduce using rule 95 (varsp -> tipo varspp ; varsp .)


state 36

    (98) varsppp -> , varspp .

    ;               reduce using rule 98 (varsppp -> , varspp .)


state 37

    (104) arreglo -> [ CTEI ] .

    ID              reduce using rule 104 (arreglo -> [ CTEI ] .)


state 38

    (3) main -> MAIN llenarCuad ( . ) bloque

    )               shift and go to state 40


state 39

    (7) function -> FUNCTION tipoRetorno ID ( . functionParam ) functionAux bloque functionAux2
    (89) functionParam -> . parametro
    (90) functionParam -> . empty
    (91) parametro -> . tipo ID parametrop
    (117) empty -> .
    (100) tipo -> . INT
    (101) tipo -> . FLOAT
    (102) tipo -> . CHAR
    (103) tipo -> . ARREGLO arreglo

    )               reduce using rule 117 (empty -> .)
    INT             shift and go to state 9
    FLOAT           shift and go to state 10
    CHAR            shift and go to state 11
    ARREGLO         shift and go to state 12

    functionParam                  shift and go to state 41
    parametro                      shift and go to state 42
    empty                          shift and go to state 43
    tipo                           shift and go to state 44

state 40

    (3) main -> MAIN llenarCuad ( ) . bloque
    (14) bloque -> . { cuerpo }

    {               shift and go to state 46

    bloque                         shift and go to state 45

state 41

    (7) function -> FUNCTION tipoRetorno ID ( functionParam . ) functionAux bloque functionAux2

    )               shift and go to state 47


state 42

    (89) functionParam -> parametro .

    )               reduce using rule 89 (functionParam -> parametro .)


state 43

    (90) functionParam -> empty .

    )               reduce using rule 90 (functionParam -> empty .)


state 44

    (91) parametro -> tipo . ID parametrop

    ID              shift and go to state 48


state 45

    (3) main -> MAIN llenarCuad ( ) bloque .

    $end            reduce using rule 3 (main -> MAIN llenarCuad ( ) bloque .)


state 46

    (14) bloque -> { . cuerpo }
    (15) cuerpo -> . vars estatutop
    (94) vars -> . varsp
    (95) varsp -> . tipo varspp ; varsp
    (96) varsp -> . empty
    (100) tipo -> . INT
    (101) tipo -> . FLOAT
    (102) tipo -> . CHAR
    (103) tipo -> . ARREGLO arreglo
    (117) empty -> .

  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for ARREGLO resolved as shift
    INT             shift and go to state 9
    FLOAT           shift and go to state 10
    CHAR            shift and go to state 11
    ARREGLO         shift and go to state 12
    IF              reduce using rule 117 (empty -> .)
    WRITE           reduce using rule 117 (empty -> .)
    READ            reduce using rule 117 (empty -> .)
    WHILE           reduce using rule 117 (empty -> .)
    RETURN          reduce using rule 117 (empty -> .)
    FOR             reduce using rule 117 (empty -> .)
    FACT            reduce using rule 117 (empty -> .)
    FIBONACCI       reduce using rule 117 (empty -> .)
    CUADRATICA      reduce using rule 117 (empty -> .)
    RAIZ            reduce using rule 117 (empty -> .)
    ID              reduce using rule 117 (empty -> .)
    }               reduce using rule 117 (empty -> .)

  ! INT             [ reduce using rule 117 (empty -> .) ]
  ! FLOAT           [ reduce using rule 117 (empty -> .) ]
  ! CHAR            [ reduce using rule 117 (empty -> .) ]
  ! ARREGLO         [ reduce using rule 117 (empty -> .) ]

    cuerpo                         shift and go to state 49
    vars                           shift and go to state 50
    varsp                          shift and go to state 6
    tipo                           shift and go to state 7
    empty                          shift and go to state 8

state 47

    (7) function -> FUNCTION tipoRetorno ID ( functionParam ) . functionAux bloque functionAux2
    (9) functionAux -> .

    {               reduce using rule 9 (functionAux -> .)

    functionAux                    shift and go to state 51

state 48

    (91) parametro -> tipo ID . parametrop
    (92) parametrop -> . , parametro
    (93) parametrop -> . empty
    (117) empty -> .

    ,               shift and go to state 53
    )               reduce using rule 117 (empty -> .)

    parametrop                     shift and go to state 52
    empty                          shift and go to state 54

state 49

    (14) bloque -> { cuerpo . }

    }               shift and go to state 55


state 50

    (15) cuerpo -> vars . estatutop
    (16) estatutop -> . estatuto estatutop
    (17) estatutop -> . empty
    (18) estatuto -> . asignacion
    (19) estatuto -> . condicion
    (20) estatuto -> . write
    (21) estatuto -> . read
    (22) estatuto -> . while
    (23) estatuto -> . return
    (24) estatuto -> . for
    (25) estatuto -> . fact
    (26) estatuto -> . fibonacci
    (27) estatuto -> . cuadratica
    (28) estatuto -> . raiz
    (29) estatuto -> . id ;
    (30) estatuto -> . empty
    (117) empty -> .
    (55) asignacion -> . vars
    (56) asignacion -> . id asignacionp
    (32) condicion -> . IF ( superexpresion ) condicionAux bloque condicionelse
    (37) write -> . WRITE ( writep ) ;
    (46) read -> . READ ( id ) readAux ;
    (52) while -> . WHILE whileAux ( superexpresion ) whileAux2 bloque
    (31) return -> . RETURN ( superexpresion ) ;
    (48) for -> . FOR ( id = superexpresion forAux ; superexpresion forAux2 ; asignacion ) bloque forAux3
    (113) fact -> . FACT ( CTEI ) ;
    (115) fibonacci -> . FIBONACCI ( CTEI ) ;
    (114) cuadratica -> . CUADRATICA ( CTEI , CTEI , CTEI ) ;
    (116) raiz -> . RAIZ ( CTEI ) ;
    (105) id -> . ID idp
    (94) vars -> . varsp
    (95) varsp -> . tipo varspp ; varsp
    (96) varsp -> . empty
    (100) tipo -> . INT
    (101) tipo -> . FLOAT
    (102) tipo -> . CHAR
    (103) tipo -> . ARREGLO arreglo

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for FACT resolved as shift
  ! shift/reduce conflict for FIBONACCI resolved as shift
  ! shift/reduce conflict for CUADRATICA resolved as shift
  ! shift/reduce conflict for RAIZ resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for ARREGLO resolved as shift
    }               reduce using rule 117 (empty -> .)
    IF              shift and go to state 72
    WRITE           shift and go to state 73
    READ            shift and go to state 74
    WHILE           shift and go to state 75
    RETURN          shift and go to state 76
    FOR             shift and go to state 77
    FACT            shift and go to state 78
    FIBONACCI       shift and go to state 79
    CUADRATICA      shift and go to state 80
    RAIZ            shift and go to state 81
    ID              shift and go to state 82
    INT             shift and go to state 9
    FLOAT           shift and go to state 10
    CHAR            shift and go to state 11
    ARREGLO         shift and go to state 12

  ! IF              [ reduce using rule 117 (empty -> .) ]
  ! WRITE           [ reduce using rule 117 (empty -> .) ]
  ! READ            [ reduce using rule 117 (empty -> .) ]
  ! WHILE           [ reduce using rule 117 (empty -> .) ]
  ! RETURN          [ reduce using rule 117 (empty -> .) ]
  ! FOR             [ reduce using rule 117 (empty -> .) ]
  ! FACT            [ reduce using rule 117 (empty -> .) ]
  ! FIBONACCI       [ reduce using rule 117 (empty -> .) ]
  ! CUADRATICA      [ reduce using rule 117 (empty -> .) ]
  ! RAIZ            [ reduce using rule 117 (empty -> .) ]
  ! ID              [ reduce using rule 117 (empty -> .) ]
  ! INT             [ reduce using rule 117 (empty -> .) ]
  ! FLOAT           [ reduce using rule 117 (empty -> .) ]
  ! CHAR            [ reduce using rule 117 (empty -> .) ]
  ! ARREGLO         [ reduce using rule 117 (empty -> .) ]

    vars                           shift and go to state 56
    estatutop                      shift and go to state 57
    estatuto                       shift and go to state 58
    empty                          shift and go to state 59
    asignacion                     shift and go to state 60
    condicion                      shift and go to state 61
    write                          shift and go to state 62
    read                           shift and go to state 63
    while                          shift and go to state 64
    return                         shift and go to state 65
    for                            shift and go to state 66
    fact                           shift and go to state 67
    fibonacci                      shift and go to state 68
    cuadratica                     shift and go to state 69
    raiz                           shift and go to state 70
    id                             shift and go to state 71
    varsp                          shift and go to state 6
    tipo                           shift and go to state 7

state 51

    (7) function -> FUNCTION tipoRetorno ID ( functionParam ) functionAux . bloque functionAux2
    (14) bloque -> . { cuerpo }

    {               shift and go to state 46

    bloque                         shift and go to state 83

state 52

    (91) parametro -> tipo ID parametrop .

    )               reduce using rule 91 (parametro -> tipo ID parametrop .)


state 53

    (92) parametrop -> , . parametro
    (91) parametro -> . tipo ID parametrop
    (100) tipo -> . INT
    (101) tipo -> . FLOAT
    (102) tipo -> . CHAR
    (103) tipo -> . ARREGLO arreglo

    INT             shift and go to state 9
    FLOAT           shift and go to state 10
    CHAR            shift and go to state 11
    ARREGLO         shift and go to state 12

    parametro                      shift and go to state 84
    tipo                           shift and go to state 44

state 54

    (93) parametrop -> empty .

    )               reduce using rule 93 (parametrop -> empty .)


state 55

    (14) bloque -> { cuerpo } .

    $end            reduce using rule 14 (bloque -> { cuerpo } .)
    FUNCTION        reduce using rule 14 (bloque -> { cuerpo } .)
    MAIN            reduce using rule 14 (bloque -> { cuerpo } .)
    ELSE            reduce using rule 14 (bloque -> { cuerpo } .)
    IF              reduce using rule 14 (bloque -> { cuerpo } .)
    WRITE           reduce using rule 14 (bloque -> { cuerpo } .)
    READ            reduce using rule 14 (bloque -> { cuerpo } .)
    WHILE           reduce using rule 14 (bloque -> { cuerpo } .)
    RETURN          reduce using rule 14 (bloque -> { cuerpo } .)
    FOR             reduce using rule 14 (bloque -> { cuerpo } .)
    FACT            reduce using rule 14 (bloque -> { cuerpo } .)
    FIBONACCI       reduce using rule 14 (bloque -> { cuerpo } .)
    CUADRATICA      reduce using rule 14 (bloque -> { cuerpo } .)
    RAIZ            reduce using rule 14 (bloque -> { cuerpo } .)
    ID              reduce using rule 14 (bloque -> { cuerpo } .)
    INT             reduce using rule 14 (bloque -> { cuerpo } .)
    FLOAT           reduce using rule 14 (bloque -> { cuerpo } .)
    CHAR            reduce using rule 14 (bloque -> { cuerpo } .)
    ARREGLO         reduce using rule 14 (bloque -> { cuerpo } .)
    }               reduce using rule 14 (bloque -> { cuerpo } .)


state 56

    (55) asignacion -> vars .

    IF              reduce using rule 55 (asignacion -> vars .)
    WRITE           reduce using rule 55 (asignacion -> vars .)
    READ            reduce using rule 55 (asignacion -> vars .)
    WHILE           reduce using rule 55 (asignacion -> vars .)
    RETURN          reduce using rule 55 (asignacion -> vars .)
    FOR             reduce using rule 55 (asignacion -> vars .)
    FACT            reduce using rule 55 (asignacion -> vars .)
    FIBONACCI       reduce using rule 55 (asignacion -> vars .)
    CUADRATICA      reduce using rule 55 (asignacion -> vars .)
    RAIZ            reduce using rule 55 (asignacion -> vars .)
    ID              reduce using rule 55 (asignacion -> vars .)
    INT             reduce using rule 55 (asignacion -> vars .)
    FLOAT           reduce using rule 55 (asignacion -> vars .)
    CHAR            reduce using rule 55 (asignacion -> vars .)
    ARREGLO         reduce using rule 55 (asignacion -> vars .)
    }               reduce using rule 55 (asignacion -> vars .)
    )               reduce using rule 55 (asignacion -> vars .)


state 57

    (15) cuerpo -> vars estatutop .

    }               reduce using rule 15 (cuerpo -> vars estatutop .)


state 58

    (16) estatutop -> estatuto . estatutop
    (16) estatutop -> . estatuto estatutop
    (17) estatutop -> . empty
    (18) estatuto -> . asignacion
    (19) estatuto -> . condicion
    (20) estatuto -> . write
    (21) estatuto -> . read
    (22) estatuto -> . while
    (23) estatuto -> . return
    (24) estatuto -> . for
    (25) estatuto -> . fact
    (26) estatuto -> . fibonacci
    (27) estatuto -> . cuadratica
    (28) estatuto -> . raiz
    (29) estatuto -> . id ;
    (30) estatuto -> . empty
    (117) empty -> .
    (55) asignacion -> . vars
    (56) asignacion -> . id asignacionp
    (32) condicion -> . IF ( superexpresion ) condicionAux bloque condicionelse
    (37) write -> . WRITE ( writep ) ;
    (46) read -> . READ ( id ) readAux ;
    (52) while -> . WHILE whileAux ( superexpresion ) whileAux2 bloque
    (31) return -> . RETURN ( superexpresion ) ;
    (48) for -> . FOR ( id = superexpresion forAux ; superexpresion forAux2 ; asignacion ) bloque forAux3
    (113) fact -> . FACT ( CTEI ) ;
    (115) fibonacci -> . FIBONACCI ( CTEI ) ;
    (114) cuadratica -> . CUADRATICA ( CTEI , CTEI , CTEI ) ;
    (116) raiz -> . RAIZ ( CTEI ) ;
    (105) id -> . ID idp
    (94) vars -> . varsp
    (95) varsp -> . tipo varspp ; varsp
    (96) varsp -> . empty
    (100) tipo -> . INT
    (101) tipo -> . FLOAT
    (102) tipo -> . CHAR
    (103) tipo -> . ARREGLO arreglo

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for FACT resolved as shift
  ! shift/reduce conflict for FIBONACCI resolved as shift
  ! shift/reduce conflict for CUADRATICA resolved as shift
  ! shift/reduce conflict for RAIZ resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for ARREGLO resolved as shift
    }               reduce using rule 117 (empty -> .)
    IF              shift and go to state 72
    WRITE           shift and go to state 73
    READ            shift and go to state 74
    WHILE           shift and go to state 75
    RETURN          shift and go to state 76
    FOR             shift and go to state 77
    FACT            shift and go to state 78
    FIBONACCI       shift and go to state 79
    CUADRATICA      shift and go to state 80
    RAIZ            shift and go to state 81
    ID              shift and go to state 82
    INT             shift and go to state 9
    FLOAT           shift and go to state 10
    CHAR            shift and go to state 11
    ARREGLO         shift and go to state 12

  ! IF              [ reduce using rule 117 (empty -> .) ]
  ! WRITE           [ reduce using rule 117 (empty -> .) ]
  ! READ            [ reduce using rule 117 (empty -> .) ]
  ! WHILE           [ reduce using rule 117 (empty -> .) ]
  ! RETURN          [ reduce using rule 117 (empty -> .) ]
  ! FOR             [ reduce using rule 117 (empty -> .) ]
  ! FACT            [ reduce using rule 117 (empty -> .) ]
  ! FIBONACCI       [ reduce using rule 117 (empty -> .) ]
  ! CUADRATICA      [ reduce using rule 117 (empty -> .) ]
  ! RAIZ            [ reduce using rule 117 (empty -> .) ]
  ! ID              [ reduce using rule 117 (empty -> .) ]
  ! INT             [ reduce using rule 117 (empty -> .) ]
  ! FLOAT           [ reduce using rule 117 (empty -> .) ]
  ! CHAR            [ reduce using rule 117 (empty -> .) ]
  ! ARREGLO         [ reduce using rule 117 (empty -> .) ]

    estatuto                       shift and go to state 58
    estatutop                      shift and go to state 85
    empty                          shift and go to state 59
    asignacion                     shift and go to state 60
    condicion                      shift and go to state 61
    write                          shift and go to state 62
    read                           shift and go to state 63
    while                          shift and go to state 64
    return                         shift and go to state 65
    for                            shift and go to state 66
    fact                           shift and go to state 67
    fibonacci                      shift and go to state 68
    cuadratica                     shift and go to state 69
    raiz                           shift and go to state 70
    id                             shift and go to state 71
    vars                           shift and go to state 56
    varsp                          shift and go to state 6
    tipo                           shift and go to state 7

state 59

    (17) estatutop -> empty .
    (30) estatuto -> empty .
    (96) varsp -> empty .

  ! reduce/reduce conflict for } resolved using rule 17 (estatutop -> empty .)
  ! reduce/reduce conflict for IF resolved using rule 30 (estatuto -> empty .)
  ! reduce/reduce conflict for WRITE resolved using rule 30 (estatuto -> empty .)
  ! reduce/reduce conflict for READ resolved using rule 30 (estatuto -> empty .)
  ! reduce/reduce conflict for WHILE resolved using rule 30 (estatuto -> empty .)
  ! reduce/reduce conflict for RETURN resolved using rule 30 (estatuto -> empty .)
  ! reduce/reduce conflict for FOR resolved using rule 30 (estatuto -> empty .)
  ! reduce/reduce conflict for FACT resolved using rule 30 (estatuto -> empty .)
  ! reduce/reduce conflict for FIBONACCI resolved using rule 30 (estatuto -> empty .)
  ! reduce/reduce conflict for CUADRATICA resolved using rule 30 (estatuto -> empty .)
  ! reduce/reduce conflict for RAIZ resolved using rule 30 (estatuto -> empty .)
  ! reduce/reduce conflict for ID resolved using rule 30 (estatuto -> empty .)
  ! reduce/reduce conflict for INT resolved using rule 30 (estatuto -> empty .)
  ! reduce/reduce conflict for FLOAT resolved using rule 30 (estatuto -> empty .)
  ! reduce/reduce conflict for CHAR resolved using rule 30 (estatuto -> empty .)
  ! reduce/reduce conflict for ARREGLO resolved using rule 30 (estatuto -> empty .)
  ! reduce/reduce conflict for } resolved using rule 17 (estatutop -> empty .)
    }               reduce using rule 17 (estatutop -> empty .)
    IF              reduce using rule 30 (estatuto -> empty .)
    WRITE           reduce using rule 30 (estatuto -> empty .)
    READ            reduce using rule 30 (estatuto -> empty .)
    WHILE           reduce using rule 30 (estatuto -> empty .)
    RETURN          reduce using rule 30 (estatuto -> empty .)
    FOR             reduce using rule 30 (estatuto -> empty .)
    FACT            reduce using rule 30 (estatuto -> empty .)
    FIBONACCI       reduce using rule 30 (estatuto -> empty .)
    CUADRATICA      reduce using rule 30 (estatuto -> empty .)
    RAIZ            reduce using rule 30 (estatuto -> empty .)
    ID              reduce using rule 30 (estatuto -> empty .)
    INT             reduce using rule 30 (estatuto -> empty .)
    FLOAT           reduce using rule 30 (estatuto -> empty .)
    CHAR            reduce using rule 30 (estatuto -> empty .)
    ARREGLO         reduce using rule 30 (estatuto -> empty .)

  ! }               [ reduce using rule 30 (estatuto -> empty .) ]
  ! IF              [ reduce using rule 96 (varsp -> empty .) ]
  ! WRITE           [ reduce using rule 96 (varsp -> empty .) ]
  ! READ            [ reduce using rule 96 (varsp -> empty .) ]
  ! WHILE           [ reduce using rule 96 (varsp -> empty .) ]
  ! RETURN          [ reduce using rule 96 (varsp -> empty .) ]
  ! FOR             [ reduce using rule 96 (varsp -> empty .) ]
  ! FACT            [ reduce using rule 96 (varsp -> empty .) ]
  ! FIBONACCI       [ reduce using rule 96 (varsp -> empty .) ]
  ! CUADRATICA      [ reduce using rule 96 (varsp -> empty .) ]
  ! RAIZ            [ reduce using rule 96 (varsp -> empty .) ]
  ! ID              [ reduce using rule 96 (varsp -> empty .) ]
  ! INT             [ reduce using rule 96 (varsp -> empty .) ]
  ! FLOAT           [ reduce using rule 96 (varsp -> empty .) ]
  ! CHAR            [ reduce using rule 96 (varsp -> empty .) ]
  ! ARREGLO         [ reduce using rule 96 (varsp -> empty .) ]
  ! }               [ reduce using rule 96 (varsp -> empty .) ]


state 60

    (18) estatuto -> asignacion .

    IF              reduce using rule 18 (estatuto -> asignacion .)
    WRITE           reduce using rule 18 (estatuto -> asignacion .)
    READ            reduce using rule 18 (estatuto -> asignacion .)
    WHILE           reduce using rule 18 (estatuto -> asignacion .)
    RETURN          reduce using rule 18 (estatuto -> asignacion .)
    FOR             reduce using rule 18 (estatuto -> asignacion .)
    FACT            reduce using rule 18 (estatuto -> asignacion .)
    FIBONACCI       reduce using rule 18 (estatuto -> asignacion .)
    CUADRATICA      reduce using rule 18 (estatuto -> asignacion .)
    RAIZ            reduce using rule 18 (estatuto -> asignacion .)
    ID              reduce using rule 18 (estatuto -> asignacion .)
    INT             reduce using rule 18 (estatuto -> asignacion .)
    FLOAT           reduce using rule 18 (estatuto -> asignacion .)
    CHAR            reduce using rule 18 (estatuto -> asignacion .)
    ARREGLO         reduce using rule 18 (estatuto -> asignacion .)
    }               reduce using rule 18 (estatuto -> asignacion .)


state 61

    (19) estatuto -> condicion .

    IF              reduce using rule 19 (estatuto -> condicion .)
    WRITE           reduce using rule 19 (estatuto -> condicion .)
    READ            reduce using rule 19 (estatuto -> condicion .)
    WHILE           reduce using rule 19 (estatuto -> condicion .)
    RETURN          reduce using rule 19 (estatuto -> condicion .)
    FOR             reduce using rule 19 (estatuto -> condicion .)
    FACT            reduce using rule 19 (estatuto -> condicion .)
    FIBONACCI       reduce using rule 19 (estatuto -> condicion .)
    CUADRATICA      reduce using rule 19 (estatuto -> condicion .)
    RAIZ            reduce using rule 19 (estatuto -> condicion .)
    ID              reduce using rule 19 (estatuto -> condicion .)
    INT             reduce using rule 19 (estatuto -> condicion .)
    FLOAT           reduce using rule 19 (estatuto -> condicion .)
    CHAR            reduce using rule 19 (estatuto -> condicion .)
    ARREGLO         reduce using rule 19 (estatuto -> condicion .)
    }               reduce using rule 19 (estatuto -> condicion .)


state 62

    (20) estatuto -> write .

    IF              reduce using rule 20 (estatuto -> write .)
    WRITE           reduce using rule 20 (estatuto -> write .)
    READ            reduce using rule 20 (estatuto -> write .)
    WHILE           reduce using rule 20 (estatuto -> write .)
    RETURN          reduce using rule 20 (estatuto -> write .)
    FOR             reduce using rule 20 (estatuto -> write .)
    FACT            reduce using rule 20 (estatuto -> write .)
    FIBONACCI       reduce using rule 20 (estatuto -> write .)
    CUADRATICA      reduce using rule 20 (estatuto -> write .)
    RAIZ            reduce using rule 20 (estatuto -> write .)
    ID              reduce using rule 20 (estatuto -> write .)
    INT             reduce using rule 20 (estatuto -> write .)
    FLOAT           reduce using rule 20 (estatuto -> write .)
    CHAR            reduce using rule 20 (estatuto -> write .)
    ARREGLO         reduce using rule 20 (estatuto -> write .)
    }               reduce using rule 20 (estatuto -> write .)


state 63

    (21) estatuto -> read .

    IF              reduce using rule 21 (estatuto -> read .)
    WRITE           reduce using rule 21 (estatuto -> read .)
    READ            reduce using rule 21 (estatuto -> read .)
    WHILE           reduce using rule 21 (estatuto -> read .)
    RETURN          reduce using rule 21 (estatuto -> read .)
    FOR             reduce using rule 21 (estatuto -> read .)
    FACT            reduce using rule 21 (estatuto -> read .)
    FIBONACCI       reduce using rule 21 (estatuto -> read .)
    CUADRATICA      reduce using rule 21 (estatuto -> read .)
    RAIZ            reduce using rule 21 (estatuto -> read .)
    ID              reduce using rule 21 (estatuto -> read .)
    INT             reduce using rule 21 (estatuto -> read .)
    FLOAT           reduce using rule 21 (estatuto -> read .)
    CHAR            reduce using rule 21 (estatuto -> read .)
    ARREGLO         reduce using rule 21 (estatuto -> read .)
    }               reduce using rule 21 (estatuto -> read .)


state 64

    (22) estatuto -> while .

    IF              reduce using rule 22 (estatuto -> while .)
    WRITE           reduce using rule 22 (estatuto -> while .)
    READ            reduce using rule 22 (estatuto -> while .)
    WHILE           reduce using rule 22 (estatuto -> while .)
    RETURN          reduce using rule 22 (estatuto -> while .)
    FOR             reduce using rule 22 (estatuto -> while .)
    FACT            reduce using rule 22 (estatuto -> while .)
    FIBONACCI       reduce using rule 22 (estatuto -> while .)
    CUADRATICA      reduce using rule 22 (estatuto -> while .)
    RAIZ            reduce using rule 22 (estatuto -> while .)
    ID              reduce using rule 22 (estatuto -> while .)
    INT             reduce using rule 22 (estatuto -> while .)
    FLOAT           reduce using rule 22 (estatuto -> while .)
    CHAR            reduce using rule 22 (estatuto -> while .)
    ARREGLO         reduce using rule 22 (estatuto -> while .)
    }               reduce using rule 22 (estatuto -> while .)


state 65

    (23) estatuto -> return .

    IF              reduce using rule 23 (estatuto -> return .)
    WRITE           reduce using rule 23 (estatuto -> return .)
    READ            reduce using rule 23 (estatuto -> return .)
    WHILE           reduce using rule 23 (estatuto -> return .)
    RETURN          reduce using rule 23 (estatuto -> return .)
    FOR             reduce using rule 23 (estatuto -> return .)
    FACT            reduce using rule 23 (estatuto -> return .)
    FIBONACCI       reduce using rule 23 (estatuto -> return .)
    CUADRATICA      reduce using rule 23 (estatuto -> return .)
    RAIZ            reduce using rule 23 (estatuto -> return .)
    ID              reduce using rule 23 (estatuto -> return .)
    INT             reduce using rule 23 (estatuto -> return .)
    FLOAT           reduce using rule 23 (estatuto -> return .)
    CHAR            reduce using rule 23 (estatuto -> return .)
    ARREGLO         reduce using rule 23 (estatuto -> return .)
    }               reduce using rule 23 (estatuto -> return .)


state 66

    (24) estatuto -> for .

    IF              reduce using rule 24 (estatuto -> for .)
    WRITE           reduce using rule 24 (estatuto -> for .)
    READ            reduce using rule 24 (estatuto -> for .)
    WHILE           reduce using rule 24 (estatuto -> for .)
    RETURN          reduce using rule 24 (estatuto -> for .)
    FOR             reduce using rule 24 (estatuto -> for .)
    FACT            reduce using rule 24 (estatuto -> for .)
    FIBONACCI       reduce using rule 24 (estatuto -> for .)
    CUADRATICA      reduce using rule 24 (estatuto -> for .)
    RAIZ            reduce using rule 24 (estatuto -> for .)
    ID              reduce using rule 24 (estatuto -> for .)
    INT             reduce using rule 24 (estatuto -> for .)
    FLOAT           reduce using rule 24 (estatuto -> for .)
    CHAR            reduce using rule 24 (estatuto -> for .)
    ARREGLO         reduce using rule 24 (estatuto -> for .)
    }               reduce using rule 24 (estatuto -> for .)


state 67

    (25) estatuto -> fact .

    IF              reduce using rule 25 (estatuto -> fact .)
    WRITE           reduce using rule 25 (estatuto -> fact .)
    READ            reduce using rule 25 (estatuto -> fact .)
    WHILE           reduce using rule 25 (estatuto -> fact .)
    RETURN          reduce using rule 25 (estatuto -> fact .)
    FOR             reduce using rule 25 (estatuto -> fact .)
    FACT            reduce using rule 25 (estatuto -> fact .)
    FIBONACCI       reduce using rule 25 (estatuto -> fact .)
    CUADRATICA      reduce using rule 25 (estatuto -> fact .)
    RAIZ            reduce using rule 25 (estatuto -> fact .)
    ID              reduce using rule 25 (estatuto -> fact .)
    INT             reduce using rule 25 (estatuto -> fact .)
    FLOAT           reduce using rule 25 (estatuto -> fact .)
    CHAR            reduce using rule 25 (estatuto -> fact .)
    ARREGLO         reduce using rule 25 (estatuto -> fact .)
    }               reduce using rule 25 (estatuto -> fact .)


state 68

    (26) estatuto -> fibonacci .

    IF              reduce using rule 26 (estatuto -> fibonacci .)
    WRITE           reduce using rule 26 (estatuto -> fibonacci .)
    READ            reduce using rule 26 (estatuto -> fibonacci .)
    WHILE           reduce using rule 26 (estatuto -> fibonacci .)
    RETURN          reduce using rule 26 (estatuto -> fibonacci .)
    FOR             reduce using rule 26 (estatuto -> fibonacci .)
    FACT            reduce using rule 26 (estatuto -> fibonacci .)
    FIBONACCI       reduce using rule 26 (estatuto -> fibonacci .)
    CUADRATICA      reduce using rule 26 (estatuto -> fibonacci .)
    RAIZ            reduce using rule 26 (estatuto -> fibonacci .)
    ID              reduce using rule 26 (estatuto -> fibonacci .)
    INT             reduce using rule 26 (estatuto -> fibonacci .)
    FLOAT           reduce using rule 26 (estatuto -> fibonacci .)
    CHAR            reduce using rule 26 (estatuto -> fibonacci .)
    ARREGLO         reduce using rule 26 (estatuto -> fibonacci .)
    }               reduce using rule 26 (estatuto -> fibonacci .)


state 69

    (27) estatuto -> cuadratica .

    IF              reduce using rule 27 (estatuto -> cuadratica .)
    WRITE           reduce using rule 27 (estatuto -> cuadratica .)
    READ            reduce using rule 27 (estatuto -> cuadratica .)
    WHILE           reduce using rule 27 (estatuto -> cuadratica .)
    RETURN          reduce using rule 27 (estatuto -> cuadratica .)
    FOR             reduce using rule 27 (estatuto -> cuadratica .)
    FACT            reduce using rule 27 (estatuto -> cuadratica .)
    FIBONACCI       reduce using rule 27 (estatuto -> cuadratica .)
    CUADRATICA      reduce using rule 27 (estatuto -> cuadratica .)
    RAIZ            reduce using rule 27 (estatuto -> cuadratica .)
    ID              reduce using rule 27 (estatuto -> cuadratica .)
    INT             reduce using rule 27 (estatuto -> cuadratica .)
    FLOAT           reduce using rule 27 (estatuto -> cuadratica .)
    CHAR            reduce using rule 27 (estatuto -> cuadratica .)
    ARREGLO         reduce using rule 27 (estatuto -> cuadratica .)
    }               reduce using rule 27 (estatuto -> cuadratica .)


state 70

    (28) estatuto -> raiz .

    IF              reduce using rule 28 (estatuto -> raiz .)
    WRITE           reduce using rule 28 (estatuto -> raiz .)
    READ            reduce using rule 28 (estatuto -> raiz .)
    WHILE           reduce using rule 28 (estatuto -> raiz .)
    RETURN          reduce using rule 28 (estatuto -> raiz .)
    FOR             reduce using rule 28 (estatuto -> raiz .)
    FACT            reduce using rule 28 (estatuto -> raiz .)
    FIBONACCI       reduce using rule 28 (estatuto -> raiz .)
    CUADRATICA      reduce using rule 28 (estatuto -> raiz .)
    RAIZ            reduce using rule 28 (estatuto -> raiz .)
    ID              reduce using rule 28 (estatuto -> raiz .)
    INT             reduce using rule 28 (estatuto -> raiz .)
    FLOAT           reduce using rule 28 (estatuto -> raiz .)
    CHAR            reduce using rule 28 (estatuto -> raiz .)
    ARREGLO         reduce using rule 28 (estatuto -> raiz .)
    }               reduce using rule 28 (estatuto -> raiz .)


state 71

    (29) estatuto -> id . ;
    (56) asignacion -> id . asignacionp
    (57) asignacionp -> . = superexpresion ;

    ;               shift and go to state 86
    =               shift and go to state 88

    asignacionp                    shift and go to state 87

state 72

    (32) condicion -> IF . ( superexpresion ) condicionAux bloque condicionelse

    (               shift and go to state 89


state 73

    (37) write -> WRITE . ( writep ) ;

    (               shift and go to state 90


state 74

    (46) read -> READ . ( id ) readAux ;

    (               shift and go to state 91


state 75

    (52) while -> WHILE . whileAux ( superexpresion ) whileAux2 bloque
    (53) whileAux -> .

    (               reduce using rule 53 (whileAux -> .)

    whileAux                       shift and go to state 92

state 76

    (31) return -> RETURN . ( superexpresion ) ;

    (               shift and go to state 93


state 77

    (48) for -> FOR . ( id = superexpresion forAux ; superexpresion forAux2 ; asignacion ) bloque forAux3

    (               shift and go to state 94


state 78

    (113) fact -> FACT . ( CTEI ) ;

    (               shift and go to state 95


state 79

    (115) fibonacci -> FIBONACCI . ( CTEI ) ;

    (               shift and go to state 96


state 80

    (114) cuadratica -> CUADRATICA . ( CTEI , CTEI , CTEI ) ;

    (               shift and go to state 97


state 81

    (116) raiz -> RAIZ . ( CTEI ) ;

    (               shift and go to state 98


state 82

    (105) id -> ID . idp
    (106) idp -> . ( idpp )
    (107) idp -> . [ CTEI ]
    (108) idp -> . empty
    (117) empty -> .

    (               shift and go to state 100
    [               shift and go to state 101
    ;               reduce using rule 117 (empty -> .)
    =               reduce using rule 117 (empty -> .)
    *               reduce using rule 117 (empty -> .)
    /               reduce using rule 117 (empty -> .)
    +               reduce using rule 117 (empty -> .)
    -               reduce using rule 117 (empty -> .)
    <               reduce using rule 117 (empty -> .)
    >               reduce using rule 117 (empty -> .)
    EQUALS          reduce using rule 117 (empty -> .)
    DIFF            reduce using rule 117 (empty -> .)
    LTHANEQ         reduce using rule 117 (empty -> .)
    GTHANEQ         reduce using rule 117 (empty -> .)
    AND             reduce using rule 117 (empty -> .)
    OR              reduce using rule 117 (empty -> .)
    )               reduce using rule 117 (empty -> .)
    ,               reduce using rule 117 (empty -> .)

    idp                            shift and go to state 99
    empty                          shift and go to state 102

state 83

    (7) function -> FUNCTION tipoRetorno ID ( functionParam ) functionAux bloque . functionAux2
    (10) functionAux2 -> .

    FUNCTION        reduce using rule 10 (functionAux2 -> .)
    MAIN            reduce using rule 10 (functionAux2 -> .)

    functionAux2                   shift and go to state 103

state 84

    (92) parametrop -> , parametro .

    )               reduce using rule 92 (parametrop -> , parametro .)


state 85

    (16) estatutop -> estatuto estatutop .

    }               reduce using rule 16 (estatutop -> estatuto estatutop .)


state 86

    (29) estatuto -> id ; .

    IF              reduce using rule 29 (estatuto -> id ; .)
    WRITE           reduce using rule 29 (estatuto -> id ; .)
    READ            reduce using rule 29 (estatuto -> id ; .)
    WHILE           reduce using rule 29 (estatuto -> id ; .)
    RETURN          reduce using rule 29 (estatuto -> id ; .)
    FOR             reduce using rule 29 (estatuto -> id ; .)
    FACT            reduce using rule 29 (estatuto -> id ; .)
    FIBONACCI       reduce using rule 29 (estatuto -> id ; .)
    CUADRATICA      reduce using rule 29 (estatuto -> id ; .)
    RAIZ            reduce using rule 29 (estatuto -> id ; .)
    ID              reduce using rule 29 (estatuto -> id ; .)
    INT             reduce using rule 29 (estatuto -> id ; .)
    FLOAT           reduce using rule 29 (estatuto -> id ; .)
    CHAR            reduce using rule 29 (estatuto -> id ; .)
    ARREGLO         reduce using rule 29 (estatuto -> id ; .)
    }               reduce using rule 29 (estatuto -> id ; .)


state 87

    (56) asignacion -> id asignacionp .

    IF              reduce using rule 56 (asignacion -> id asignacionp .)
    WRITE           reduce using rule 56 (asignacion -> id asignacionp .)
    READ            reduce using rule 56 (asignacion -> id asignacionp .)
    WHILE           reduce using rule 56 (asignacion -> id asignacionp .)
    RETURN          reduce using rule 56 (asignacion -> id asignacionp .)
    FOR             reduce using rule 56 (asignacion -> id asignacionp .)
    FACT            reduce using rule 56 (asignacion -> id asignacionp .)
    FIBONACCI       reduce using rule 56 (asignacion -> id asignacionp .)
    CUADRATICA      reduce using rule 56 (asignacion -> id asignacionp .)
    RAIZ            reduce using rule 56 (asignacion -> id asignacionp .)
    ID              reduce using rule 56 (asignacion -> id asignacionp .)
    INT             reduce using rule 56 (asignacion -> id asignacionp .)
    FLOAT           reduce using rule 56 (asignacion -> id asignacionp .)
    CHAR            reduce using rule 56 (asignacion -> id asignacionp .)
    ARREGLO         reduce using rule 56 (asignacion -> id asignacionp .)
    }               reduce using rule 56 (asignacion -> id asignacionp .)
    )               reduce using rule 56 (asignacion -> id asignacionp .)


state 88

    (57) asignacionp -> = . superexpresion ;
    (58) superexpresion -> . megaexpresion superexpresionp
    (62) megaexpresion -> . exp megaexpresionp
    (70) exp -> . termino expp
    (75) termino -> . factor terminop
    (80) factor -> . constante
    (81) factor -> . lParen superexpresion rParen
    (84) constante -> . id
    (85) constante -> . CTEF ctef
    (86) constante -> . CTEI ctei
    (82) lParen -> . (
    (105) id -> . ID idp

    CTEF            shift and go to state 112
    CTEI            shift and go to state 113
    (               shift and go to state 114
    ID              shift and go to state 82

    superexpresion                 shift and go to state 104
    megaexpresion                  shift and go to state 105
    exp                            shift and go to state 106
    termino                        shift and go to state 107
    factor                         shift and go to state 108
    constante                      shift and go to state 109
    lParen                         shift and go to state 110
    id                             shift and go to state 111

state 89

    (32) condicion -> IF ( . superexpresion ) condicionAux bloque condicionelse
    (58) superexpresion -> . megaexpresion superexpresionp
    (62) megaexpresion -> . exp megaexpresionp
    (70) exp -> . termino expp
    (75) termino -> . factor terminop
    (80) factor -> . constante
    (81) factor -> . lParen superexpresion rParen
    (84) constante -> . id
    (85) constante -> . CTEF ctef
    (86) constante -> . CTEI ctei
    (82) lParen -> . (
    (105) id -> . ID idp

    CTEF            shift and go to state 112
    CTEI            shift and go to state 113
    (               shift and go to state 114
    ID              shift and go to state 82

    superexpresion                 shift and go to state 115
    megaexpresion                  shift and go to state 105
    exp                            shift and go to state 106
    termino                        shift and go to state 107
    factor                         shift and go to state 108
    constante                      shift and go to state 109
    lParen                         shift and go to state 110
    id                             shift and go to state 111

state 90

    (37) write -> WRITE ( . writep ) ;
    (38) writep -> . superexpresion writepAux writepp
    (39) writep -> . LETRERO writepAux2 writepp
    (58) superexpresion -> . megaexpresion superexpresionp
    (62) megaexpresion -> . exp megaexpresionp
    (70) exp -> . termino expp
    (75) termino -> . factor terminop
    (80) factor -> . constante
    (81) factor -> . lParen superexpresion rParen
    (84) constante -> . id
    (85) constante -> . CTEF ctef
    (86) constante -> . CTEI ctei
    (82) lParen -> . (
    (105) id -> . ID idp

    LETRERO         shift and go to state 118
    CTEF            shift and go to state 112
    CTEI            shift and go to state 113
    (               shift and go to state 114
    ID              shift and go to state 82

    writep                         shift and go to state 116
    superexpresion                 shift and go to state 117
    megaexpresion                  shift and go to state 105
    exp                            shift and go to state 106
    termino                        shift and go to state 107
    factor                         shift and go to state 108
    constante                      shift and go to state 109
    lParen                         shift and go to state 110
    id                             shift and go to state 111

state 91

    (46) read -> READ ( . id ) readAux ;
    (105) id -> . ID idp

    ID              shift and go to state 82

    id                             shift and go to state 119

state 92

    (52) while -> WHILE whileAux . ( superexpresion ) whileAux2 bloque

    (               shift and go to state 120


state 93

    (31) return -> RETURN ( . superexpresion ) ;
    (58) superexpresion -> . megaexpresion superexpresionp
    (62) megaexpresion -> . exp megaexpresionp
    (70) exp -> . termino expp
    (75) termino -> . factor terminop
    (80) factor -> . constante
    (81) factor -> . lParen superexpresion rParen
    (84) constante -> . id
    (85) constante -> . CTEF ctef
    (86) constante -> . CTEI ctei
    (82) lParen -> . (
    (105) id -> . ID idp

    CTEF            shift and go to state 112
    CTEI            shift and go to state 113
    (               shift and go to state 114
    ID              shift and go to state 82

    superexpresion                 shift and go to state 121
    megaexpresion                  shift and go to state 105
    exp                            shift and go to state 106
    termino                        shift and go to state 107
    factor                         shift and go to state 108
    constante                      shift and go to state 109
    lParen                         shift and go to state 110
    id                             shift and go to state 111

state 94

    (48) for -> FOR ( . id = superexpresion forAux ; superexpresion forAux2 ; asignacion ) bloque forAux3
    (105) id -> . ID idp

    ID              shift and go to state 82

    id                             shift and go to state 122

state 95

    (113) fact -> FACT ( . CTEI ) ;

    CTEI            shift and go to state 123


state 96

    (115) fibonacci -> FIBONACCI ( . CTEI ) ;

    CTEI            shift and go to state 124


state 97

    (114) cuadratica -> CUADRATICA ( . CTEI , CTEI , CTEI ) ;

    CTEI            shift and go to state 125


state 98

    (116) raiz -> RAIZ ( . CTEI ) ;

    CTEI            shift and go to state 126


state 99

    (105) id -> ID idp .

    ;               reduce using rule 105 (id -> ID idp .)
    =               reduce using rule 105 (id -> ID idp .)
    *               reduce using rule 105 (id -> ID idp .)
    /               reduce using rule 105 (id -> ID idp .)
    +               reduce using rule 105 (id -> ID idp .)
    -               reduce using rule 105 (id -> ID idp .)
    <               reduce using rule 105 (id -> ID idp .)
    >               reduce using rule 105 (id -> ID idp .)
    EQUALS          reduce using rule 105 (id -> ID idp .)
    DIFF            reduce using rule 105 (id -> ID idp .)
    LTHANEQ         reduce using rule 105 (id -> ID idp .)
    GTHANEQ         reduce using rule 105 (id -> ID idp .)
    AND             reduce using rule 105 (id -> ID idp .)
    OR              reduce using rule 105 (id -> ID idp .)
    )               reduce using rule 105 (id -> ID idp .)
    ,               reduce using rule 105 (id -> ID idp .)


state 100

    (106) idp -> ( . idpp )
    (109) idpp -> . superexpresion idppp
    (110) idpp -> . empty
    (58) superexpresion -> . megaexpresion superexpresionp
    (117) empty -> .
    (62) megaexpresion -> . exp megaexpresionp
    (70) exp -> . termino expp
    (75) termino -> . factor terminop
    (80) factor -> . constante
    (81) factor -> . lParen superexpresion rParen
    (84) constante -> . id
    (85) constante -> . CTEF ctef
    (86) constante -> . CTEI ctei
    (82) lParen -> . (
    (105) id -> . ID idp

    )               reduce using rule 117 (empty -> .)
    CTEF            shift and go to state 112
    CTEI            shift and go to state 113
    (               shift and go to state 114
    ID              shift and go to state 82

    idpp                           shift and go to state 127
    superexpresion                 shift and go to state 128
    empty                          shift and go to state 129
    megaexpresion                  shift and go to state 105
    exp                            shift and go to state 106
    termino                        shift and go to state 107
    factor                         shift and go to state 108
    constante                      shift and go to state 109
    lParen                         shift and go to state 110
    id                             shift and go to state 111

state 101

    (107) idp -> [ . CTEI ]

    CTEI            shift and go to state 130


state 102

    (108) idp -> empty .

    ;               reduce using rule 108 (idp -> empty .)
    =               reduce using rule 108 (idp -> empty .)
    *               reduce using rule 108 (idp -> empty .)
    /               reduce using rule 108 (idp -> empty .)
    +               reduce using rule 108 (idp -> empty .)
    -               reduce using rule 108 (idp -> empty .)
    <               reduce using rule 108 (idp -> empty .)
    >               reduce using rule 108 (idp -> empty .)
    EQUALS          reduce using rule 108 (idp -> empty .)
    DIFF            reduce using rule 108 (idp -> empty .)
    LTHANEQ         reduce using rule 108 (idp -> empty .)
    GTHANEQ         reduce using rule 108 (idp -> empty .)
    AND             reduce using rule 108 (idp -> empty .)
    OR              reduce using rule 108 (idp -> empty .)
    )               reduce using rule 108 (idp -> empty .)
    ,               reduce using rule 108 (idp -> empty .)


state 103

    (7) function -> FUNCTION tipoRetorno ID ( functionParam ) functionAux bloque functionAux2 .

    FUNCTION        reduce using rule 7 (function -> FUNCTION tipoRetorno ID ( functionParam ) functionAux bloque functionAux2 .)
    MAIN            reduce using rule 7 (function -> FUNCTION tipoRetorno ID ( functionParam ) functionAux bloque functionAux2 .)


state 104

    (57) asignacionp -> = superexpresion . ;

    ;               shift and go to state 131


state 105

    (58) superexpresion -> megaexpresion . superexpresionp
    (59) superexpresionp -> . AND superexpresion
    (60) superexpresionp -> . OR superexpresion
    (61) superexpresionp -> . empty
    (117) empty -> .

    AND             shift and go to state 133
    OR              shift and go to state 134
    ;               reduce using rule 117 (empty -> .)
    )               reduce using rule 117 (empty -> .)
    ,               reduce using rule 117 (empty -> .)

    superexpresionp                shift and go to state 132
    empty                          shift and go to state 135

state 106

    (62) megaexpresion -> exp . megaexpresionp
    (63) megaexpresionp -> . < exp
    (64) megaexpresionp -> . > exp
    (65) megaexpresionp -> . EQUALS exp
    (66) megaexpresionp -> . DIFF exp
    (67) megaexpresionp -> . LTHANEQ exp
    (68) megaexpresionp -> . GTHANEQ exp
    (69) megaexpresionp -> . empty
    (117) empty -> .

    <               shift and go to state 137
    >               shift and go to state 138
    EQUALS          shift and go to state 139
    DIFF            shift and go to state 140
    LTHANEQ         shift and go to state 141
    GTHANEQ         shift and go to state 142
    AND             reduce using rule 117 (empty -> .)
    OR              reduce using rule 117 (empty -> .)
    ;               reduce using rule 117 (empty -> .)
    )               reduce using rule 117 (empty -> .)
    ,               reduce using rule 117 (empty -> .)

    megaexpresionp                 shift and go to state 136
    empty                          shift and go to state 143

state 107

    (70) exp -> termino . expp
    (71) expp -> . + pAppT exp
    (72) expp -> . - pAppT exp
    (73) expp -> . empty
    (117) empty -> .

    +               shift and go to state 145
    -               shift and go to state 146
    <               reduce using rule 117 (empty -> .)
    >               reduce using rule 117 (empty -> .)
    EQUALS          reduce using rule 117 (empty -> .)
    DIFF            reduce using rule 117 (empty -> .)
    LTHANEQ         reduce using rule 117 (empty -> .)
    GTHANEQ         reduce using rule 117 (empty -> .)
    AND             reduce using rule 117 (empty -> .)
    OR              reduce using rule 117 (empty -> .)
    ;               reduce using rule 117 (empty -> .)
    )               reduce using rule 117 (empty -> .)
    ,               reduce using rule 117 (empty -> .)

    expp                           shift and go to state 144
    empty                          shift and go to state 147

state 108

    (75) termino -> factor . terminop
    (76) terminop -> . * pAppF termino
    (77) terminop -> . / pAppF termino
    (78) terminop -> . empty
    (117) empty -> .

    *               shift and go to state 149
    /               shift and go to state 150
    +               reduce using rule 117 (empty -> .)
    -               reduce using rule 117 (empty -> .)
    <               reduce using rule 117 (empty -> .)
    >               reduce using rule 117 (empty -> .)
    EQUALS          reduce using rule 117 (empty -> .)
    DIFF            reduce using rule 117 (empty -> .)
    LTHANEQ         reduce using rule 117 (empty -> .)
    GTHANEQ         reduce using rule 117 (empty -> .)
    AND             reduce using rule 117 (empty -> .)
    OR              reduce using rule 117 (empty -> .)
    ;               reduce using rule 117 (empty -> .)
    )               reduce using rule 117 (empty -> .)
    ,               reduce using rule 117 (empty -> .)

    terminop                       shift and go to state 148
    empty                          shift and go to state 151

state 109

    (80) factor -> constante .

    *               reduce using rule 80 (factor -> constante .)
    /               reduce using rule 80 (factor -> constante .)
    +               reduce using rule 80 (factor -> constante .)
    -               reduce using rule 80 (factor -> constante .)
    <               reduce using rule 80 (factor -> constante .)
    >               reduce using rule 80 (factor -> constante .)
    EQUALS          reduce using rule 80 (factor -> constante .)
    DIFF            reduce using rule 80 (factor -> constante .)
    LTHANEQ         reduce using rule 80 (factor -> constante .)
    GTHANEQ         reduce using rule 80 (factor -> constante .)
    AND             reduce using rule 80 (factor -> constante .)
    OR              reduce using rule 80 (factor -> constante .)
    ;               reduce using rule 80 (factor -> constante .)
    )               reduce using rule 80 (factor -> constante .)
    ,               reduce using rule 80 (factor -> constante .)


state 110

    (81) factor -> lParen . superexpresion rParen
    (58) superexpresion -> . megaexpresion superexpresionp
    (62) megaexpresion -> . exp megaexpresionp
    (70) exp -> . termino expp
    (75) termino -> . factor terminop
    (80) factor -> . constante
    (81) factor -> . lParen superexpresion rParen
    (84) constante -> . id
    (85) constante -> . CTEF ctef
    (86) constante -> . CTEI ctei
    (82) lParen -> . (
    (105) id -> . ID idp

    CTEF            shift and go to state 112
    CTEI            shift and go to state 113
    (               shift and go to state 114
    ID              shift and go to state 82

    lParen                         shift and go to state 110
    superexpresion                 shift and go to state 152
    megaexpresion                  shift and go to state 105
    exp                            shift and go to state 106
    termino                        shift and go to state 107
    factor                         shift and go to state 108
    constante                      shift and go to state 109
    id                             shift and go to state 111

state 111

    (84) constante -> id .

    *               reduce using rule 84 (constante -> id .)
    /               reduce using rule 84 (constante -> id .)
    +               reduce using rule 84 (constante -> id .)
    -               reduce using rule 84 (constante -> id .)
    <               reduce using rule 84 (constante -> id .)
    >               reduce using rule 84 (constante -> id .)
    EQUALS          reduce using rule 84 (constante -> id .)
    DIFF            reduce using rule 84 (constante -> id .)
    LTHANEQ         reduce using rule 84 (constante -> id .)
    GTHANEQ         reduce using rule 84 (constante -> id .)
    AND             reduce using rule 84 (constante -> id .)
    OR              reduce using rule 84 (constante -> id .)
    ;               reduce using rule 84 (constante -> id .)
    )               reduce using rule 84 (constante -> id .)
    ,               reduce using rule 84 (constante -> id .)


state 112

    (85) constante -> CTEF . ctef
    (87) ctef -> .

    *               reduce using rule 87 (ctef -> .)
    /               reduce using rule 87 (ctef -> .)
    +               reduce using rule 87 (ctef -> .)
    -               reduce using rule 87 (ctef -> .)
    <               reduce using rule 87 (ctef -> .)
    >               reduce using rule 87 (ctef -> .)
    EQUALS          reduce using rule 87 (ctef -> .)
    DIFF            reduce using rule 87 (ctef -> .)
    LTHANEQ         reduce using rule 87 (ctef -> .)
    GTHANEQ         reduce using rule 87 (ctef -> .)
    AND             reduce using rule 87 (ctef -> .)
    OR              reduce using rule 87 (ctef -> .)
    ;               reduce using rule 87 (ctef -> .)
    )               reduce using rule 87 (ctef -> .)
    ,               reduce using rule 87 (ctef -> .)

    ctef                           shift and go to state 153

state 113

    (86) constante -> CTEI . ctei
    (88) ctei -> .

    *               reduce using rule 88 (ctei -> .)
    /               reduce using rule 88 (ctei -> .)
    +               reduce using rule 88 (ctei -> .)
    -               reduce using rule 88 (ctei -> .)
    <               reduce using rule 88 (ctei -> .)
    >               reduce using rule 88 (ctei -> .)
    EQUALS          reduce using rule 88 (ctei -> .)
    DIFF            reduce using rule 88 (ctei -> .)
    LTHANEQ         reduce using rule 88 (ctei -> .)
    GTHANEQ         reduce using rule 88 (ctei -> .)
    AND             reduce using rule 88 (ctei -> .)
    OR              reduce using rule 88 (ctei -> .)
    ;               reduce using rule 88 (ctei -> .)
    )               reduce using rule 88 (ctei -> .)
    ,               reduce using rule 88 (ctei -> .)

    ctei                           shift and go to state 154

state 114

    (82) lParen -> ( .

    CTEF            reduce using rule 82 (lParen -> ( .)
    CTEI            reduce using rule 82 (lParen -> ( .)
    (               reduce using rule 82 (lParen -> ( .)
    ID              reduce using rule 82 (lParen -> ( .)


state 115

    (32) condicion -> IF ( superexpresion . ) condicionAux bloque condicionelse

    )               shift and go to state 155


state 116

    (37) write -> WRITE ( writep . ) ;

    )               shift and go to state 156


state 117

    (38) writep -> superexpresion . writepAux writepp
    (40) writepAux -> .

    ,               reduce using rule 40 (writepAux -> .)
    )               reduce using rule 40 (writepAux -> .)

    writepAux                      shift and go to state 157

state 118

    (39) writep -> LETRERO . writepAux2 writepp
    (41) writepAux2 -> .

    ,               reduce using rule 41 (writepAux2 -> .)
    )               reduce using rule 41 (writepAux2 -> .)

    writepAux2                     shift and go to state 158

state 119

    (46) read -> READ ( id . ) readAux ;

    )               shift and go to state 159


state 120

    (52) while -> WHILE whileAux ( . superexpresion ) whileAux2 bloque
    (58) superexpresion -> . megaexpresion superexpresionp
    (62) megaexpresion -> . exp megaexpresionp
    (70) exp -> . termino expp
    (75) termino -> . factor terminop
    (80) factor -> . constante
    (81) factor -> . lParen superexpresion rParen
    (84) constante -> . id
    (85) constante -> . CTEF ctef
    (86) constante -> . CTEI ctei
    (82) lParen -> . (
    (105) id -> . ID idp

    CTEF            shift and go to state 112
    CTEI            shift and go to state 113
    (               shift and go to state 114
    ID              shift and go to state 82

    superexpresion                 shift and go to state 160
    megaexpresion                  shift and go to state 105
    exp                            shift and go to state 106
    termino                        shift and go to state 107
    factor                         shift and go to state 108
    constante                      shift and go to state 109
    lParen                         shift and go to state 110
    id                             shift and go to state 111

state 121

    (31) return -> RETURN ( superexpresion . ) ;

    )               shift and go to state 161


state 122

    (48) for -> FOR ( id . = superexpresion forAux ; superexpresion forAux2 ; asignacion ) bloque forAux3

    =               shift and go to state 162


state 123

    (113) fact -> FACT ( CTEI . ) ;

    )               shift and go to state 163


state 124

    (115) fibonacci -> FIBONACCI ( CTEI . ) ;

    )               shift and go to state 164


state 125

    (114) cuadratica -> CUADRATICA ( CTEI . , CTEI , CTEI ) ;

    ,               shift and go to state 165


state 126

    (116) raiz -> RAIZ ( CTEI . ) ;

    )               shift and go to state 166


state 127

    (106) idp -> ( idpp . )

    )               shift and go to state 167


state 128

    (109) idpp -> superexpresion . idppp
    (111) idppp -> . , idpp
    (112) idppp -> . empty
    (117) empty -> .

    ,               shift and go to state 169
    )               reduce using rule 117 (empty -> .)

    idppp                          shift and go to state 168
    empty                          shift and go to state 170

state 129

    (110) idpp -> empty .

    )               reduce using rule 110 (idpp -> empty .)


state 130

    (107) idp -> [ CTEI . ]

    ]               shift and go to state 171


state 131

    (57) asignacionp -> = superexpresion ; .

    IF              reduce using rule 57 (asignacionp -> = superexpresion ; .)
    WRITE           reduce using rule 57 (asignacionp -> = superexpresion ; .)
    READ            reduce using rule 57 (asignacionp -> = superexpresion ; .)
    WHILE           reduce using rule 57 (asignacionp -> = superexpresion ; .)
    RETURN          reduce using rule 57 (asignacionp -> = superexpresion ; .)
    FOR             reduce using rule 57 (asignacionp -> = superexpresion ; .)
    FACT            reduce using rule 57 (asignacionp -> = superexpresion ; .)
    FIBONACCI       reduce using rule 57 (asignacionp -> = superexpresion ; .)
    CUADRATICA      reduce using rule 57 (asignacionp -> = superexpresion ; .)
    RAIZ            reduce using rule 57 (asignacionp -> = superexpresion ; .)
    ID              reduce using rule 57 (asignacionp -> = superexpresion ; .)
    INT             reduce using rule 57 (asignacionp -> = superexpresion ; .)
    FLOAT           reduce using rule 57 (asignacionp -> = superexpresion ; .)
    CHAR            reduce using rule 57 (asignacionp -> = superexpresion ; .)
    ARREGLO         reduce using rule 57 (asignacionp -> = superexpresion ; .)
    }               reduce using rule 57 (asignacionp -> = superexpresion ; .)
    )               reduce using rule 57 (asignacionp -> = superexpresion ; .)


state 132

    (58) superexpresion -> megaexpresion superexpresionp .

    ;               reduce using rule 58 (superexpresion -> megaexpresion superexpresionp .)
    )               reduce using rule 58 (superexpresion -> megaexpresion superexpresionp .)
    ,               reduce using rule 58 (superexpresion -> megaexpresion superexpresionp .)


state 133

    (59) superexpresionp -> AND . superexpresion
    (58) superexpresion -> . megaexpresion superexpresionp
    (62) megaexpresion -> . exp megaexpresionp
    (70) exp -> . termino expp
    (75) termino -> . factor terminop
    (80) factor -> . constante
    (81) factor -> . lParen superexpresion rParen
    (84) constante -> . id
    (85) constante -> . CTEF ctef
    (86) constante -> . CTEI ctei
    (82) lParen -> . (
    (105) id -> . ID idp

    CTEF            shift and go to state 112
    CTEI            shift and go to state 113
    (               shift and go to state 114
    ID              shift and go to state 82

    superexpresion                 shift and go to state 172
    megaexpresion                  shift and go to state 105
    exp                            shift and go to state 106
    termino                        shift and go to state 107
    factor                         shift and go to state 108
    constante                      shift and go to state 109
    lParen                         shift and go to state 110
    id                             shift and go to state 111

state 134

    (60) superexpresionp -> OR . superexpresion
    (58) superexpresion -> . megaexpresion superexpresionp
    (62) megaexpresion -> . exp megaexpresionp
    (70) exp -> . termino expp
    (75) termino -> . factor terminop
    (80) factor -> . constante
    (81) factor -> . lParen superexpresion rParen
    (84) constante -> . id
    (85) constante -> . CTEF ctef
    (86) constante -> . CTEI ctei
    (82) lParen -> . (
    (105) id -> . ID idp

    CTEF            shift and go to state 112
    CTEI            shift and go to state 113
    (               shift and go to state 114
    ID              shift and go to state 82

    superexpresion                 shift and go to state 173
    megaexpresion                  shift and go to state 105
    exp                            shift and go to state 106
    termino                        shift and go to state 107
    factor                         shift and go to state 108
    constante                      shift and go to state 109
    lParen                         shift and go to state 110
    id                             shift and go to state 111

state 135

    (61) superexpresionp -> empty .

    ;               reduce using rule 61 (superexpresionp -> empty .)
    )               reduce using rule 61 (superexpresionp -> empty .)
    ,               reduce using rule 61 (superexpresionp -> empty .)


state 136

    (62) megaexpresion -> exp megaexpresionp .

    AND             reduce using rule 62 (megaexpresion -> exp megaexpresionp .)
    OR              reduce using rule 62 (megaexpresion -> exp megaexpresionp .)
    ;               reduce using rule 62 (megaexpresion -> exp megaexpresionp .)
    )               reduce using rule 62 (megaexpresion -> exp megaexpresionp .)
    ,               reduce using rule 62 (megaexpresion -> exp megaexpresionp .)


state 137

    (63) megaexpresionp -> < . exp
    (70) exp -> . termino expp
    (75) termino -> . factor terminop
    (80) factor -> . constante
    (81) factor -> . lParen superexpresion rParen
    (84) constante -> . id
    (85) constante -> . CTEF ctef
    (86) constante -> . CTEI ctei
    (82) lParen -> . (
    (105) id -> . ID idp

    CTEF            shift and go to state 112
    CTEI            shift and go to state 113
    (               shift and go to state 114
    ID              shift and go to state 82

    exp                            shift and go to state 174
    termino                        shift and go to state 107
    factor                         shift and go to state 108
    constante                      shift and go to state 109
    lParen                         shift and go to state 110
    id                             shift and go to state 111

state 138

    (64) megaexpresionp -> > . exp
    (70) exp -> . termino expp
    (75) termino -> . factor terminop
    (80) factor -> . constante
    (81) factor -> . lParen superexpresion rParen
    (84) constante -> . id
    (85) constante -> . CTEF ctef
    (86) constante -> . CTEI ctei
    (82) lParen -> . (
    (105) id -> . ID idp

    CTEF            shift and go to state 112
    CTEI            shift and go to state 113
    (               shift and go to state 114
    ID              shift and go to state 82

    exp                            shift and go to state 175
    termino                        shift and go to state 107
    factor                         shift and go to state 108
    constante                      shift and go to state 109
    lParen                         shift and go to state 110
    id                             shift and go to state 111

state 139

    (65) megaexpresionp -> EQUALS . exp
    (70) exp -> . termino expp
    (75) termino -> . factor terminop
    (80) factor -> . constante
    (81) factor -> . lParen superexpresion rParen
    (84) constante -> . id
    (85) constante -> . CTEF ctef
    (86) constante -> . CTEI ctei
    (82) lParen -> . (
    (105) id -> . ID idp

    CTEF            shift and go to state 112
    CTEI            shift and go to state 113
    (               shift and go to state 114
    ID              shift and go to state 82

    exp                            shift and go to state 176
    termino                        shift and go to state 107
    factor                         shift and go to state 108
    constante                      shift and go to state 109
    lParen                         shift and go to state 110
    id                             shift and go to state 111

state 140

    (66) megaexpresionp -> DIFF . exp
    (70) exp -> . termino expp
    (75) termino -> . factor terminop
    (80) factor -> . constante
    (81) factor -> . lParen superexpresion rParen
    (84) constante -> . id
    (85) constante -> . CTEF ctef
    (86) constante -> . CTEI ctei
    (82) lParen -> . (
    (105) id -> . ID idp

    CTEF            shift and go to state 112
    CTEI            shift and go to state 113
    (               shift and go to state 114
    ID              shift and go to state 82

    exp                            shift and go to state 177
    termino                        shift and go to state 107
    factor                         shift and go to state 108
    constante                      shift and go to state 109
    lParen                         shift and go to state 110
    id                             shift and go to state 111

state 141

    (67) megaexpresionp -> LTHANEQ . exp
    (70) exp -> . termino expp
    (75) termino -> . factor terminop
    (80) factor -> . constante
    (81) factor -> . lParen superexpresion rParen
    (84) constante -> . id
    (85) constante -> . CTEF ctef
    (86) constante -> . CTEI ctei
    (82) lParen -> . (
    (105) id -> . ID idp

    CTEF            shift and go to state 112
    CTEI            shift and go to state 113
    (               shift and go to state 114
    ID              shift and go to state 82

    exp                            shift and go to state 178
    termino                        shift and go to state 107
    factor                         shift and go to state 108
    constante                      shift and go to state 109
    lParen                         shift and go to state 110
    id                             shift and go to state 111

state 142

    (68) megaexpresionp -> GTHANEQ . exp
    (70) exp -> . termino expp
    (75) termino -> . factor terminop
    (80) factor -> . constante
    (81) factor -> . lParen superexpresion rParen
    (84) constante -> . id
    (85) constante -> . CTEF ctef
    (86) constante -> . CTEI ctei
    (82) lParen -> . (
    (105) id -> . ID idp

    CTEF            shift and go to state 112
    CTEI            shift and go to state 113
    (               shift and go to state 114
    ID              shift and go to state 82

    exp                            shift and go to state 179
    termino                        shift and go to state 107
    factor                         shift and go to state 108
    constante                      shift and go to state 109
    lParen                         shift and go to state 110
    id                             shift and go to state 111

state 143

    (69) megaexpresionp -> empty .

    AND             reduce using rule 69 (megaexpresionp -> empty .)
    OR              reduce using rule 69 (megaexpresionp -> empty .)
    ;               reduce using rule 69 (megaexpresionp -> empty .)
    )               reduce using rule 69 (megaexpresionp -> empty .)
    ,               reduce using rule 69 (megaexpresionp -> empty .)


state 144

    (70) exp -> termino expp .

    <               reduce using rule 70 (exp -> termino expp .)
    >               reduce using rule 70 (exp -> termino expp .)
    EQUALS          reduce using rule 70 (exp -> termino expp .)
    DIFF            reduce using rule 70 (exp -> termino expp .)
    LTHANEQ         reduce using rule 70 (exp -> termino expp .)
    GTHANEQ         reduce using rule 70 (exp -> termino expp .)
    AND             reduce using rule 70 (exp -> termino expp .)
    OR              reduce using rule 70 (exp -> termino expp .)
    ;               reduce using rule 70 (exp -> termino expp .)
    )               reduce using rule 70 (exp -> termino expp .)
    ,               reduce using rule 70 (exp -> termino expp .)


state 145

    (71) expp -> + . pAppT exp
    (74) pAppT -> .

    CTEF            reduce using rule 74 (pAppT -> .)
    CTEI            reduce using rule 74 (pAppT -> .)
    (               reduce using rule 74 (pAppT -> .)
    ID              reduce using rule 74 (pAppT -> .)

    pAppT                          shift and go to state 180

state 146

    (72) expp -> - . pAppT exp
    (74) pAppT -> .

    CTEF            reduce using rule 74 (pAppT -> .)
    CTEI            reduce using rule 74 (pAppT -> .)
    (               reduce using rule 74 (pAppT -> .)
    ID              reduce using rule 74 (pAppT -> .)

    pAppT                          shift and go to state 181

state 147

    (73) expp -> empty .

    <               reduce using rule 73 (expp -> empty .)
    >               reduce using rule 73 (expp -> empty .)
    EQUALS          reduce using rule 73 (expp -> empty .)
    DIFF            reduce using rule 73 (expp -> empty .)
    LTHANEQ         reduce using rule 73 (expp -> empty .)
    GTHANEQ         reduce using rule 73 (expp -> empty .)
    AND             reduce using rule 73 (expp -> empty .)
    OR              reduce using rule 73 (expp -> empty .)
    ;               reduce using rule 73 (expp -> empty .)
    )               reduce using rule 73 (expp -> empty .)
    ,               reduce using rule 73 (expp -> empty .)


state 148

    (75) termino -> factor terminop .

    +               reduce using rule 75 (termino -> factor terminop .)
    -               reduce using rule 75 (termino -> factor terminop .)
    <               reduce using rule 75 (termino -> factor terminop .)
    >               reduce using rule 75 (termino -> factor terminop .)
    EQUALS          reduce using rule 75 (termino -> factor terminop .)
    DIFF            reduce using rule 75 (termino -> factor terminop .)
    LTHANEQ         reduce using rule 75 (termino -> factor terminop .)
    GTHANEQ         reduce using rule 75 (termino -> factor terminop .)
    AND             reduce using rule 75 (termino -> factor terminop .)
    OR              reduce using rule 75 (termino -> factor terminop .)
    ;               reduce using rule 75 (termino -> factor terminop .)
    )               reduce using rule 75 (termino -> factor terminop .)
    ,               reduce using rule 75 (termino -> factor terminop .)


state 149

    (76) terminop -> * . pAppF termino
    (79) pAppF -> .

    CTEF            reduce using rule 79 (pAppF -> .)
    CTEI            reduce using rule 79 (pAppF -> .)
    (               reduce using rule 79 (pAppF -> .)
    ID              reduce using rule 79 (pAppF -> .)

    pAppF                          shift and go to state 182

state 150

    (77) terminop -> / . pAppF termino
    (79) pAppF -> .

    CTEF            reduce using rule 79 (pAppF -> .)
    CTEI            reduce using rule 79 (pAppF -> .)
    (               reduce using rule 79 (pAppF -> .)
    ID              reduce using rule 79 (pAppF -> .)

    pAppF                          shift and go to state 183

state 151

    (78) terminop -> empty .

    +               reduce using rule 78 (terminop -> empty .)
    -               reduce using rule 78 (terminop -> empty .)
    <               reduce using rule 78 (terminop -> empty .)
    >               reduce using rule 78 (terminop -> empty .)
    EQUALS          reduce using rule 78 (terminop -> empty .)
    DIFF            reduce using rule 78 (terminop -> empty .)
    LTHANEQ         reduce using rule 78 (terminop -> empty .)
    GTHANEQ         reduce using rule 78 (terminop -> empty .)
    AND             reduce using rule 78 (terminop -> empty .)
    OR              reduce using rule 78 (terminop -> empty .)
    ;               reduce using rule 78 (terminop -> empty .)
    )               reduce using rule 78 (terminop -> empty .)
    ,               reduce using rule 78 (terminop -> empty .)


state 152

    (81) factor -> lParen superexpresion . rParen
    (83) rParen -> . )

    )               shift and go to state 185

    rParen                         shift and go to state 184

state 153

    (85) constante -> CTEF ctef .

    *               reduce using rule 85 (constante -> CTEF ctef .)
    /               reduce using rule 85 (constante -> CTEF ctef .)
    +               reduce using rule 85 (constante -> CTEF ctef .)
    -               reduce using rule 85 (constante -> CTEF ctef .)
    <               reduce using rule 85 (constante -> CTEF ctef .)
    >               reduce using rule 85 (constante -> CTEF ctef .)
    EQUALS          reduce using rule 85 (constante -> CTEF ctef .)
    DIFF            reduce using rule 85 (constante -> CTEF ctef .)
    LTHANEQ         reduce using rule 85 (constante -> CTEF ctef .)
    GTHANEQ         reduce using rule 85 (constante -> CTEF ctef .)
    AND             reduce using rule 85 (constante -> CTEF ctef .)
    OR              reduce using rule 85 (constante -> CTEF ctef .)
    ;               reduce using rule 85 (constante -> CTEF ctef .)
    )               reduce using rule 85 (constante -> CTEF ctef .)
    ,               reduce using rule 85 (constante -> CTEF ctef .)


state 154

    (86) constante -> CTEI ctei .

    *               reduce using rule 86 (constante -> CTEI ctei .)
    /               reduce using rule 86 (constante -> CTEI ctei .)
    +               reduce using rule 86 (constante -> CTEI ctei .)
    -               reduce using rule 86 (constante -> CTEI ctei .)
    <               reduce using rule 86 (constante -> CTEI ctei .)
    >               reduce using rule 86 (constante -> CTEI ctei .)
    EQUALS          reduce using rule 86 (constante -> CTEI ctei .)
    DIFF            reduce using rule 86 (constante -> CTEI ctei .)
    LTHANEQ         reduce using rule 86 (constante -> CTEI ctei .)
    GTHANEQ         reduce using rule 86 (constante -> CTEI ctei .)
    AND             reduce using rule 86 (constante -> CTEI ctei .)
    OR              reduce using rule 86 (constante -> CTEI ctei .)
    ;               reduce using rule 86 (constante -> CTEI ctei .)
    )               reduce using rule 86 (constante -> CTEI ctei .)
    ,               reduce using rule 86 (constante -> CTEI ctei .)


state 155

    (32) condicion -> IF ( superexpresion ) . condicionAux bloque condicionelse
    (33) condicionAux -> .

    {               reduce using rule 33 (condicionAux -> .)

    condicionAux                   shift and go to state 186

state 156

    (37) write -> WRITE ( writep ) . ;

    ;               shift and go to state 187


state 157

    (38) writep -> superexpresion writepAux . writepp
    (42) writepp -> . , writeppAux writep
    (43) writepp -> . writeppAux
    (44) writepp -> . empty
    (45) writeppAux -> .
    (117) empty -> .

  ! reduce/reduce conflict for ) resolved using rule 45 (writeppAux -> .)
    ,               shift and go to state 189
    )               reduce using rule 45 (writeppAux -> .)

  ! )               [ reduce using rule 117 (empty -> .) ]

    writepp                        shift and go to state 188
    writeppAux                     shift and go to state 190
    empty                          shift and go to state 191

state 158

    (39) writep -> LETRERO writepAux2 . writepp
    (42) writepp -> . , writeppAux writep
    (43) writepp -> . writeppAux
    (44) writepp -> . empty
    (45) writeppAux -> .
    (117) empty -> .

  ! reduce/reduce conflict for ) resolved using rule 45 (writeppAux -> .)
    ,               shift and go to state 189
    )               reduce using rule 45 (writeppAux -> .)

  ! )               [ reduce using rule 117 (empty -> .) ]

    writepp                        shift and go to state 192
    writeppAux                     shift and go to state 190
    empty                          shift and go to state 191

state 159

    (46) read -> READ ( id ) . readAux ;
    (47) readAux -> .

    ;               reduce using rule 47 (readAux -> .)

    readAux                        shift and go to state 193

state 160

    (52) while -> WHILE whileAux ( superexpresion . ) whileAux2 bloque

    )               shift and go to state 194


state 161

    (31) return -> RETURN ( superexpresion ) . ;

    ;               shift and go to state 195


state 162

    (48) for -> FOR ( id = . superexpresion forAux ; superexpresion forAux2 ; asignacion ) bloque forAux3
    (58) superexpresion -> . megaexpresion superexpresionp
    (62) megaexpresion -> . exp megaexpresionp
    (70) exp -> . termino expp
    (75) termino -> . factor terminop
    (80) factor -> . constante
    (81) factor -> . lParen superexpresion rParen
    (84) constante -> . id
    (85) constante -> . CTEF ctef
    (86) constante -> . CTEI ctei
    (82) lParen -> . (
    (105) id -> . ID idp

    CTEF            shift and go to state 112
    CTEI            shift and go to state 113
    (               shift and go to state 114
    ID              shift and go to state 82

    id                             shift and go to state 111
    superexpresion                 shift and go to state 196
    megaexpresion                  shift and go to state 105
    exp                            shift and go to state 106
    termino                        shift and go to state 107
    factor                         shift and go to state 108
    constante                      shift and go to state 109
    lParen                         shift and go to state 110

state 163

    (113) fact -> FACT ( CTEI ) . ;

    ;               shift and go to state 197


state 164

    (115) fibonacci -> FIBONACCI ( CTEI ) . ;

    ;               shift and go to state 198


state 165

    (114) cuadratica -> CUADRATICA ( CTEI , . CTEI , CTEI ) ;

    CTEI            shift and go to state 199


state 166

    (116) raiz -> RAIZ ( CTEI ) . ;

    ;               shift and go to state 200


state 167

    (106) idp -> ( idpp ) .

    ;               reduce using rule 106 (idp -> ( idpp ) .)
    =               reduce using rule 106 (idp -> ( idpp ) .)
    *               reduce using rule 106 (idp -> ( idpp ) .)
    /               reduce using rule 106 (idp -> ( idpp ) .)
    +               reduce using rule 106 (idp -> ( idpp ) .)
    -               reduce using rule 106 (idp -> ( idpp ) .)
    <               reduce using rule 106 (idp -> ( idpp ) .)
    >               reduce using rule 106 (idp -> ( idpp ) .)
    EQUALS          reduce using rule 106 (idp -> ( idpp ) .)
    DIFF            reduce using rule 106 (idp -> ( idpp ) .)
    LTHANEQ         reduce using rule 106 (idp -> ( idpp ) .)
    GTHANEQ         reduce using rule 106 (idp -> ( idpp ) .)
    AND             reduce using rule 106 (idp -> ( idpp ) .)
    OR              reduce using rule 106 (idp -> ( idpp ) .)
    )               reduce using rule 106 (idp -> ( idpp ) .)
    ,               reduce using rule 106 (idp -> ( idpp ) .)


state 168

    (109) idpp -> superexpresion idppp .

    )               reduce using rule 109 (idpp -> superexpresion idppp .)


state 169

    (111) idppp -> , . idpp
    (109) idpp -> . superexpresion idppp
    (110) idpp -> . empty
    (58) superexpresion -> . megaexpresion superexpresionp
    (117) empty -> .
    (62) megaexpresion -> . exp megaexpresionp
    (70) exp -> . termino expp
    (75) termino -> . factor terminop
    (80) factor -> . constante
    (81) factor -> . lParen superexpresion rParen
    (84) constante -> . id
    (85) constante -> . CTEF ctef
    (86) constante -> . CTEI ctei
    (82) lParen -> . (
    (105) id -> . ID idp

    )               reduce using rule 117 (empty -> .)
    CTEF            shift and go to state 112
    CTEI            shift and go to state 113
    (               shift and go to state 114
    ID              shift and go to state 82

    idpp                           shift and go to state 201
    superexpresion                 shift and go to state 128
    empty                          shift and go to state 129
    megaexpresion                  shift and go to state 105
    exp                            shift and go to state 106
    termino                        shift and go to state 107
    factor                         shift and go to state 108
    constante                      shift and go to state 109
    lParen                         shift and go to state 110
    id                             shift and go to state 111

state 170

    (112) idppp -> empty .

    )               reduce using rule 112 (idppp -> empty .)


state 171

    (107) idp -> [ CTEI ] .

    ;               reduce using rule 107 (idp -> [ CTEI ] .)
    =               reduce using rule 107 (idp -> [ CTEI ] .)
    *               reduce using rule 107 (idp -> [ CTEI ] .)
    /               reduce using rule 107 (idp -> [ CTEI ] .)
    +               reduce using rule 107 (idp -> [ CTEI ] .)
    -               reduce using rule 107 (idp -> [ CTEI ] .)
    <               reduce using rule 107 (idp -> [ CTEI ] .)
    >               reduce using rule 107 (idp -> [ CTEI ] .)
    EQUALS          reduce using rule 107 (idp -> [ CTEI ] .)
    DIFF            reduce using rule 107 (idp -> [ CTEI ] .)
    LTHANEQ         reduce using rule 107 (idp -> [ CTEI ] .)
    GTHANEQ         reduce using rule 107 (idp -> [ CTEI ] .)
    AND             reduce using rule 107 (idp -> [ CTEI ] .)
    OR              reduce using rule 107 (idp -> [ CTEI ] .)
    )               reduce using rule 107 (idp -> [ CTEI ] .)
    ,               reduce using rule 107 (idp -> [ CTEI ] .)


state 172

    (59) superexpresionp -> AND superexpresion .

    ;               reduce using rule 59 (superexpresionp -> AND superexpresion .)
    )               reduce using rule 59 (superexpresionp -> AND superexpresion .)
    ,               reduce using rule 59 (superexpresionp -> AND superexpresion .)


state 173

    (60) superexpresionp -> OR superexpresion .

    ;               reduce using rule 60 (superexpresionp -> OR superexpresion .)
    )               reduce using rule 60 (superexpresionp -> OR superexpresion .)
    ,               reduce using rule 60 (superexpresionp -> OR superexpresion .)


state 174

    (63) megaexpresionp -> < exp .

    AND             reduce using rule 63 (megaexpresionp -> < exp .)
    OR              reduce using rule 63 (megaexpresionp -> < exp .)
    ;               reduce using rule 63 (megaexpresionp -> < exp .)
    )               reduce using rule 63 (megaexpresionp -> < exp .)
    ,               reduce using rule 63 (megaexpresionp -> < exp .)


state 175

    (64) megaexpresionp -> > exp .

    AND             reduce using rule 64 (megaexpresionp -> > exp .)
    OR              reduce using rule 64 (megaexpresionp -> > exp .)
    ;               reduce using rule 64 (megaexpresionp -> > exp .)
    )               reduce using rule 64 (megaexpresionp -> > exp .)
    ,               reduce using rule 64 (megaexpresionp -> > exp .)


state 176

    (65) megaexpresionp -> EQUALS exp .

    AND             reduce using rule 65 (megaexpresionp -> EQUALS exp .)
    OR              reduce using rule 65 (megaexpresionp -> EQUALS exp .)
    ;               reduce using rule 65 (megaexpresionp -> EQUALS exp .)
    )               reduce using rule 65 (megaexpresionp -> EQUALS exp .)
    ,               reduce using rule 65 (megaexpresionp -> EQUALS exp .)


state 177

    (66) megaexpresionp -> DIFF exp .

    AND             reduce using rule 66 (megaexpresionp -> DIFF exp .)
    OR              reduce using rule 66 (megaexpresionp -> DIFF exp .)
    ;               reduce using rule 66 (megaexpresionp -> DIFF exp .)
    )               reduce using rule 66 (megaexpresionp -> DIFF exp .)
    ,               reduce using rule 66 (megaexpresionp -> DIFF exp .)


state 178

    (67) megaexpresionp -> LTHANEQ exp .

    AND             reduce using rule 67 (megaexpresionp -> LTHANEQ exp .)
    OR              reduce using rule 67 (megaexpresionp -> LTHANEQ exp .)
    ;               reduce using rule 67 (megaexpresionp -> LTHANEQ exp .)
    )               reduce using rule 67 (megaexpresionp -> LTHANEQ exp .)
    ,               reduce using rule 67 (megaexpresionp -> LTHANEQ exp .)


state 179

    (68) megaexpresionp -> GTHANEQ exp .

    AND             reduce using rule 68 (megaexpresionp -> GTHANEQ exp .)
    OR              reduce using rule 68 (megaexpresionp -> GTHANEQ exp .)
    ;               reduce using rule 68 (megaexpresionp -> GTHANEQ exp .)
    )               reduce using rule 68 (megaexpresionp -> GTHANEQ exp .)
    ,               reduce using rule 68 (megaexpresionp -> GTHANEQ exp .)


state 180

    (71) expp -> + pAppT . exp
    (70) exp -> . termino expp
    (75) termino -> . factor terminop
    (80) factor -> . constante
    (81) factor -> . lParen superexpresion rParen
    (84) constante -> . id
    (85) constante -> . CTEF ctef
    (86) constante -> . CTEI ctei
    (82) lParen -> . (
    (105) id -> . ID idp

    CTEF            shift and go to state 112
    CTEI            shift and go to state 113
    (               shift and go to state 114
    ID              shift and go to state 82

    exp                            shift and go to state 202
    termino                        shift and go to state 107
    factor                         shift and go to state 108
    constante                      shift and go to state 109
    lParen                         shift and go to state 110
    id                             shift and go to state 111

state 181

    (72) expp -> - pAppT . exp
    (70) exp -> . termino expp
    (75) termino -> . factor terminop
    (80) factor -> . constante
    (81) factor -> . lParen superexpresion rParen
    (84) constante -> . id
    (85) constante -> . CTEF ctef
    (86) constante -> . CTEI ctei
    (82) lParen -> . (
    (105) id -> . ID idp

    CTEF            shift and go to state 112
    CTEI            shift and go to state 113
    (               shift and go to state 114
    ID              shift and go to state 82

    exp                            shift and go to state 203
    termino                        shift and go to state 107
    factor                         shift and go to state 108
    constante                      shift and go to state 109
    lParen                         shift and go to state 110
    id                             shift and go to state 111

state 182

    (76) terminop -> * pAppF . termino
    (75) termino -> . factor terminop
    (80) factor -> . constante
    (81) factor -> . lParen superexpresion rParen
    (84) constante -> . id
    (85) constante -> . CTEF ctef
    (86) constante -> . CTEI ctei
    (82) lParen -> . (
    (105) id -> . ID idp

    CTEF            shift and go to state 112
    CTEI            shift and go to state 113
    (               shift and go to state 114
    ID              shift and go to state 82

    termino                        shift and go to state 204
    factor                         shift and go to state 108
    constante                      shift and go to state 109
    lParen                         shift and go to state 110
    id                             shift and go to state 111

state 183

    (77) terminop -> / pAppF . termino
    (75) termino -> . factor terminop
    (80) factor -> . constante
    (81) factor -> . lParen superexpresion rParen
    (84) constante -> . id
    (85) constante -> . CTEF ctef
    (86) constante -> . CTEI ctei
    (82) lParen -> . (
    (105) id -> . ID idp

    CTEF            shift and go to state 112
    CTEI            shift and go to state 113
    (               shift and go to state 114
    ID              shift and go to state 82

    termino                        shift and go to state 205
    factor                         shift and go to state 108
    constante                      shift and go to state 109
    lParen                         shift and go to state 110
    id                             shift and go to state 111

state 184

    (81) factor -> lParen superexpresion rParen .

    *               reduce using rule 81 (factor -> lParen superexpresion rParen .)
    /               reduce using rule 81 (factor -> lParen superexpresion rParen .)
    +               reduce using rule 81 (factor -> lParen superexpresion rParen .)
    -               reduce using rule 81 (factor -> lParen superexpresion rParen .)
    <               reduce using rule 81 (factor -> lParen superexpresion rParen .)
    >               reduce using rule 81 (factor -> lParen superexpresion rParen .)
    EQUALS          reduce using rule 81 (factor -> lParen superexpresion rParen .)
    DIFF            reduce using rule 81 (factor -> lParen superexpresion rParen .)
    LTHANEQ         reduce using rule 81 (factor -> lParen superexpresion rParen .)
    GTHANEQ         reduce using rule 81 (factor -> lParen superexpresion rParen .)
    AND             reduce using rule 81 (factor -> lParen superexpresion rParen .)
    OR              reduce using rule 81 (factor -> lParen superexpresion rParen .)
    ;               reduce using rule 81 (factor -> lParen superexpresion rParen .)
    )               reduce using rule 81 (factor -> lParen superexpresion rParen .)
    ,               reduce using rule 81 (factor -> lParen superexpresion rParen .)


state 185

    (83) rParen -> ) .

    *               reduce using rule 83 (rParen -> ) .)
    /               reduce using rule 83 (rParen -> ) .)
    +               reduce using rule 83 (rParen -> ) .)
    -               reduce using rule 83 (rParen -> ) .)
    <               reduce using rule 83 (rParen -> ) .)
    >               reduce using rule 83 (rParen -> ) .)
    EQUALS          reduce using rule 83 (rParen -> ) .)
    DIFF            reduce using rule 83 (rParen -> ) .)
    LTHANEQ         reduce using rule 83 (rParen -> ) .)
    GTHANEQ         reduce using rule 83 (rParen -> ) .)
    AND             reduce using rule 83 (rParen -> ) .)
    OR              reduce using rule 83 (rParen -> ) .)
    ;               reduce using rule 83 (rParen -> ) .)
    )               reduce using rule 83 (rParen -> ) .)
    ,               reduce using rule 83 (rParen -> ) .)


state 186

    (32) condicion -> IF ( superexpresion ) condicionAux . bloque condicionelse
    (14) bloque -> . { cuerpo }

    {               shift and go to state 46

    bloque                         shift and go to state 206

state 187

    (37) write -> WRITE ( writep ) ; .

    IF              reduce using rule 37 (write -> WRITE ( writep ) ; .)
    WRITE           reduce using rule 37 (write -> WRITE ( writep ) ; .)
    READ            reduce using rule 37 (write -> WRITE ( writep ) ; .)
    WHILE           reduce using rule 37 (write -> WRITE ( writep ) ; .)
    RETURN          reduce using rule 37 (write -> WRITE ( writep ) ; .)
    FOR             reduce using rule 37 (write -> WRITE ( writep ) ; .)
    FACT            reduce using rule 37 (write -> WRITE ( writep ) ; .)
    FIBONACCI       reduce using rule 37 (write -> WRITE ( writep ) ; .)
    CUADRATICA      reduce using rule 37 (write -> WRITE ( writep ) ; .)
    RAIZ            reduce using rule 37 (write -> WRITE ( writep ) ; .)
    ID              reduce using rule 37 (write -> WRITE ( writep ) ; .)
    INT             reduce using rule 37 (write -> WRITE ( writep ) ; .)
    FLOAT           reduce using rule 37 (write -> WRITE ( writep ) ; .)
    CHAR            reduce using rule 37 (write -> WRITE ( writep ) ; .)
    ARREGLO         reduce using rule 37 (write -> WRITE ( writep ) ; .)
    }               reduce using rule 37 (write -> WRITE ( writep ) ; .)


state 188

    (38) writep -> superexpresion writepAux writepp .

    )               reduce using rule 38 (writep -> superexpresion writepAux writepp .)


state 189

    (42) writepp -> , . writeppAux writep
    (45) writeppAux -> .

    LETRERO         reduce using rule 45 (writeppAux -> .)
    CTEF            reduce using rule 45 (writeppAux -> .)
    CTEI            reduce using rule 45 (writeppAux -> .)
    (               reduce using rule 45 (writeppAux -> .)
    ID              reduce using rule 45 (writeppAux -> .)

    writeppAux                     shift and go to state 207

state 190

    (43) writepp -> writeppAux .

    )               reduce using rule 43 (writepp -> writeppAux .)


state 191

    (44) writepp -> empty .

    )               reduce using rule 44 (writepp -> empty .)


state 192

    (39) writep -> LETRERO writepAux2 writepp .

    )               reduce using rule 39 (writep -> LETRERO writepAux2 writepp .)


state 193

    (46) read -> READ ( id ) readAux . ;

    ;               shift and go to state 208


state 194

    (52) while -> WHILE whileAux ( superexpresion ) . whileAux2 bloque
    (54) whileAux2 -> .

    {               reduce using rule 54 (whileAux2 -> .)

    whileAux2                      shift and go to state 209

state 195

    (31) return -> RETURN ( superexpresion ) ; .

    IF              reduce using rule 31 (return -> RETURN ( superexpresion ) ; .)
    WRITE           reduce using rule 31 (return -> RETURN ( superexpresion ) ; .)
    READ            reduce using rule 31 (return -> RETURN ( superexpresion ) ; .)
    WHILE           reduce using rule 31 (return -> RETURN ( superexpresion ) ; .)
    RETURN          reduce using rule 31 (return -> RETURN ( superexpresion ) ; .)
    FOR             reduce using rule 31 (return -> RETURN ( superexpresion ) ; .)
    FACT            reduce using rule 31 (return -> RETURN ( superexpresion ) ; .)
    FIBONACCI       reduce using rule 31 (return -> RETURN ( superexpresion ) ; .)
    CUADRATICA      reduce using rule 31 (return -> RETURN ( superexpresion ) ; .)
    RAIZ            reduce using rule 31 (return -> RETURN ( superexpresion ) ; .)
    ID              reduce using rule 31 (return -> RETURN ( superexpresion ) ; .)
    INT             reduce using rule 31 (return -> RETURN ( superexpresion ) ; .)
    FLOAT           reduce using rule 31 (return -> RETURN ( superexpresion ) ; .)
    CHAR            reduce using rule 31 (return -> RETURN ( superexpresion ) ; .)
    ARREGLO         reduce using rule 31 (return -> RETURN ( superexpresion ) ; .)
    }               reduce using rule 31 (return -> RETURN ( superexpresion ) ; .)


state 196

    (48) for -> FOR ( id = superexpresion . forAux ; superexpresion forAux2 ; asignacion ) bloque forAux3
    (49) forAux -> .

    ;               reduce using rule 49 (forAux -> .)

    forAux                         shift and go to state 210

state 197

    (113) fact -> FACT ( CTEI ) ; .

    IF              reduce using rule 113 (fact -> FACT ( CTEI ) ; .)
    WRITE           reduce using rule 113 (fact -> FACT ( CTEI ) ; .)
    READ            reduce using rule 113 (fact -> FACT ( CTEI ) ; .)
    WHILE           reduce using rule 113 (fact -> FACT ( CTEI ) ; .)
    RETURN          reduce using rule 113 (fact -> FACT ( CTEI ) ; .)
    FOR             reduce using rule 113 (fact -> FACT ( CTEI ) ; .)
    FACT            reduce using rule 113 (fact -> FACT ( CTEI ) ; .)
    FIBONACCI       reduce using rule 113 (fact -> FACT ( CTEI ) ; .)
    CUADRATICA      reduce using rule 113 (fact -> FACT ( CTEI ) ; .)
    RAIZ            reduce using rule 113 (fact -> FACT ( CTEI ) ; .)
    ID              reduce using rule 113 (fact -> FACT ( CTEI ) ; .)
    INT             reduce using rule 113 (fact -> FACT ( CTEI ) ; .)
    FLOAT           reduce using rule 113 (fact -> FACT ( CTEI ) ; .)
    CHAR            reduce using rule 113 (fact -> FACT ( CTEI ) ; .)
    ARREGLO         reduce using rule 113 (fact -> FACT ( CTEI ) ; .)
    }               reduce using rule 113 (fact -> FACT ( CTEI ) ; .)


state 198

    (115) fibonacci -> FIBONACCI ( CTEI ) ; .

    IF              reduce using rule 115 (fibonacci -> FIBONACCI ( CTEI ) ; .)
    WRITE           reduce using rule 115 (fibonacci -> FIBONACCI ( CTEI ) ; .)
    READ            reduce using rule 115 (fibonacci -> FIBONACCI ( CTEI ) ; .)
    WHILE           reduce using rule 115 (fibonacci -> FIBONACCI ( CTEI ) ; .)
    RETURN          reduce using rule 115 (fibonacci -> FIBONACCI ( CTEI ) ; .)
    FOR             reduce using rule 115 (fibonacci -> FIBONACCI ( CTEI ) ; .)
    FACT            reduce using rule 115 (fibonacci -> FIBONACCI ( CTEI ) ; .)
    FIBONACCI       reduce using rule 115 (fibonacci -> FIBONACCI ( CTEI ) ; .)
    CUADRATICA      reduce using rule 115 (fibonacci -> FIBONACCI ( CTEI ) ; .)
    RAIZ            reduce using rule 115 (fibonacci -> FIBONACCI ( CTEI ) ; .)
    ID              reduce using rule 115 (fibonacci -> FIBONACCI ( CTEI ) ; .)
    INT             reduce using rule 115 (fibonacci -> FIBONACCI ( CTEI ) ; .)
    FLOAT           reduce using rule 115 (fibonacci -> FIBONACCI ( CTEI ) ; .)
    CHAR            reduce using rule 115 (fibonacci -> FIBONACCI ( CTEI ) ; .)
    ARREGLO         reduce using rule 115 (fibonacci -> FIBONACCI ( CTEI ) ; .)
    }               reduce using rule 115 (fibonacci -> FIBONACCI ( CTEI ) ; .)


state 199

    (114) cuadratica -> CUADRATICA ( CTEI , CTEI . , CTEI ) ;

    ,               shift and go to state 211


state 200

    (116) raiz -> RAIZ ( CTEI ) ; .

    IF              reduce using rule 116 (raiz -> RAIZ ( CTEI ) ; .)
    WRITE           reduce using rule 116 (raiz -> RAIZ ( CTEI ) ; .)
    READ            reduce using rule 116 (raiz -> RAIZ ( CTEI ) ; .)
    WHILE           reduce using rule 116 (raiz -> RAIZ ( CTEI ) ; .)
    RETURN          reduce using rule 116 (raiz -> RAIZ ( CTEI ) ; .)
    FOR             reduce using rule 116 (raiz -> RAIZ ( CTEI ) ; .)
    FACT            reduce using rule 116 (raiz -> RAIZ ( CTEI ) ; .)
    FIBONACCI       reduce using rule 116 (raiz -> RAIZ ( CTEI ) ; .)
    CUADRATICA      reduce using rule 116 (raiz -> RAIZ ( CTEI ) ; .)
    RAIZ            reduce using rule 116 (raiz -> RAIZ ( CTEI ) ; .)
    ID              reduce using rule 116 (raiz -> RAIZ ( CTEI ) ; .)
    INT             reduce using rule 116 (raiz -> RAIZ ( CTEI ) ; .)
    FLOAT           reduce using rule 116 (raiz -> RAIZ ( CTEI ) ; .)
    CHAR            reduce using rule 116 (raiz -> RAIZ ( CTEI ) ; .)
    ARREGLO         reduce using rule 116 (raiz -> RAIZ ( CTEI ) ; .)
    }               reduce using rule 116 (raiz -> RAIZ ( CTEI ) ; .)


state 201

    (111) idppp -> , idpp .

    )               reduce using rule 111 (idppp -> , idpp .)


state 202

    (71) expp -> + pAppT exp .

    <               reduce using rule 71 (expp -> + pAppT exp .)
    >               reduce using rule 71 (expp -> + pAppT exp .)
    EQUALS          reduce using rule 71 (expp -> + pAppT exp .)
    DIFF            reduce using rule 71 (expp -> + pAppT exp .)
    LTHANEQ         reduce using rule 71 (expp -> + pAppT exp .)
    GTHANEQ         reduce using rule 71 (expp -> + pAppT exp .)
    AND             reduce using rule 71 (expp -> + pAppT exp .)
    OR              reduce using rule 71 (expp -> + pAppT exp .)
    ;               reduce using rule 71 (expp -> + pAppT exp .)
    )               reduce using rule 71 (expp -> + pAppT exp .)
    ,               reduce using rule 71 (expp -> + pAppT exp .)


state 203

    (72) expp -> - pAppT exp .

    <               reduce using rule 72 (expp -> - pAppT exp .)
    >               reduce using rule 72 (expp -> - pAppT exp .)
    EQUALS          reduce using rule 72 (expp -> - pAppT exp .)
    DIFF            reduce using rule 72 (expp -> - pAppT exp .)
    LTHANEQ         reduce using rule 72 (expp -> - pAppT exp .)
    GTHANEQ         reduce using rule 72 (expp -> - pAppT exp .)
    AND             reduce using rule 72 (expp -> - pAppT exp .)
    OR              reduce using rule 72 (expp -> - pAppT exp .)
    ;               reduce using rule 72 (expp -> - pAppT exp .)
    )               reduce using rule 72 (expp -> - pAppT exp .)
    ,               reduce using rule 72 (expp -> - pAppT exp .)


state 204

    (76) terminop -> * pAppF termino .

    +               reduce using rule 76 (terminop -> * pAppF termino .)
    -               reduce using rule 76 (terminop -> * pAppF termino .)
    <               reduce using rule 76 (terminop -> * pAppF termino .)
    >               reduce using rule 76 (terminop -> * pAppF termino .)
    EQUALS          reduce using rule 76 (terminop -> * pAppF termino .)
    DIFF            reduce using rule 76 (terminop -> * pAppF termino .)
    LTHANEQ         reduce using rule 76 (terminop -> * pAppF termino .)
    GTHANEQ         reduce using rule 76 (terminop -> * pAppF termino .)
    AND             reduce using rule 76 (terminop -> * pAppF termino .)
    OR              reduce using rule 76 (terminop -> * pAppF termino .)
    ;               reduce using rule 76 (terminop -> * pAppF termino .)
    )               reduce using rule 76 (terminop -> * pAppF termino .)
    ,               reduce using rule 76 (terminop -> * pAppF termino .)


state 205

    (77) terminop -> / pAppF termino .

    +               reduce using rule 77 (terminop -> / pAppF termino .)
    -               reduce using rule 77 (terminop -> / pAppF termino .)
    <               reduce using rule 77 (terminop -> / pAppF termino .)
    >               reduce using rule 77 (terminop -> / pAppF termino .)
    EQUALS          reduce using rule 77 (terminop -> / pAppF termino .)
    DIFF            reduce using rule 77 (terminop -> / pAppF termino .)
    LTHANEQ         reduce using rule 77 (terminop -> / pAppF termino .)
    GTHANEQ         reduce using rule 77 (terminop -> / pAppF termino .)
    AND             reduce using rule 77 (terminop -> / pAppF termino .)
    OR              reduce using rule 77 (terminop -> / pAppF termino .)
    ;               reduce using rule 77 (terminop -> / pAppF termino .)
    )               reduce using rule 77 (terminop -> / pAppF termino .)
    ,               reduce using rule 77 (terminop -> / pAppF termino .)


state 206

    (32) condicion -> IF ( superexpresion ) condicionAux bloque . condicionelse
    (34) condicionelse -> . ELSE condicionelseAux bloque
    (35) condicionelse -> . empty
    (117) empty -> .

    ELSE            shift and go to state 213
    IF              reduce using rule 117 (empty -> .)
    WRITE           reduce using rule 117 (empty -> .)
    READ            reduce using rule 117 (empty -> .)
    WHILE           reduce using rule 117 (empty -> .)
    RETURN          reduce using rule 117 (empty -> .)
    FOR             reduce using rule 117 (empty -> .)
    FACT            reduce using rule 117 (empty -> .)
    FIBONACCI       reduce using rule 117 (empty -> .)
    CUADRATICA      reduce using rule 117 (empty -> .)
    RAIZ            reduce using rule 117 (empty -> .)
    ID              reduce using rule 117 (empty -> .)
    INT             reduce using rule 117 (empty -> .)
    FLOAT           reduce using rule 117 (empty -> .)
    CHAR            reduce using rule 117 (empty -> .)
    ARREGLO         reduce using rule 117 (empty -> .)
    }               reduce using rule 117 (empty -> .)

    condicionelse                  shift and go to state 212
    empty                          shift and go to state 214

state 207

    (42) writepp -> , writeppAux . writep
    (38) writep -> . superexpresion writepAux writepp
    (39) writep -> . LETRERO writepAux2 writepp
    (58) superexpresion -> . megaexpresion superexpresionp
    (62) megaexpresion -> . exp megaexpresionp
    (70) exp -> . termino expp
    (75) termino -> . factor terminop
    (80) factor -> . constante
    (81) factor -> . lParen superexpresion rParen
    (84) constante -> . id
    (85) constante -> . CTEF ctef
    (86) constante -> . CTEI ctei
    (82) lParen -> . (
    (105) id -> . ID idp

    LETRERO         shift and go to state 118
    CTEF            shift and go to state 112
    CTEI            shift and go to state 113
    (               shift and go to state 114
    ID              shift and go to state 82

    writep                         shift and go to state 215
    superexpresion                 shift and go to state 117
    megaexpresion                  shift and go to state 105
    exp                            shift and go to state 106
    termino                        shift and go to state 107
    factor                         shift and go to state 108
    constante                      shift and go to state 109
    lParen                         shift and go to state 110
    id                             shift and go to state 111

state 208

    (46) read -> READ ( id ) readAux ; .

    IF              reduce using rule 46 (read -> READ ( id ) readAux ; .)
    WRITE           reduce using rule 46 (read -> READ ( id ) readAux ; .)
    READ            reduce using rule 46 (read -> READ ( id ) readAux ; .)
    WHILE           reduce using rule 46 (read -> READ ( id ) readAux ; .)
    RETURN          reduce using rule 46 (read -> READ ( id ) readAux ; .)
    FOR             reduce using rule 46 (read -> READ ( id ) readAux ; .)
    FACT            reduce using rule 46 (read -> READ ( id ) readAux ; .)
    FIBONACCI       reduce using rule 46 (read -> READ ( id ) readAux ; .)
    CUADRATICA      reduce using rule 46 (read -> READ ( id ) readAux ; .)
    RAIZ            reduce using rule 46 (read -> READ ( id ) readAux ; .)
    ID              reduce using rule 46 (read -> READ ( id ) readAux ; .)
    INT             reduce using rule 46 (read -> READ ( id ) readAux ; .)
    FLOAT           reduce using rule 46 (read -> READ ( id ) readAux ; .)
    CHAR            reduce using rule 46 (read -> READ ( id ) readAux ; .)
    ARREGLO         reduce using rule 46 (read -> READ ( id ) readAux ; .)
    }               reduce using rule 46 (read -> READ ( id ) readAux ; .)


state 209

    (52) while -> WHILE whileAux ( superexpresion ) whileAux2 . bloque
    (14) bloque -> . { cuerpo }

    {               shift and go to state 46

    bloque                         shift and go to state 216

state 210

    (48) for -> FOR ( id = superexpresion forAux . ; superexpresion forAux2 ; asignacion ) bloque forAux3

    ;               shift and go to state 217


state 211

    (114) cuadratica -> CUADRATICA ( CTEI , CTEI , . CTEI ) ;

    CTEI            shift and go to state 218


state 212

    (32) condicion -> IF ( superexpresion ) condicionAux bloque condicionelse .

    IF              reduce using rule 32 (condicion -> IF ( superexpresion ) condicionAux bloque condicionelse .)
    WRITE           reduce using rule 32 (condicion -> IF ( superexpresion ) condicionAux bloque condicionelse .)
    READ            reduce using rule 32 (condicion -> IF ( superexpresion ) condicionAux bloque condicionelse .)
    WHILE           reduce using rule 32 (condicion -> IF ( superexpresion ) condicionAux bloque condicionelse .)
    RETURN          reduce using rule 32 (condicion -> IF ( superexpresion ) condicionAux bloque condicionelse .)
    FOR             reduce using rule 32 (condicion -> IF ( superexpresion ) condicionAux bloque condicionelse .)
    FACT            reduce using rule 32 (condicion -> IF ( superexpresion ) condicionAux bloque condicionelse .)
    FIBONACCI       reduce using rule 32 (condicion -> IF ( superexpresion ) condicionAux bloque condicionelse .)
    CUADRATICA      reduce using rule 32 (condicion -> IF ( superexpresion ) condicionAux bloque condicionelse .)
    RAIZ            reduce using rule 32 (condicion -> IF ( superexpresion ) condicionAux bloque condicionelse .)
    ID              reduce using rule 32 (condicion -> IF ( superexpresion ) condicionAux bloque condicionelse .)
    INT             reduce using rule 32 (condicion -> IF ( superexpresion ) condicionAux bloque condicionelse .)
    FLOAT           reduce using rule 32 (condicion -> IF ( superexpresion ) condicionAux bloque condicionelse .)
    CHAR            reduce using rule 32 (condicion -> IF ( superexpresion ) condicionAux bloque condicionelse .)
    ARREGLO         reduce using rule 32 (condicion -> IF ( superexpresion ) condicionAux bloque condicionelse .)
    }               reduce using rule 32 (condicion -> IF ( superexpresion ) condicionAux bloque condicionelse .)


state 213

    (34) condicionelse -> ELSE . condicionelseAux bloque
    (36) condicionelseAux -> .

    {               reduce using rule 36 (condicionelseAux -> .)

    condicionelseAux               shift and go to state 219

state 214

    (35) condicionelse -> empty .

    IF              reduce using rule 35 (condicionelse -> empty .)
    WRITE           reduce using rule 35 (condicionelse -> empty .)
    READ            reduce using rule 35 (condicionelse -> empty .)
    WHILE           reduce using rule 35 (condicionelse -> empty .)
    RETURN          reduce using rule 35 (condicionelse -> empty .)
    FOR             reduce using rule 35 (condicionelse -> empty .)
    FACT            reduce using rule 35 (condicionelse -> empty .)
    FIBONACCI       reduce using rule 35 (condicionelse -> empty .)
    CUADRATICA      reduce using rule 35 (condicionelse -> empty .)
    RAIZ            reduce using rule 35 (condicionelse -> empty .)
    ID              reduce using rule 35 (condicionelse -> empty .)
    INT             reduce using rule 35 (condicionelse -> empty .)
    FLOAT           reduce using rule 35 (condicionelse -> empty .)
    CHAR            reduce using rule 35 (condicionelse -> empty .)
    ARREGLO         reduce using rule 35 (condicionelse -> empty .)
    }               reduce using rule 35 (condicionelse -> empty .)


state 215

    (42) writepp -> , writeppAux writep .

    )               reduce using rule 42 (writepp -> , writeppAux writep .)


state 216

    (52) while -> WHILE whileAux ( superexpresion ) whileAux2 bloque .

    IF              reduce using rule 52 (while -> WHILE whileAux ( superexpresion ) whileAux2 bloque .)
    WRITE           reduce using rule 52 (while -> WHILE whileAux ( superexpresion ) whileAux2 bloque .)
    READ            reduce using rule 52 (while -> WHILE whileAux ( superexpresion ) whileAux2 bloque .)
    WHILE           reduce using rule 52 (while -> WHILE whileAux ( superexpresion ) whileAux2 bloque .)
    RETURN          reduce using rule 52 (while -> WHILE whileAux ( superexpresion ) whileAux2 bloque .)
    FOR             reduce using rule 52 (while -> WHILE whileAux ( superexpresion ) whileAux2 bloque .)
    FACT            reduce using rule 52 (while -> WHILE whileAux ( superexpresion ) whileAux2 bloque .)
    FIBONACCI       reduce using rule 52 (while -> WHILE whileAux ( superexpresion ) whileAux2 bloque .)
    CUADRATICA      reduce using rule 52 (while -> WHILE whileAux ( superexpresion ) whileAux2 bloque .)
    RAIZ            reduce using rule 52 (while -> WHILE whileAux ( superexpresion ) whileAux2 bloque .)
    ID              reduce using rule 52 (while -> WHILE whileAux ( superexpresion ) whileAux2 bloque .)
    INT             reduce using rule 52 (while -> WHILE whileAux ( superexpresion ) whileAux2 bloque .)
    FLOAT           reduce using rule 52 (while -> WHILE whileAux ( superexpresion ) whileAux2 bloque .)
    CHAR            reduce using rule 52 (while -> WHILE whileAux ( superexpresion ) whileAux2 bloque .)
    ARREGLO         reduce using rule 52 (while -> WHILE whileAux ( superexpresion ) whileAux2 bloque .)
    }               reduce using rule 52 (while -> WHILE whileAux ( superexpresion ) whileAux2 bloque .)


state 217

    (48) for -> FOR ( id = superexpresion forAux ; . superexpresion forAux2 ; asignacion ) bloque forAux3
    (58) superexpresion -> . megaexpresion superexpresionp
    (62) megaexpresion -> . exp megaexpresionp
    (70) exp -> . termino expp
    (75) termino -> . factor terminop
    (80) factor -> . constante
    (81) factor -> . lParen superexpresion rParen
    (84) constante -> . id
    (85) constante -> . CTEF ctef
    (86) constante -> . CTEI ctei
    (82) lParen -> . (
    (105) id -> . ID idp

    CTEF            shift and go to state 112
    CTEI            shift and go to state 113
    (               shift and go to state 114
    ID              shift and go to state 82

    id                             shift and go to state 111
    superexpresion                 shift and go to state 220
    megaexpresion                  shift and go to state 105
    exp                            shift and go to state 106
    termino                        shift and go to state 107
    factor                         shift and go to state 108
    constante                      shift and go to state 109
    lParen                         shift and go to state 110

state 218

    (114) cuadratica -> CUADRATICA ( CTEI , CTEI , CTEI . ) ;

    )               shift and go to state 221


state 219

    (34) condicionelse -> ELSE condicionelseAux . bloque
    (14) bloque -> . { cuerpo }

    {               shift and go to state 46

    bloque                         shift and go to state 222

state 220

    (48) for -> FOR ( id = superexpresion forAux ; superexpresion . forAux2 ; asignacion ) bloque forAux3
    (50) forAux2 -> .

    ;               reduce using rule 50 (forAux2 -> .)

    forAux2                        shift and go to state 223

state 221

    (114) cuadratica -> CUADRATICA ( CTEI , CTEI , CTEI ) . ;

    ;               shift and go to state 224


state 222

    (34) condicionelse -> ELSE condicionelseAux bloque .

    IF              reduce using rule 34 (condicionelse -> ELSE condicionelseAux bloque .)
    WRITE           reduce using rule 34 (condicionelse -> ELSE condicionelseAux bloque .)
    READ            reduce using rule 34 (condicionelse -> ELSE condicionelseAux bloque .)
    WHILE           reduce using rule 34 (condicionelse -> ELSE condicionelseAux bloque .)
    RETURN          reduce using rule 34 (condicionelse -> ELSE condicionelseAux bloque .)
    FOR             reduce using rule 34 (condicionelse -> ELSE condicionelseAux bloque .)
    FACT            reduce using rule 34 (condicionelse -> ELSE condicionelseAux bloque .)
    FIBONACCI       reduce using rule 34 (condicionelse -> ELSE condicionelseAux bloque .)
    CUADRATICA      reduce using rule 34 (condicionelse -> ELSE condicionelseAux bloque .)
    RAIZ            reduce using rule 34 (condicionelse -> ELSE condicionelseAux bloque .)
    ID              reduce using rule 34 (condicionelse -> ELSE condicionelseAux bloque .)
    INT             reduce using rule 34 (condicionelse -> ELSE condicionelseAux bloque .)
    FLOAT           reduce using rule 34 (condicionelse -> ELSE condicionelseAux bloque .)
    CHAR            reduce using rule 34 (condicionelse -> ELSE condicionelseAux bloque .)
    ARREGLO         reduce using rule 34 (condicionelse -> ELSE condicionelseAux bloque .)
    }               reduce using rule 34 (condicionelse -> ELSE condicionelseAux bloque .)


state 223

    (48) for -> FOR ( id = superexpresion forAux ; superexpresion forAux2 . ; asignacion ) bloque forAux3

    ;               shift and go to state 225


state 224

    (114) cuadratica -> CUADRATICA ( CTEI , CTEI , CTEI ) ; .

    IF              reduce using rule 114 (cuadratica -> CUADRATICA ( CTEI , CTEI , CTEI ) ; .)
    WRITE           reduce using rule 114 (cuadratica -> CUADRATICA ( CTEI , CTEI , CTEI ) ; .)
    READ            reduce using rule 114 (cuadratica -> CUADRATICA ( CTEI , CTEI , CTEI ) ; .)
    WHILE           reduce using rule 114 (cuadratica -> CUADRATICA ( CTEI , CTEI , CTEI ) ; .)
    RETURN          reduce using rule 114 (cuadratica -> CUADRATICA ( CTEI , CTEI , CTEI ) ; .)
    FOR             reduce using rule 114 (cuadratica -> CUADRATICA ( CTEI , CTEI , CTEI ) ; .)
    FACT            reduce using rule 114 (cuadratica -> CUADRATICA ( CTEI , CTEI , CTEI ) ; .)
    FIBONACCI       reduce using rule 114 (cuadratica -> CUADRATICA ( CTEI , CTEI , CTEI ) ; .)
    CUADRATICA      reduce using rule 114 (cuadratica -> CUADRATICA ( CTEI , CTEI , CTEI ) ; .)
    RAIZ            reduce using rule 114 (cuadratica -> CUADRATICA ( CTEI , CTEI , CTEI ) ; .)
    ID              reduce using rule 114 (cuadratica -> CUADRATICA ( CTEI , CTEI , CTEI ) ; .)
    INT             reduce using rule 114 (cuadratica -> CUADRATICA ( CTEI , CTEI , CTEI ) ; .)
    FLOAT           reduce using rule 114 (cuadratica -> CUADRATICA ( CTEI , CTEI , CTEI ) ; .)
    CHAR            reduce using rule 114 (cuadratica -> CUADRATICA ( CTEI , CTEI , CTEI ) ; .)
    ARREGLO         reduce using rule 114 (cuadratica -> CUADRATICA ( CTEI , CTEI , CTEI ) ; .)
    }               reduce using rule 114 (cuadratica -> CUADRATICA ( CTEI , CTEI , CTEI ) ; .)


state 225

    (48) for -> FOR ( id = superexpresion forAux ; superexpresion forAux2 ; . asignacion ) bloque forAux3
    (55) asignacion -> . vars
    (56) asignacion -> . id asignacionp
    (94) vars -> . varsp
    (105) id -> . ID idp
    (95) varsp -> . tipo varspp ; varsp
    (96) varsp -> . empty
    (100) tipo -> . INT
    (101) tipo -> . FLOAT
    (102) tipo -> . CHAR
    (103) tipo -> . ARREGLO arreglo
    (117) empty -> .

    ID              shift and go to state 82
    INT             shift and go to state 9
    FLOAT           shift and go to state 10
    CHAR            shift and go to state 11
    ARREGLO         shift and go to state 12
    )               reduce using rule 117 (empty -> .)

    id                             shift and go to state 226
    asignacion                     shift and go to state 227
    vars                           shift and go to state 56
    varsp                          shift and go to state 6
    tipo                           shift and go to state 7
    empty                          shift and go to state 8

state 226

    (56) asignacion -> id . asignacionp
    (57) asignacionp -> . = superexpresion ;

    =               shift and go to state 88

    asignacionp                    shift and go to state 87

state 227

    (48) for -> FOR ( id = superexpresion forAux ; superexpresion forAux2 ; asignacion . ) bloque forAux3

    )               shift and go to state 228


state 228

    (48) for -> FOR ( id = superexpresion forAux ; superexpresion forAux2 ; asignacion ) . bloque forAux3
    (14) bloque -> . { cuerpo }

    {               shift and go to state 46

    bloque                         shift and go to state 229

state 229

    (48) for -> FOR ( id = superexpresion forAux ; superexpresion forAux2 ; asignacion ) bloque . forAux3
    (51) forAux3 -> .

    IF              reduce using rule 51 (forAux3 -> .)
    WRITE           reduce using rule 51 (forAux3 -> .)
    READ            reduce using rule 51 (forAux3 -> .)
    WHILE           reduce using rule 51 (forAux3 -> .)
    RETURN          reduce using rule 51 (forAux3 -> .)
    FOR             reduce using rule 51 (forAux3 -> .)
    FACT            reduce using rule 51 (forAux3 -> .)
    FIBONACCI       reduce using rule 51 (forAux3 -> .)
    CUADRATICA      reduce using rule 51 (forAux3 -> .)
    RAIZ            reduce using rule 51 (forAux3 -> .)
    ID              reduce using rule 51 (forAux3 -> .)
    INT             reduce using rule 51 (forAux3 -> .)
    FLOAT           reduce using rule 51 (forAux3 -> .)
    CHAR            reduce using rule 51 (forAux3 -> .)
    ARREGLO         reduce using rule 51 (forAux3 -> .)
    }               reduce using rule 51 (forAux3 -> .)

    forAux3                        shift and go to state 230

state 230

    (48) for -> FOR ( id = superexpresion forAux ; superexpresion forAux2 ; asignacion ) bloque forAux3 .

    IF              reduce using rule 48 (for -> FOR ( id = superexpresion forAux ; superexpresion forAux2 ; asignacion ) bloque forAux3 .)
    WRITE           reduce using rule 48 (for -> FOR ( id = superexpresion forAux ; superexpresion forAux2 ; asignacion ) bloque forAux3 .)
    READ            reduce using rule 48 (for -> FOR ( id = superexpresion forAux ; superexpresion forAux2 ; asignacion ) bloque forAux3 .)
    WHILE           reduce using rule 48 (for -> FOR ( id = superexpresion forAux ; superexpresion forAux2 ; asignacion ) bloque forAux3 .)
    RETURN          reduce using rule 48 (for -> FOR ( id = superexpresion forAux ; superexpresion forAux2 ; asignacion ) bloque forAux3 .)
    FOR             reduce using rule 48 (for -> FOR ( id = superexpresion forAux ; superexpresion forAux2 ; asignacion ) bloque forAux3 .)
    FACT            reduce using rule 48 (for -> FOR ( id = superexpresion forAux ; superexpresion forAux2 ; asignacion ) bloque forAux3 .)
    FIBONACCI       reduce using rule 48 (for -> FOR ( id = superexpresion forAux ; superexpresion forAux2 ; asignacion ) bloque forAux3 .)
    CUADRATICA      reduce using rule 48 (for -> FOR ( id = superexpresion forAux ; superexpresion forAux2 ; asignacion ) bloque forAux3 .)
    RAIZ            reduce using rule 48 (for -> FOR ( id = superexpresion forAux ; superexpresion forAux2 ; asignacion ) bloque forAux3 .)
    ID              reduce using rule 48 (for -> FOR ( id = superexpresion forAux ; superexpresion forAux2 ; asignacion ) bloque forAux3 .)
    INT             reduce using rule 48 (for -> FOR ( id = superexpresion forAux ; superexpresion forAux2 ; asignacion ) bloque forAux3 .)
    FLOAT           reduce using rule 48 (for -> FOR ( id = superexpresion forAux ; superexpresion forAux2 ; asignacion ) bloque forAux3 .)
    CHAR            reduce using rule 48 (for -> FOR ( id = superexpresion forAux ; superexpresion forAux2 ; asignacion ) bloque forAux3 .)
    ARREGLO         reduce using rule 48 (for -> FOR ( id = superexpresion forAux ; superexpresion forAux2 ; asignacion ) bloque forAux3 .)
    }               reduce using rule 48 (for -> FOR ( id = superexpresion forAux ; superexpresion forAux2 ; asignacion ) bloque forAux3 .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for FUNCTION in state 5 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 14 resolved as shift
WARNING: shift/reduce conflict for INT in state 28 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 28 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 28 resolved as shift
WARNING: shift/reduce conflict for ARREGLO in state 28 resolved as shift
WARNING: shift/reduce conflict for INT in state 46 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 46 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 46 resolved as shift
WARNING: shift/reduce conflict for ARREGLO in state 46 resolved as shift
WARNING: shift/reduce conflict for IF in state 50 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 50 resolved as shift
WARNING: shift/reduce conflict for READ in state 50 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 50 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 50 resolved as shift
WARNING: shift/reduce conflict for FOR in state 50 resolved as shift
WARNING: shift/reduce conflict for FACT in state 50 resolved as shift
WARNING: shift/reduce conflict for FIBONACCI in state 50 resolved as shift
WARNING: shift/reduce conflict for CUADRATICA in state 50 resolved as shift
WARNING: shift/reduce conflict for RAIZ in state 50 resolved as shift
WARNING: shift/reduce conflict for ID in state 50 resolved as shift
WARNING: shift/reduce conflict for INT in state 50 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 50 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 50 resolved as shift
WARNING: shift/reduce conflict for ARREGLO in state 50 resolved as shift
WARNING: shift/reduce conflict for IF in state 58 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 58 resolved as shift
WARNING: shift/reduce conflict for READ in state 58 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 58 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 58 resolved as shift
WARNING: shift/reduce conflict for FOR in state 58 resolved as shift
WARNING: shift/reduce conflict for FACT in state 58 resolved as shift
WARNING: shift/reduce conflict for FIBONACCI in state 58 resolved as shift
WARNING: shift/reduce conflict for CUADRATICA in state 58 resolved as shift
WARNING: shift/reduce conflict for RAIZ in state 58 resolved as shift
WARNING: shift/reduce conflict for ID in state 58 resolved as shift
WARNING: shift/reduce conflict for INT in state 58 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 58 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 58 resolved as shift
WARNING: shift/reduce conflict for ARREGLO in state 58 resolved as shift
WARNING: reduce/reduce conflict in state 15 resolved using rule (programaF -> empty)
WARNING: rejected rule (function -> empty) in state 15
WARNING: reduce/reduce conflict in state 59 resolved using rule (estatutop -> empty)
WARNING: rejected rule (estatuto -> empty) in state 59
WARNING: reduce/reduce conflict in state 59 resolved using rule (estatuto -> empty)
WARNING: rejected rule (varsp -> empty) in state 59
WARNING: reduce/reduce conflict in state 59 resolved using rule (estatutop -> empty)
WARNING: rejected rule (varsp -> empty) in state 59
WARNING: reduce/reduce conflict in state 157 resolved using rule (writeppAux -> <empty>)
WARNING: rejected rule (empty -> <empty>) in state 157
WARNING: reduce/reduce conflict in state 158 resolved using rule (writeppAux -> <empty>)
WARNING: rejected rule (empty -> <empty>) in state 158
